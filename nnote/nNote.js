!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.nNote=t():e.nNote=t()}(self,(()=>(()=>{"use strict";var e={r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t);var o,n=(o=function(e,t){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])},o(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=function(e,t,o,n){var r,i=arguments.length,c=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,o,n);else for(var u=e.length-1;u>=0;u--)(r=e[u])&&(c=(i<3?r(c):i>3?r(t,o,c):r(t,o))||c);return i>3&&c&&Object.defineProperty(t,o,c),c},i=function(){function e(){this._cBind={}}return e.prototype.pushBind=function(e,t){this._cBind[e]||(this._cBind[e]=[]);var o=t.prototype.className;o&&(this._cBind[e].push({c:t,name:o}),window[e]&&this.doBind(e))},e.prototype.doBind=function(e){if(this._cBind[e]&&Array.isArray(this._cBind[e])&&window[e])for(var t=this._cBind[e];t.length>0;){var o=t.pop(),n=window[e][o.name];if(n){var r=Object.getOwnPropertyDescriptors(n.prototype);for(var i in r)"function"==typeof r[i].set&&Object.defineProperty(o.c.prototype,i,{set:r[i].set,enumerable:!0,configurable:!0}),"function"==typeof r[i].get&&Object.defineProperty(o.c.prototype,i,{get:r[i].get,enumerable:!0,configurable:!0}),r[i].value&&"function"==typeof r[i].value&&(o.c.prototype[i]=n.prototype[i]);for(var i in n)o.c[i]=n[i]}}},e}();function c(e,t){return function(t,o){t.prototype.className&&window.NoteBinder.pushBind(e,t)}}window.NoteBinder||(window.NoteBinder=new i);var u,p,f,a,l="nCore",d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t.getClassName=function(){},t.getClassType=function(){},t.prototype.init=function(){},t.prototype.getData=function(){},t.prototype.setData=function(e,t){},t.prototype.export=function(){},t.prototype.setHis=function(e){},t.prototype.getHis=function(){},t.prototype.getDescriptor=function(){},t.prototype.setNote=function(e){},t.prototype.getNote=function(){},t.prototype.getConfig=function(){},t.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]},t.prototype.renderName=function(){},t.prototype.renderTags=function(){},t.prototype.setTag=function(e){},t.prototype.removeTag=function(e){},t.prototype.hasTag=function(e){},Object.defineProperty(t.prototype,"name",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tags",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastHis",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return"ClassNote"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"note",{get:function(){},enumerable:!1,configurable:!0}),t=r([c(l)],t)}(function(){function e(){this._id=t.genId(this.classType),this._events={}}var t;return t=e,e.genId=function(e){for(var o="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=n.length,i=0;i<6;i++)o+=n.charAt(Math.floor(Math.random()*r));return t._count=t._count>=Number.MAX_VALUE?0:t._count+1,o=e+"_"+t._count+"_"+o+"_"+(new Date).getTime()},e.prototype.on=function(e,t,o){},e.prototype.removeListener=function(e,t,o){},e.prototype.emit=function(e){for(var t=[],o=1;o<arguments.length;o++)t[o-1]=arguments[o]},e.prototype.getId=function(){},Object.defineProperty(e.prototype,"className",{get:function(){return"ClassBase"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e._count=0,e=t=r([c(l)],e)}());!function(e){function t(){return null!==e&&e.apply(this,arguments)||this}n(t,e),Object.defineProperty(t.prototype,"className",{get:function(){return"Cmd"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t=r([c(l)],t)}(d);!function(e){e.UNKNOW="unknow",e.NUMBER="number",e.STRING="string",e.BOOLEAN="boolean",e.ARRAY="array",e.BIGINT="bigint",e.OBJECT="object"}(u||(u={})),function(e){e.COLOR="COLOR",e.DATETIME="DATETIME"}(p||(p={})),function(e){e.GET="GET",e.SET="SET",e.EXPO="EXPO",e.LANG="LANG"}(f||(f={})),function(e){e.UI="UI",e.HANDLER="HANDLER",e.RENDER="RENDER",e.SET="SET",e.GET="GET"}(a||(a={}));(function(){function e(){}e=r([c(l)],e)})(),function(){function e(){}e=r([c(l)],e)}(),function(){function e(){}e=r([c(l)],e)}(),function(){function e(){}e.classDes=function(){},e.removeProDes=function(e){},e.number=function(e){},e.string=function(e){},e.stringColor=function(e){},e.stringDateTime=function(e){},e.boolean=function(e){},e.object=function(e){},e.array=function(e){},e.render=function(e){},e.scrColor=function(){},e.srcDateTime=function(){},e.src=function(e){},e.notSet=function(){},e.notExpo=function(){},e.notGet=function(){},e.language=function(){},e.funchandler=function(){},e.funcrender=function(){},e.funcget=function(){},e.funcset=function(){},e=r([c(l)],e)}();var s,y,g,b,m,_,O,h,E,N,T,P,C=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t.prototype.start=function(){},t.prototype.stop=function(){},t.prototype.isRunning=function(){},Object.defineProperty(t.prototype,"autoStart",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return"Handler"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t=r([c(l)],t)}(d);!function(e){e[e.TOP=0]="TOP",e[e.MID_TOP=1]="MID_TOP",e[e.RIGHT=2]="RIGHT",e[e.MID_RIGHT=3]="MID_RIGHT",e[e.BOTTOM=4]="BOTTOM",e[e.MID_BOTTOM=5]="MID_BOTTOM",e[e.LEFT=6]="LEFT",e[e.MID_LEFT=7]="MID_LEFT",e[e.MID_CENTER=8]="MID_CENTER"}(s||(s={})),function(e){e.EXPORT="EXPORT",e.LANG="LANG"}(y||(y={})),function(e){e.LEFT="left",e.RIGHT="right",e.CENTER="center"}(g||(g={})),function(e){e.TOP="top",e.BOTTOM="bottom",e.CENTER="center"}(b||(b={})),function(e){e.EDIT="edit",e.VIEW="view",e.COMMENT="comment"}(m||(m={})),function(e){e.FIT_WIDTH="fit_width",e.FIT_HEIGHT="fit_height",e.FIT_CONTENT="fit_content",e.FIT_SIZE="fit_size",e.FIT_AUTO="fit_auto"}(_||(_={})),function(e){e.NOTLOAD="notload",e.LOADING="loading",e.LOADFAIL="loadfail",e.LOADED="loaded"}(O||(O={})),function(e){e.UNKNOW="",e.IMAGE="image",e.VIDEO="video",e.AUDIO="audio",e.PDF="pdf",e.DOCX="docx",e.PPTX="pptx",e.XLSX="xlsx",e.LOTTIEANIM="lottieAnim",e.WEBVIEW="webview"}(h||(h={})),function(e){e.TOUCH="touch",e.MOUSE="mouse"}(E||(E={})),function(e){e.READY="ready",e.LOAD_EVENT="load_event",e.MODULE_CHANGE="module_change",e.MODULE_LOADED="module_loaded",e.MODULE_LOADFAIL="module_loadfail",e.NOTE_SELECTION_START="note_selection_start",e.NOTE_SELECTION_MOVING="note_selection_moving",e.NOTE_SELECTION_END="note_selection_end",e.NOTE_NODE_SELECTED="note_node_selected",e.NOTE_PAGE_SELECTED="note_page_selected",e.NOTE_PAGE_VIEW_CHANGE="note_page_view_change",e.NOTE_PAGE_CHANGE="note_page_change",e.NOTE_PAGE_ADD="note_page_add",e.NOTE_PAGE_REMOVE="note_page_remove",e.PAGE_CHANGE="page_change",e.NOTE_HANDLER_RENDER_CHANGE="note_handler_render_change",e.NOTE_ZOOM_CHANGE="note_zoom_change",e.NOTE_KEYUP="note_keyup",e.NOTE_KEYDOWN="note_keydown",e.TEXT_INPUT_FOCUS="text_input_focus",e.TEXT_INPUT_BLUR="text_input_blur",e.NODE_CHANGE="node_change",e.NODE_SIZE_CHANGE="node_size_change",e.NODE_TRANSFORM_CHANGE="node_transform_change",e.NODE_MOUSE_OVER="node_mouse_over",e.NODE_MOUSE_OUT="node_mouse_out",e.NODE_MOUSE_MOVE="node_mouse_move",e.NODE_MOUSE_DOWN="node_mouse_down",e.NODE_MOUSE_UP="node_mouse_up",e.NODE_OVER="node_over",e.NODE_OUT="node_out",e.NODE_MOVE="node_move",e.NODE_DOWN="node_down",e.NODE_UP="node_up",e.NODE_CLICK="node_click",e.NODE_DBLCLICK="node_dblclick",e.NODE_MULTICLICK="node_multiclick",e.NODE_MOUSE_CLICK="node_mouse_click",e.NODE_MOUSE_DBLCLICK="node_mouse_dblclick",e.NOTE_CMD_CHANGE="note_cmd_change"}(N||(N={})),function(e){e.SHIFT="shift",e.META="meta",e.CONTROL="control",e.ALT="alt"}(T||(T={})),function(e){e.UIPAGE="UIPage",e.UINODE="UINode",e.NOTE="Note",e.CMD="Cmd",e.HANDLER="Handler"}(P||(P={}));var D,I=function(){function e(){}return Object.defineProperty(e.prototype,"className",{get:function(){return"Logger"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getType",{get:function(){},enumerable:!1,configurable:!0}),e=r([c(l)],e)}(),j=function(e){function t(t){var o=e.call(this)||this;return console.log("Initing Note Version "+(null==t?void 0:t.version)),(null==t?void 0:t.coreUrl)?o.loadCore((null==t?void 0:t.coreUrl)+"?ver="+(null==t?void 0:t.version),(function(){o.initNote(t)})):o.initNote(t),o}return n(t,e),t.prototype.defaultCheckTouchCapable=function(e){},t.prototype.defaultCheckIsMobile=function(e){},t.prototype.defaultCheckIsWebview=function(e){},t.prototype.loadCore=function(e,t){console.log("load module note core "+e);var o=document.createElement("script");o.onload=function(){window.nCore;window.NoteBinder&&window.NoteBinder.doBind("nCore"),t()},o.onerror=function(){console.log("Load module core error !")},o.src=e,document.head.appendChild(o)},t.prototype.initNote=function(e){},t.prototype._parseModuleConfig=function(e){},t.prototype._mergeModuleData=function(e,t){},t.prototype.addModule=function(e){},t.prototype.loadModule=function(e){},t.prototype.getModuleData=function(e){},t.prototype.getStatusModule=function(e){},t.prototype.checkDependenciesModuleLoaded=function(e){},t.prototype._findAndLoadModule=function(){},t.prototype._loadJs=function(e){},t.prototype._onLoadModuleFinish=function(e,t,o){},t.prototype._doBindModule=function(e){},Object.defineProperty(t.prototype,"version",{get:function(){},enumerable:!1,configurable:!0}),t.prototype._start=function(){},t.prototype._initUI=function(){},Object.defineProperty(t.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),t.prototype.appendHandlerRender=function(e){},t.prototype.removeHandlerRender=function(e){},t.prototype.setTextFocus=function(e){},t.prototype.getTextFocus=function(){},t.prototype.load=function(e){},t.prototype.export=function(){},t.prototype.reset=function(){},t.prototype.setClipboardData=function(e,t){},t.prototype.getClipboardData=function(e){},t.prototype.getHis=function(){},t.prototype.setHis=function(e){},t.prototype.onPageChange=function(e){},t.prototype.saveHistory=function(e){},t.prototype.undo=function(){},t.prototype.redo=function(){},t.prototype.doSetHisData=function(e){},t.prototype.getRegisterInstance=function(){},t.prototype.setConfig=function(e){},t.prototype.getConfig=function(){},Object.defineProperty(t.prototype,"config",{get:function(){},enumerable:!1,configurable:!0}),t.prototype._applyConfig=function(){},Object.defineProperty(t.prototype,"zoom",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){},enumerable:!1,configurable:!0}),t.prototype.isTouchCapable=function(){},t.prototype.isMobile=function(){},t.prototype.isWebview=function(){},t.prototype.enableLog=function(){},t.prototype.disableLog=function(){},t.prototype.setLogger=function(e){},t.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]},t.prototype.registerCmd=function(e,t){},t.prototype.unregisterCmd=function(e){},t.prototype.registerCmds=function(e){},t.prototype.unregisterCmds=function(e){},t.prototype.getAllRegisterCmdName=function(){},t.prototype.getRegisterCmd=function(){},t.prototype.doCmd=function(e,t){},t.prototype.registerHandler=function(e,t){},t.prototype.unregisterHandler=function(e){},t.prototype.registerHandlers=function(e){},t.prototype.unregisterHandlers=function(e){},t.prototype.getHandlerByName=function(e){},t.prototype.getAllHandler=function(){},t.prototype.getAllRegisterHandlerName=function(){},t.prototype.registerNode=function(e,t){},t.prototype.unregisterNode=function(e){},t.prototype.registerNodes=function(e){},t.prototype.unregisterNodes=function(e){},t.prototype.getAllRegisterNodeName=function(){},t.prototype.addNode=function(e,t){},t.prototype.getNodeSelected=function(){},t.prototype.setNodeSelected=function(e){},t.prototype.createNode=function(e){},t.prototype.getIdsOfListNode=function(e){},t.prototype.compareListNode=function(e,t){},t.prototype.addPage=function(e,t){},t.prototype.removePage=function(e){},t.prototype.removeAllPage=function(){},t.prototype.getIndexPage=function(e){},t.prototype.swapIndexPage=function(e,t){},t.prototype.getPageSelected=function(){},t.prototype.setPageSelected=function(e){},t.prototype.getPages=function(){},t.prototype.registerClassType=function(e,t){},t.prototype.unregisterClassType=function(e,t){},t.prototype.registerClassTypes=function(e){},t.prototype.unregisterClassTypes=function(e){},t.prototype.getClassType=function(e,t){},t.prototype.getAllNameClassType=function(e){},t.prototype.loadJs=function(e,t,o){},t.prototype.loadCss=function(e){},t.prototype.loadFont=function(e,t,o){},t.prototype._initKeyboard=function(){},t.prototype._onkeypress=function(e){},t.prototype._onkeydown=function(e){},t.prototype._onkeyup=function(e){},Object.defineProperty(t.prototype,"keydowns",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key_shift",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key_meta",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key_ctrl",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key_alt",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return"Note"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t=r([c(l)],t)}(d);(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}n(t,e),t.prototype.init=function(){},t.prototype.startHandler=function(){},t.prototype.stopHandler=function(){},t.prototype.createBt=function(e,t){},t.prototype.showFrame=function(){},t.prototype.hideFrame=function(){},t.prototype.iframeMessages=function(e){},t.prototype.onBtCancel=function(){},t.prototype.onBtDone=function(){},Object.defineProperty(t.prototype,"iframePluginUrl",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return"PHandler"},enumerable:!1,configurable:!0}),t=r([c(l)],t)})(C),function(){function e(){}Object.defineProperty(e.prototype,"className",{get:function(){return"Sanitizer"},enumerable:!1,configurable:!0}),e.num=function(e){},e.str=function(e){},e.str_hexColor=function(e){},e.str_style=function(e){},e.str_url=function(e,t,o){},e.sanitizeString=function(e){},e.sanitizeHtml=function(e){},e.sanitizeSvg=function(e){},e.sanitizeMathML=function(e){},e=r([c(l)],e)}(),function(e){function t(){return null!==e&&e.apply(this,arguments)||this}n(t,e),t.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]},Object.defineProperty(t.prototype,"className",{get:function(){return"TimestampLogger"},enumerable:!1,configurable:!0}),t=r([c(l)],t)}(I),function(e){function t(){return null!==e&&e.apply(this,arguments)||this}n(t,e),t.prototype.init=function(){},t.prototype.renderAll=function(){},t.prototype.getData=function(){},t.prototype._checkNeedSaveHis=function(e){},t.prototype.setData=function(e,t){},t.prototype.export=function(){},t.prototype.getHis=function(){},t.prototype.setHis=function(e){},t.prototype.addChild=function(e){},t.prototype.addToParent=function(e){},t.prototype.addChilds=function(e){},t.prototype.getParent=function(){},t.prototype.removeFromParent=function(){},t.prototype.removeChild=function(e){},t.prototype.removeAllChild=function(){},t.prototype.getChild=function(){},t.prototype.clone=function(){},Object.defineProperty(t.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"renderContent",{get:function(){},enumerable:!1,configurable:!0}),t.prototype.anchorable=function(){},t.prototype.getThumb=function(){},t.prototype.calSize=function(){},Object.defineProperty(t.prototype,"childData",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"childIds",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),t.prototype.css=function(e,t){},t.prototype.getCss=function(e){},t.prototype.renderStyle=function(){},t.prototype.renderCssClass=function(){},t.prototype.renderSize=function(){},t.prototype.renderTransform=function(){},t.prototype.renderTransformOrigin=function(){},t.prototype.setSize=function(e,t){},t.prototype.setTransformOriginPoint=function(e,t){},t.prototype.setTransformOrigin=function(e,t){},t.prototype.onResize=function(){},t.prototype.onTransform=function(){},t.prototype.getBorderWidth=function(){},Object.defineProperty(t.prototype,"x",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"originX",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"originY",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"deltaPos",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"deltaTime",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"resizable",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"movable",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rotatable",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"borderWidth",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"borderRadius",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"borderStyle",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"borderColor",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"enabled",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectable",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hisSetting",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scale",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rotate",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"opacity",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"visible",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"zIndex",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lock",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"style",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"cssClass",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"contentWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"contentHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"originPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"centerPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"topPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rightPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bottomPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"leftPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"boundingBox",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastMouseDown",{get:function(){},enumerable:!1,configurable:!0}),t.prototype.initEventListener=function(){},t.prototype.addMouseEvent=function(){},t.prototype.removeMouseEvent=function(){},t.prototype.addTouchEvent=function(){},t.prototype.removeTouchEvent=function(){},t.prototype._mouseover=function(e){},t.prototype._mouseout=function(e){},t.prototype._mousemove=function(e){},t.prototype._mousedown=function(e){},t.prototype._mouseup=function(e){},t.prototype._nodeClick=function(e){},t.prototype._nodeDbClick=function(e){},t.prototype._nodeMultiClick=function(e){},t.prototype._click=function(e){},t.prototype._dblclick=function(e){},t.prototype._touchstart=function(e){},t.prototype._touchmove=function(e){},t.prototype._touchcancel=function(e){},t.prototype._touchend=function(e){},t.prototype._nodeDown=function(e){},t.prototype._nodeUp=function(e){},Object.defineProperty(t.prototype,"className",{get:function(){return"UINode"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t=r([c(l)],t)}(d),function(){function e(){}Object.defineProperty(e.prototype,"className",{get:function(){return"Utils"},enumerable:!1,configurable:!0}),e.addArrayPrototype=function(){},e.removeArrayPrototype=function(){},e.notNull=function(e){},e.isNull=function(e){},e.randrom=function(e,t){},e.merge=function(e,t){},e.deepMerge=function(e,t){},e.deepClone=function(e){},e.mergeNotNull=function(e,t){},e.mergePartial=function(e,t){},e.toArr=function(e){},e.getTransformValue=function(e){},e.transformToCss=function(e){},e.inserClassCss=function(e,t){},e.removeAllChildHTMLElement=function(e,t){},e.pointToPage=function(e,t){},e.getDistance=function(e,t,o,n){},e.getBoundingBox=function(e,t){},e.getOriginBoxOfBoundingBox=function(e,t){},e.pointInRect=function(e,t,o){},e.rectInRect=function(e,t){},e.pointRighAngle=function(e,t,o,n,r,i){},e.pointRighAngleRotate=function(e,t,o,n,r){},e.angleTo180=function(e){},e.pointLineInOrder=function(e,t,o,n,r,i){},e.angleOf=function(e,t,o,n){},e.getPointRotate=function(e,t,o,n,r){},e.getRectRotate=function(e,t,o,n){},e.getNodeConner=function(e){},e.createPointTest=function(e,t,o,n,r){},e.makeDragable=function(e){},e.clearDragable=function(e){},e.makeIconButtom=function(e,t,o,n){},e.cropCanvasTransparent=function(e,t){},e=r([c(l)],e)}(),function(){function e(){}e.prototype.getSqDist=function(e,t){},e.prototype.getSqSegDist=function(e,t,o){},e.prototype.simplifyRadialDist=function(e,t){},e.prototype.simplifyDPStep=function(e,t,o,n,r){},e.prototype.simplifyDouglasPeucker=function(e,t){},e.prototype.simplify=function(e,t,o){},Object.defineProperty(e.prototype,"className",{get:function(){return"Simplify"},enumerable:!1,configurable:!0}),e=r([c(l)],e)}();return document.addEventListener("DOMContentLoaded",(function(){D=new j({version:"0.1",coreUrl:"nCore.js",configUrl:"config.json",backgroundColor:"#CCCCCC",parent:document.body,width:window.innerWidth,height:window.innerHeight,zoom:1,onready:function(){!function(){window.addEventListener("resize",(function(){})),D.log("start !!!!!");var e={pages:[{backgroundSrc:"https://png.pngtree.com/background/20211215/original/pngtree-background-biru-keren-dan-kosong-abstract-untuk-template-desain-ppt-picture-image_1456303.jpg",backgroundType:h.IMAGE,style:{backgroundColor:"#FFFFFF"},childData:[{className:"UITextImage",svgSrc:"images/svg_3/AI10_INT0009_DMSHAPE2_00127.svg",fontColor:"#ffffff",fontSize:40,x:200,y:200,width:300,height:300},{className:"UILayer",width:432,height:445,scale:.57,x:300,y:700,rotate:125,style:{backgroundColor:"red"},childData:[{className:"UIImage",src:"images/SRD_comic_clouds_11.svg",x:50,y:50,width:150,rotate:123},{className:"UIShape",x:250,y:50,width:80,height:80,style:{backgroundColor:"yellow"}}]},{className:"UIShape",width:50,height:100,rotate:30,x:200,y:400,style:{backgroundColor:"green"}},{className:"UIText",style:{backgroundColor:"blue"},borderColor:"red",borderWidth:5,borderStyle:"solid",borderRadius:10},{className:"UIAudio",audioOptions:{src:"https://stream.nixcdn.com/Sony_Audio1/AllIWantForChristmasIsYou_MariahC_5hr.mp3?st=q2AL7gduOIgHlDxCTli9ZQ&e=1670248621&t=1670163321617"},x:300,y:100,borderColor:"red",borderWidth:35,borderStyle:"solid",borderRadius:10},{className:"UIVideo",videoOptions:{src:"https://stream.nixcdn.com/PreNCT21/HayyaHayyaBetterTogetherFifaWorldCup2022TM-TrinidadCardonaDavidoAisha-8306988.mp4?st=0T2xBvYR8EAgB9VTDm1OsQ&e=1670383545&t=1670297155458",autoplay:!0},x:200,y:300},{className:"UIYoutube",src:"NUl0yrflJI8",width:600,height:400,x:400,y:200},{className:"UIQuickMark",textContent:"đ",imageSrc:"images/SRD_comic_clouds_11.svg",fontFace:{src:"images/HP0015HB.ttf",family:"font_chu_dep"},fontColor:"red",fontSize:40,x:400,y:200}]},{backgroundSrc:"https://png.pngtree.com/background/20211215/original/pngtree-background-biru-keren-dan-kosong-abstract-untuk-template-desain-ppt-picture-image_1456303.jpg",backgroundType:h.IMAGE,childData:[{className:"UIMathML",mathml:'<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mo>+</mo><mfrac><mn>2</mn><mn>3</mn></mfrac><mo>+</mo><msqrt><mn>56</mn></msqrt></math>',x:50,y:50}]},{backgroundSrc:"https://png.pngtree.com/background/20211215/original/pngtree-background-biru-keren-dan-kosong-abstract-untuk-template-desain-ppt-picture-image_1456303.jpg",backgroundType:h.IMAGE,childData:[]},{backgroundSrc:"https://stream.nixcdn.com/Sony_Audio1/AllIWantForChristmasIsYou_MariahC_5hr.mp3?st=q2AL7gduOIgHlDxCTli9ZQ&e=1670248621&t=1670163321617",backgroundType:h.AUDIO},{backgroundSrc:"/images/video.mp4",backgroundType:h.VIDEO},{backgroundSrc:"https://s3-origin.nextidc.net/cdnazota/homework/m04_2022/d28/1/0bb063647de7f877e73bc17cee03a14a_9dde68d197fe450b98299527572070531651112707.docx",backgroundType:h.DOCX}]};D.load(e);for(var t=0;t<1;t++)D.addNode({className:"UIImage",src:"images/SRD_comic_clouds_11.svg",width:80,height:80,rotate:10+100*Math.random(),scale:1+.5*Math.random(),x:400+100*Math.random(),y:500+60*Math.random()},0);D.on(N.NODE_CLICK,(function(e,t,o){})),D.addNode({className:"UIImage",src:"images/loading-transparent-v2.gif",rotate:10+100*Math.random(),scale:1+.5*Math.random(),x:400+100*Math.random(),y:500+60*Math.random()},0),D.addNode({className:"UIImage",src:"https://png.pngtree.com/background/20220714/original/pngtree-abstract-background-hijau-kosong-dan-keren-untuk-template-powerpoint-picture-image_1605243.jpg",maxWidth:500,x:40+100*Math.random(),y:50+60*Math.random()},0),D.on(N.NOTE_PAGE_VIEW_CHANGE,(function(e,t,o){D.setConfig({width:t,height:o})}))}()}})})),t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,