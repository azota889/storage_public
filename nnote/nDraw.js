!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.nDraw=e():t.nDraw=e()}(self,(()=>(()=>{"use strict";var t={d:(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{DrawBrush:()=>W,DrawBrushArrow:()=>q,DrawBrushCircle:()=>Y,DrawBrushErase:()=>J,DrawBrushFree:()=>G,DrawBrushImage:()=>Z,DrawBrushLine:()=>F,DrawBrushRect:()=>V,DrawBrushSquare:()=>X,DrawBrushTriangle:()=>K,DrawHandler:()=>et,Fill_Type:()=>k,SetDrawBrush:()=>nt,SetStyleBrush:()=>$,StartDrawCmd:()=>it,StopDrawCmd:()=>st,Stroke_Type:()=>R,UIDraw:()=>at});var o,n=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),r=function(t,e,o,n){var r,i=arguments.length,u=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(u=(i<3?r(u):i>3?r(e,o,u):r(e,o))||u);return i>3&&u&&Object.defineProperty(e,o,u),u},i=function(){function t(){this._cBind={}}return t.prototype.pushBind=function(t,e){this._cBind[t]||(this._cBind[t]=[]);var o=e.prototype.className;o&&(this._cBind[t].push({c:e,name:o}),window[t]&&this.doBind(t))},t.prototype.doBind=function(t){if(this._cBind[t]&&Array.isArray(this._cBind[t])&&window[t])for(var e=this._cBind[t];e.length>0;){var o=e.pop(),n=window[t][o.name];if(n){var r=Object.getOwnPropertyDescriptors(n.prototype);for(var i in r)"function"==typeof r[i].set&&Object.defineProperty(o.c.prototype,i,{set:r[i].set,enumerable:!0,configurable:!0}),"function"==typeof r[i].get&&Object.defineProperty(o.c.prototype,i,{get:r[i].get,enumerable:!0,configurable:!0}),r[i].value&&"function"==typeof r[i].value&&(o.c.prototype[i]=n.prototype[i]);for(var i in n)o.c[i]=n[i]}}},t}();function u(t,e){return function(e,o){e.prototype.className&&window.NoteBinder.pushBind(t,e)}}window.NoteBinder||(window.NoteBinder=new i);var s,c,p,a,f="nCore",l=function(){function t(){this._id=e.genId(this.classType),this._events={}}var e;return e=t,t.genId=function(t){for(var o="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=n.length,i=0;i<6;i++)o+=n.charAt(Math.floor(Math.random()*r));return e._count=e._count>=Number.MAX_VALUE?0:e._count+1,o=t+"_"+e._count+"_"+o+"_"+(new Date).getTime()},t.prototype.on=function(t,e,o){},t.prototype.removeListener=function(t,e,o){},t.prototype.emit=function(t){for(var e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o]},t.prototype.getId=function(){},Object.defineProperty(t.prototype,"className",{get:function(){return"ClassBase"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t._count=0,t=e=r([u(f)],t)}(),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.getClassName=function(){},e.getClassType=function(){},e.prototype.init=function(){},e.prototype.getData=function(){},e.prototype.setData=function(t,e){},e.prototype.export=function(){},e.prototype.setHis=function(t){},e.prototype.getHis=function(){},e.prototype.getDescriptor=function(){},e.prototype.setNote=function(t){},e.prototype.getNote=function(){},e.prototype.getConfig=function(){},e.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},e.prototype.renderName=function(){},e.prototype.renderTags=function(){},e.prototype.setTag=function(t){},e.prototype.removeTag=function(t){},e.prototype.hasTag=function(t){},Object.defineProperty(e.prototype,"name",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tags",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastHis",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"ClassNote"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"note",{get:function(){},enumerable:!1,configurable:!0}),e=r([u(f)],e)}(l),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),Object.defineProperty(e.prototype,"className",{get:function(){return"Cmd"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=r([u(f)],e)}(y);!function(t){t.UNKNOW="unknow",t.NUMBER="number",t.STRING="string",t.BOOLEAN="boolean",t.ARRAY="array",t.BIGINT="bigint",t.OBJECT="object"}(s||(s={})),function(t){t.COLOR="COLOR",t.DATETIME="DATETIME"}(c||(c={})),function(t){t.GET="GET",t.SET="SET",t.EXPO="EXPO",t.LANG="LANG"}(p||(p={})),function(t){t.UI="UI",t.HANDLER="HANDLER",t.RENDER="RENDER",t.SET="SET",t.GET="GET"}(a||(a={}));(function(){function t(){}t=r([u(f)],t)})(),function(){function t(){}t=r([u(f)],t)}(),function(){function t(){}t=r([u(f)],t)}(),function(){function t(){}t.classDes=function(){},t.removeProDes=function(t){},t.number=function(t){},t.string=function(t){},t.stringColor=function(t){},t.stringDateTime=function(t){},t.boolean=function(t){},t.object=function(t){},t.array=function(t){},t.render=function(t){},t.scrColor=function(){},t.srcDateTime=function(){},t.src=function(t){},t.notSet=function(){},t.notExpo=function(){},t.notGet=function(){},t.language=function(){},t.funchandler=function(){},t.funcrender=function(){},t.funcget=function(){},t.funcset=function(){},t=r([u(f)],t)}();var d,g,b,_,m,O,P,v,w,x,E,N,T=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.start=function(){},e.prototype.stop=function(){},e.prototype.isRunning=function(){},Object.defineProperty(e.prototype,"autoStart",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Handler"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=r([u(f)],e)}(y);!function(t){t[t.TOP=0]="TOP",t[t.MID_TOP=1]="MID_TOP",t[t.RIGHT=2]="RIGHT",t[t.MID_RIGHT=3]="MID_RIGHT",t[t.BOTTOM=4]="BOTTOM",t[t.MID_BOTTOM=5]="MID_BOTTOM",t[t.LEFT=6]="LEFT",t[t.MID_LEFT=7]="MID_LEFT",t[t.MID_CENTER=8]="MID_CENTER"}(d||(d={})),function(t){t.EXPORT="EXPORT",t.LANG="LANG"}(g||(g={})),function(t){t.LEFT="left",t.RIGHT="right",t.CENTER="center"}(b||(b={})),function(t){t.TOP="top",t.BOTTOM="bottom",t.CENTER="center"}(_||(_={})),function(t){t.EDIT="edit",t.VIEW="view",t.COMMENT="comment"}(m||(m={})),function(t){t.FIT_WIDTH="fit_width",t.FIT_HEIGHT="fit_height",t.FIT_CONTENT="fit_content",t.FIT_SIZE="fit_size",t.FIT_AUTO="fit_auto"}(O||(O={})),function(t){t.NOTLOAD="notload",t.LOADING="loading",t.LOADFAIL="loadfail",t.LOADED="loaded"}(P||(P={})),function(t){t.UNKNOW="",t.IMAGE="image",t.VIDEO="video",t.AUDIO="audio",t.PDF="pdf",t.DOCX="docx",t.PPTX="pptx",t.XLSX="xlsx",t.LOTTIEANIM="lottieAnim",t.WEBVIEW="webview"}(v||(v={})),function(t){t.TOUCH="touch",t.MOUSE="mouse"}(w||(w={})),function(t){t.READY="ready",t.LOAD_EVENT="load_event",t.MODULE_CHANGE="module_change",t.MODULE_LOADED="module_loaded",t.MODULE_LOADFAIL="module_loadfail",t.NOTE_SELECTION_START="note_selection_start",t.NOTE_SELECTION_MOVING="note_selection_moving",t.NOTE_SELECTION_END="note_selection_end",t.NOTE_NODE_SELECTED="note_node_selected",t.NOTE_PAGE_SELECTED="note_page_selected",t.NOTE_PAGE_VIEW_CHANGE="note_page_view_change",t.NOTE_PAGE_CHANGE="note_page_change",t.NOTE_PAGE_ADD="note_page_add",t.NOTE_PAGE_REMOVE="note_page_remove",t.PAGE_CHANGE="page_change",t.NOTE_HANDLER_RENDER_CHANGE="note_handler_render_change",t.NOTE_ZOOM_CHANGE="note_zoom_change",t.NOTE_KEYUP="note_keyup",t.NOTE_KEYDOWN="note_keydown",t.TEXT_INPUT_FOCUS="text_input_focus",t.TEXT_INPUT_BLUR="text_input_blur",t.NODE_CHANGE="node_change",t.NODE_SIZE_CHANGE="node_size_change",t.NODE_TRANSFORM_CHANGE="node_transform_change",t.NODE_MOUSE_OVER="node_mouse_over",t.NODE_MOUSE_OUT="node_mouse_out",t.NODE_MOUSE_MOVE="node_mouse_move",t.NODE_MOUSE_DOWN="node_mouse_down",t.NODE_MOUSE_UP="node_mouse_up",t.NODE_OVER="node_over",t.NODE_OUT="node_out",t.NODE_MOVE="node_move",t.NODE_DOWN="node_down",t.NODE_UP="node_up",t.NODE_CLICK="node_click",t.NODE_DBLCLICK="node_dblclick",t.NODE_MULTICLICK="node_multiclick",t.NODE_MOUSE_CLICK="node_mouse_click",t.NODE_MOUSE_DBLCLICK="node_mouse_dblclick",t.NOTE_CMD_CHANGE="note_cmd_change"}(x||(x={})),function(t){t.SHIFT="shift",t.META="meta",t.CONTROL="control",t.ALT="alt"}(E||(E={})),function(t){t.UIPAGE="UIPage",t.UINODE="UINode",t.NOTE="Note",t.CMD="Cmd",t.HANDLER="Handler"}(N||(N={}));var D,C,j=function(){function t(){}return Object.defineProperty(t.prototype,"className",{get:function(){return"Logger"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"getType",{get:function(){},enumerable:!1,configurable:!0}),t=r([u(f)],t)}(),S=(function(t){function e(e){var o=t.call(this)||this;return console.log("Initing Note Version "+(null==e?void 0:e.version)),(null==e?void 0:e.coreUrl)?o.loadCore((null==e?void 0:e.coreUrl)+"?ver="+(null==e?void 0:e.version),(function(){o.initNote(e)})):o.initNote(e),o}n(e,t),e.prototype.defaultCheckTouchCapable=function(t){},e.prototype.defaultCheckIsMobile=function(t){},e.prototype.defaultCheckIsWebview=function(t){},e.prototype.loadCore=function(t,e){console.log("load module note core "+t);var o=document.createElement("script");o.onload=function(){window.nCore;window.NoteBinder&&window.NoteBinder.doBind("nCore"),e()},o.onerror=function(){console.log("Load module core error !")},o.src=t,document.head.appendChild(o)},e.prototype.initNote=function(t){},e.prototype._parseModuleConfig=function(t){},e.prototype._mergeModuleData=function(t,e){},e.prototype.addModule=function(t){},e.prototype.loadModule=function(t){},e.prototype.getModuleData=function(t){},e.prototype.getStatusModule=function(t){},e.prototype.checkDependenciesModuleLoaded=function(t){},e.prototype._findAndLoadModule=function(){},e.prototype._loadJs=function(t){},e.prototype._onLoadModuleFinish=function(t,e,o){},e.prototype._doBindModule=function(t){},Object.defineProperty(e.prototype,"version",{get:function(){},enumerable:!1,configurable:!0}),e.prototype._start=function(){},e.prototype._initUI=function(){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.appendHandlerRender=function(t){},e.prototype.removeHandlerRender=function(t){},e.prototype.setTextFocus=function(t){},e.prototype.getTextFocus=function(){},e.prototype.load=function(t){},e.prototype.export=function(){},e.prototype.reset=function(){},e.prototype.setClipboardData=function(t,e){},e.prototype.getClipboardData=function(t){},e.prototype.getHis=function(){},e.prototype.setHis=function(t){},e.prototype.onPageChange=function(t){},e.prototype.saveHistory=function(t){},e.prototype.undo=function(){},e.prototype.redo=function(){},e.prototype.doSetHisData=function(t){},e.prototype.getRegisterInstance=function(){},e.prototype.setConfig=function(t){},e.prototype.getConfig=function(){},Object.defineProperty(e.prototype,"config",{get:function(){},enumerable:!1,configurable:!0}),e.prototype._applyConfig=function(){},Object.defineProperty(e.prototype,"zoom",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.isTouchCapable=function(){},e.prototype.isMobile=function(){},e.prototype.isWebview=function(){},e.prototype.enableLog=function(){},e.prototype.disableLog=function(){},e.prototype.setLogger=function(t){},e.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},e.prototype.registerCmd=function(t,e){},e.prototype.unregisterCmd=function(t){},e.prototype.registerCmds=function(t){},e.prototype.unregisterCmds=function(t){},e.prototype.getAllRegisterCmdName=function(){},e.prototype.getRegisterCmd=function(){},e.prototype.doCmd=function(t,e){},e.prototype.registerHandler=function(t,e){},e.prototype.unregisterHandler=function(t){},e.prototype.registerHandlers=function(t){},e.prototype.unregisterHandlers=function(t){},e.prototype.getHandlerByName=function(t){},e.prototype.getAllHandler=function(){},e.prototype.getAllRegisterHandlerName=function(){},e.prototype.registerNode=function(t,e){},e.prototype.unregisterNode=function(t){},e.prototype.registerNodes=function(t){},e.prototype.unregisterNodes=function(t){},e.prototype.getAllRegisterNodeName=function(){},e.prototype.addNode=function(t,e){},e.prototype.getNodeSelected=function(){},e.prototype.setNodeSelected=function(t){},e.prototype.createNode=function(t){},e.prototype.getIdsOfListNode=function(t){},e.prototype.compareListNode=function(t,e){},e.prototype.addPage=function(t,e){},e.prototype.removePage=function(t){},e.prototype.removeAllPage=function(){},e.prototype.getIndexPage=function(t){},e.prototype.swapIndexPage=function(t,e){},e.prototype.getPageSelected=function(){},e.prototype.setPageSelected=function(t){},e.prototype.getPages=function(){},e.prototype.registerClassType=function(t,e){},e.prototype.unregisterClassType=function(t,e){},e.prototype.registerClassTypes=function(t){},e.prototype.unregisterClassTypes=function(t){},e.prototype.getClassType=function(t,e){},e.prototype.getAllNameClassType=function(t){},e.prototype.loadJs=function(t,e,o){},e.prototype.loadCss=function(t){},e.prototype.loadFont=function(t,e,o){},e.prototype._initKeyboard=function(){},e.prototype._onkeypress=function(t){},e.prototype._onkeydown=function(t){},e.prototype._onkeyup=function(t){},Object.defineProperty(e.prototype,"keydowns",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_shift",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_meta",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_ctrl",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_alt",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Note"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=r([u(f)],e)}(y),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}n(e,t),e.prototype.init=function(){},e.prototype.startHandler=function(){},e.prototype.stopHandler=function(){},e.prototype.createBt=function(t,e){},e.prototype.showFrame=function(){},e.prototype.hideFrame=function(){},e.prototype.iframeMessages=function(t){},e.prototype.onBtCancel=function(){},e.prototype.onBtDone=function(){},Object.defineProperty(e.prototype,"iframePluginUrl",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"PHandler"},enumerable:!1,configurable:!0}),e=r([u(f)],e)}(T),function(){function t(){}Object.defineProperty(t.prototype,"className",{get:function(){return"Sanitizer"},enumerable:!1,configurable:!0}),t.num=function(t){},t.str=function(t){},t.str_hexColor=function(t){},t.str_style=function(t){},t.str_url=function(t,e,o){},t.sanitizeString=function(t){},t.sanitizeHtml=function(t){},t.sanitizeSvg=function(t){},t.sanitizeMathML=function(t){},t=r([u(f)],t)}(),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}n(e,t),e.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},Object.defineProperty(e.prototype,"className",{get:function(){return"TimestampLogger"},enumerable:!1,configurable:!0}),e=r([u(f)],e)}(j),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.init=function(){},e.prototype.renderAll=function(){},e.prototype.getData=function(){},e.prototype._checkNeedSaveHis=function(t){},e.prototype.setData=function(t,e){},e.prototype.export=function(){},e.prototype.getHis=function(){},e.prototype.setHis=function(t){},e.prototype.addChild=function(t){},e.prototype.addToParent=function(t){},e.prototype.addChilds=function(t){},e.prototype.getParent=function(){},e.prototype.removeFromParent=function(){},e.prototype.removeChild=function(t){},e.prototype.removeAllChild=function(){},e.prototype.getChild=function(){},e.prototype.clone=function(){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"renderContent",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.anchorable=function(){},e.prototype.getThumb=function(){},e.prototype.calSize=function(){},Object.defineProperty(e.prototype,"childData",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"childIds",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),e.prototype.css=function(t,e){},e.prototype.getCss=function(t){},e.prototype.renderStyle=function(){},e.prototype.renderCssClass=function(){},e.prototype.renderSize=function(){},e.prototype.renderTransform=function(){},e.prototype.renderTransformOrigin=function(){},e.prototype.setSize=function(t,e){},e.prototype.setTransformOriginPoint=function(t,e){},e.prototype.setTransformOrigin=function(t,e){},e.prototype.onResize=function(){},e.prototype.onTransform=function(){},e.prototype.getBorderWidth=function(){},Object.defineProperty(e.prototype,"x",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originX",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originY",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deltaPos",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deltaTime",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"resizable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"movable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rotatable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderWidth",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderRadius",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderStyle",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderColor",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"enabled",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selectable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"hisSetting",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"scale",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rotate",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"opacity",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"zIndex",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lock",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"style",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cssClass",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"centerPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"topPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rightPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"bottomPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"leftPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"boundingBox",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastMouseDown",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.initEventListener=function(){},e.prototype.addMouseEvent=function(){},e.prototype.removeMouseEvent=function(){},e.prototype.addTouchEvent=function(){},e.prototype.removeTouchEvent=function(){},e.prototype._mouseover=function(t){},e.prototype._mouseout=function(t){},e.prototype._mousemove=function(t){},e.prototype._mousedown=function(t){},e.prototype._mouseup=function(t){},e.prototype._nodeClick=function(t){},e.prototype._nodeDbClick=function(t){},e.prototype._nodeMultiClick=function(t){},e.prototype._click=function(t){},e.prototype._dblclick=function(t){},e.prototype._touchstart=function(t){},e.prototype._touchmove=function(t){},e.prototype._touchcancel=function(t){},e.prototype._touchend=function(t){},e.prototype._nodeDown=function(t){},e.prototype._nodeUp=function(t){},Object.defineProperty(e.prototype,"className",{get:function(){return"UINode"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=r([u(f)],e)}(y)),M=function(){function t(){}return Object.defineProperty(t.prototype,"className",{get:function(){return"Utils"},enumerable:!1,configurable:!0}),t.addArrayPrototype=function(){},t.removeArrayPrototype=function(){},t.notNull=function(t){},t.isNull=function(t){},t.randrom=function(t,e){},t.merge=function(t,e){},t.deepMerge=function(t,e){},t.deepClone=function(t){},t.mergeNotNull=function(t,e){},t.mergePartial=function(t,e){},t.toArr=function(t){},t.getTransformValue=function(t){},t.transformToCss=function(t){},t.inserClassCss=function(t,e){},t.removeAllChildHTMLElement=function(t,e){},t.pointToPage=function(t,e){},t.getDistance=function(t,e,o,n){},t.getBoundingBox=function(t,e){},t.getOriginBoxOfBoundingBox=function(t,e){},t.pointInRect=function(t,e,o){},t.rectInRect=function(t,e){},t.pointRighAngle=function(t,e,o,n,r,i){},t.pointRighAngleRotate=function(t,e,o,n,r){},t.angleTo180=function(t){},t.pointLineInOrder=function(t,e,o,n,r,i){},t.angleOf=function(t,e,o,n){},t.getPointRotate=function(t,e,o,n,r){},t.getRectRotate=function(t,e,o,n){},t.getNodeConner=function(t){},t.createPointTest=function(t,e,o,n,r){},t.makeDragable=function(t){},t.clearDragable=function(t){},t.makeIconButtom=function(t,e,o,n){},t.cropCanvasTransparent=function(t,e){},t=r([u(f)],t)}(),B=function(){function t(){}return t.prototype.getSqDist=function(t,e){},t.prototype.getSqSegDist=function(t,e,o){},t.prototype.simplifyRadialDist=function(t,e){},t.prototype.simplifyDPStep=function(t,e,o,n,r){},t.prototype.simplifyDouglasPeucker=function(t,e){},t.prototype.simplify=function(t,e,o){},Object.defineProperty(t.prototype,"className",{get:function(){return"Simplify"},enumerable:!1,configurable:!0}),t=r([u(f)],t)}(),I=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),A=function(t,e,o,n){var r,i=arguments.length,u=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(u=(i<3?r(u):i>3?r(e,o,u):r(e,o))||u);return i>3&&u&&Object.defineProperty(e,o,u),u},L="nNode";(function(t){function e(e){return t.call(this)||this}I(e,t),e.prototype.loadAudio=function(t){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),e=A([u(L)],e)})(l),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.calSize=function(){},e.prototype.setSize=function(t,e){},e.prototype.getData=function(){},e.prototype.renderAll=function(){},e.prototype.anchorable=function(){},e.prototype._dblclick=function(t){},e.prototype.onNodeSelected=function(){},Object.defineProperty(e.prototype,"audioOptions",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"src",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selectable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIAudio"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.initRender=function(){},e.prototype.anchorable=function(){},e.prototype.calSize=function(){},e.prototype.setData=function(t,e){},Object.defineProperty(e.prototype,"className",{get:function(){return"UIGroup"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S),function(t){function e(e){return t.call(this)||this}I(e,t),e.prototype.load=function(t){},e.prototype.onImageLoaded=function(){},e.prototype.onImageError=function(){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(l),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.onImageLoaded=function(t,e){},e.prototype.onImageError=function(){},e.prototype.getData=function(){},e.prototype.setData=function(t,e){},e.prototype.calSize=function(){},e.prototype.renderAll=function(){},e.prototype.setSize=function(t,e){},e.prototype.anchorable=function(){},Object.defineProperty(e.prototype,"src",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxWidth",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIImage"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.calSize=function(){},e.prototype.setSize=function(t,e){},e.prototype.getData=function(){},e.prototype.renderAll=function(){},e.prototype.anchorable=function(){},Object.defineProperty(e.prototype,"className",{get:function(){return"UILayer"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.initRender=function(){},e.prototype.calSize=function(){},e.prototype.renderAll=function(){},e.prototype.getData=function(){},Object.defineProperty(e.prototype,"jsonUrl",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lottiePlayerLink",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UILottieAnimation"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S),function(t){function e(e){return t.call(this)||this}I(e,t),e.prototype.loadOffice=function(t){},e.prototype.getPageCount=function(){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"officeLinkDocx",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"officeLinkPptx",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"officePluginUrl",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"OfficeLoader"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(y),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.calSize=function(){},e.prototype.setSize=function(t,e){},e.prototype.getData=function(){},e.prototype.renderAll=function(){},e.prototype.anchorable=function(){},e.prototype._dblclick=function(t){},e.prototype.onNodeSelected=function(){},Object.defineProperty(e.prototype,"officeLoaderOptions",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"src",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIOfficeLoader"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S);!function(t){t.BACKGROUND_LOADED="BACKGROUND_LOADED",t.BACKGROUND_ERROR="BACKGROUND_ERROR"}(D||(D={})),function(t){t.FIT_BACKGROUND="FIT_BACKGROUND",t.FIT_WIDTH="FIT_WIDTH",t.FIT_HEIGHT="FIT_HEIGHT",t.FIT_PAGE="FIT_PAGE",t.FIT_ALL="FIT_ALL"}(C||(C={}));var k,R,z=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.setData=function(t,e){},e.prototype.getData=function(){},e.prototype.export=function(){},e.prototype.renderBackground=function(){},e.prototype.onImageBgLoaded=function(t){},e.prototype.onImageBgError=function(t){},e.prototype.onVideoBgMetadataLoaded=function(t){},e.prototype.onOfficeLoaderPageCount=function(t,e){},e.prototype.onBgLoaded=function(){},e.prototype.renderDrawLayer=function(){},e.prototype.drawInitImage=function(t){},e.prototype.disableInteractiveAllChild=function(){},e.prototype.enableInteractiveAllChild=function(){},Object.defineProperty(e.prototype,"drawLayer",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"officePageHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"backgroundType",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"backgroundSrc",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"backgroundOption",{set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"draws",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIPage"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S),H=(function(t){function e(e){return t.call(this)||this}I(e,t),e.prototype.loadPdf=function(t){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(l),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.calSize=function(){},e.prototype.setSize=function(t,e){},e.prototype.getData=function(){},e.prototype.renderAll=function(){},e.prototype.anchorable=function(){},e.prototype._dblclick=function(t){},e.prototype.onNodeSelected=function(){},Object.defineProperty(e.prototype,"pdfLoaderOptions",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"src",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIPdfLoader"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.calSize=function(){},e.prototype.setSize=function(t,e){},e.prototype.getData=function(){},e.prototype.renderAll=function(){},e.prototype.anchorable=function(){},Object.defineProperty(e.prototype,"className",{get:function(){return"UIShape"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.calSize=function(){},e.prototype.renderSize=function(){},e.prototype.anchorable=function(){},e.prototype.getData=function(){},e.prototype.checkMinWidthText=function(){},Object.defineProperty(e.prototype,"imageSrc",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"svgSrc",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UITextImage"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.calSize=function(){},e.prototype.setSize=function(t,e){},e.prototype.getData=function(){},e.prototype.setData=function(t,e){},e.prototype.anchorable=function(){},e.prototype._textFocus=function(){},e.prototype._textBlur=function(){},e.prototype._textChange=function(){},e.prototype._textMouseDown=function(t){},e.prototype._textMouseUp=function(t){},e.prototype.renderAll=function(){},e.prototype._nodeClick=function(t){},e.prototype._nodeDbClick=function(t){},e.prototype._nodeMultiClick=function(t){},e.prototype._checkSelection=function(){},e.prototype.setSelection=function(t){},e.prototype._textSelect=function(t){},e.prototype._textPaste=function(t){},e.prototype.findRangeNodeClick=function(){},e.prototype.breakLetters=function(){},e.prototype.setTextContent=function(t){},e.prototype.parseTextContent=function(t){},e.prototype.setTextStyle=function(t,e){},e.prototype.setTextStyleRecursive=function(t,e,o){},e.prototype.forceSetTextStyleChild=function(t){},e.prototype.setTextStyleDom=function(t,e,o){},e.prototype.getTextStyle=function(t){},e.prototype.getTextStyleComputed=function(t){},e.prototype.setTextListStyleType=function(t){},e.prototype.updateListTypeColor=function(){},e.prototype.replaceDivWidthP=function(){},e.prototype.isTextPlaceHolder=function(){},e.prototype.isTextEmpty=function(){},e.prototype.checkMinWidthText=function(){},Object.defineProperty(e.prototype,"fontFace",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"textContent",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"fontSize",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"placeHolder",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"fontColor",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isBold",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isItalic",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isUnderline",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"letterSpacing",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lineHeight",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"align",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"paddingLeft",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"paddingTop",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"editable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selectable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIText"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S)),function(t){function e(e){return t.call(this)||this}I(e,t),e.prototype.loadVideo=function(t){},e.prototype.onMetadataLoaded=function(t){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(l),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.calSize=function(){},e.prototype.setSize=function(t,e){},e.prototype.getData=function(){},e.prototype.setData=function(t,e){},e.prototype.renderAll=function(){},e.prototype.anchorable=function(){},e.prototype.onMetadataLoaded=function(t){},e.prototype._dblclick=function(t){},e.prototype.onNodeSelected=function(){},Object.defineProperty(e.prototype,"videoOptions",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"src",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selectable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxWidth",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIVideo"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S),function(t){function e(e){return t.call(this)||this}I(e,t),e.prototype.loadWebview=function(t){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(l),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return I(e,t),e.prototype.init=function(){},e.prototype.initRender=function(){},e.prototype.calSize=function(){},e.prototype.setSize=function(t,e){},e.prototype.getData=function(){},e.prototype.renderAll=function(){},e.prototype.anchorable=function(){},e.prototype._dblclick=function(t){},e.prototype.onNodeSelected=function(){},Object.defineProperty(e.prototype,"webviewOptions",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"src",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selectable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIWebview"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(S)),U=(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.init=function(){},e.prototype.getVideoId=function(t){},Object.defineProperty(e.prototype,"src",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"youtubeLink",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIYoutube"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(H),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}I(e,t),e.prototype.init=function(){},e.prototype.getLottieId=function(t){},Object.defineProperty(e.prototype,"src",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"LottieLink",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UILottieAnimationWebview"},enumerable:!1,configurable:!0}),e=A([u(L)],e)}(H),function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}()),W=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._points=[],e}return U(e,t),e.prototype.reset=function(){this._points=[],this._startPoint=null,this._endPoint=null,this._minx=-1,this._maxx=-1,this._miny=-1,this._maxy=-1},e.prototype.strokeSize_x=function(t){return t.shadowBlur+t.shadowOffsetX+t.lineWidth/2},e.prototype.strokeSize_y=function(t){return t.shadowBlur+t.shadowOffsetY+t.lineWidth/2},e.prototype.endDraw=function(t){},Object.defineProperty(e.prototype,"points",{get:function(){return this._points},set:function(t){this._points=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"startPoint",{get:function(){return this._startPoint},set:function(t){this._startPoint=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"miny",{get:function(){return this._miny},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxy",{get:function(){return this._maxy},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"minx",{get:function(){return this._minx},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxx",{get:function(){return this._maxx},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){return"DrawBrush"},enumerable:!1,configurable:!0}),e}(y),G=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpli=new B,e}return U(e,t),e.prototype.draw=function(t,e,o,n){0==this._points.length&&(this._startPoint=e,this._minx=e.x-this.strokeSize_x(n),this._maxx=e.x+this.strokeSize_x(n),this._miny=e.y-this.strokeSize_y(n),this._maxy=e.y+this.strokeSize_y(n),this._points.push(e)),this._minx=this._minx>o.x-this.strokeSize_x(n)?o.x:this._minx-this.strokeSize_x(n),this._maxx=this._maxx<o.x+this.strokeSize_x(n)?o.x:this._maxx+this.strokeSize_x(n),this._miny=this._miny>o.y-this.strokeSize_y(n)?o.y:this._miny-this.strokeSize_y(n),this._maxy=this._maxy<o.y+this.strokeSize_y(n)?o.y:this._maxy+this.strokeSize_y(n),this._points.push(o),t.save(),M.merge(t,n);var r=parseInt(t.canvas.style.top);if(isNaN(r)&&(r=0),!(this._points.length<2)){if(2==this._points.length)t.beginPath(),t.moveTo(this._points[0].x,this._points[0].y-r),t.lineTo(this._points[1].x,this._points[1].y-r),t.closePath();else{this._points=this.simpli.simplify(this._points,.4);var i=this._points[0],u=this._points[1];t.beginPath(),t.moveTo(i.x,i.y-r),t.lineTo(u.x,u.y-r);for(var s=2;s<this._points.length;s++){var c=this._points[s],p=(i.x+u.x)/2,a=(i.y-r+u.y-r)/2,f=(u.x+c.x)/2,l=(u.y-r+c.y-r)/2;t.moveTo(p,a),t.quadraticCurveTo(u.x,u.y-r,f,l),i=u,u=c}t.lineTo(u.x,u.y-r)}t.stroke(),t.closePath(),t.restore()}},e.prototype.endDraw=function(t){1==t.smartDraw&&(this._points=this.simpli.simplify(this._points,5),this._points.length)},Object.defineProperty(e.prototype,"className",{get:function(){return"DrawBrushFree"},enumerable:!1,configurable:!0}),e}(W),F=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return U(e,t),e.prototype.draw=function(t,e,o,n){0==this._points.length&&(this._startPoint=e),this._points=[e,o],this._minx=Math.min(e.x,o.x)-this.strokeSize_x(n),this._maxx=Math.max(e.x,o.x)+this.strokeSize_x(n),this._miny=Math.min(e.y,o.y)-this.strokeSize_y(n),this._maxy=Math.max(e.y,o.y)+this.strokeSize_y(n);var r=parseInt(t.canvas.style.top);isNaN(r)&&(r=0),t.save(),M.merge(t,n),t.beginPath(),t.moveTo(e.x,e.y-r),t.lineTo(o.x,o.y-r),t.stroke(),t.closePath(),t.restore()},Object.defineProperty(e.prototype,"className",{get:function(){return"DrawBrushLine"},enumerable:!1,configurable:!0}),e}(W),V=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return U(e,t),e.prototype.draw=function(t,e,o,n){0==this._points.length&&(this._startPoint=e),this._points=[e,o],this._minx=Math.min(e.x,o.x)-this.strokeSize_x(n),this._maxx=Math.max(e.x,o.x)+this.strokeSize_x(n),this._miny=Math.min(e.y,o.y)-this.strokeSize_y(n),this._maxy=Math.max(e.y,o.y)+this.strokeSize_y(n);var r=parseInt(t.canvas.style.top);isNaN(r)&&(r=0),t.save(),M.merge(t,n);var i=Math.min(e.x,o.x),u=Math.min(e.y,o.y),s=Math.max(e.x,o.x),c=Math.max(e.y,o.y);t.beginPath(),t.rect(i,u-r,s-i,c-u),"none"!=n.fillStyle&&t.fill(),t.stroke(),t.closePath(),t.restore()},Object.defineProperty(e.prototype,"className",{get:function(){return"DrawBrushRect"},enumerable:!1,configurable:!0}),e}(W),X=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return U(e,t),e.prototype.draw=function(t,e,o,n){0==this._points.length&&(this._startPoint=e),this._points=[e,o],this._minx=Math.min(e.x,o.x)-this.strokeSize_x(n),this._maxx=Math.max(e.x,o.x)+this.strokeSize_x(n),this._miny=Math.min(e.y,o.y)-this.strokeSize_y(n),this._maxy=Math.max(e.y,o.y)+this.strokeSize_y(n);var r=parseInt(t.canvas.style.top);isNaN(r)&&(r=0),t.save(),M.merge(t,n);var i=Math.min(e.x,o.x),u=Math.min(e.y,o.y),s=Math.max(e.x,o.x),c=Math.max(e.y,o.y),p=Math.max(s-i,c-u);t.beginPath(),t.rect(i,u-r,p,p),"none"!=n.fillStyle&&t.fill(),t.closePath(),t.stroke(),t.restore()},Object.defineProperty(e.prototype,"className",{get:function(){return"DrawBrushSquare"},enumerable:!1,configurable:!0}),e}(W),K=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return U(e,t),e.prototype.draw=function(t,e,o,n){0==this._points.length&&(this._startPoint=e),this._points=[e,o],this._minx=Math.min(e.x,o.x)-this.strokeSize_x(n),this._maxx=Math.max(e.x,o.x)+this.strokeSize_x(n),this._miny=Math.min(e.y,o.y)-this.strokeSize_y(n),this._maxy=Math.max(e.y,o.y)+this.strokeSize_y(n);var r=parseInt(t.canvas.style.top);isNaN(r)&&(r=0),t.save(),M.merge(t,n);var i=Math.min(e.x,o.x),u=Math.min(e.y,o.y),s=Math.max(e.x,o.x),c=Math.max(e.y,o.y)-u,p=s-i;t.beginPath(),t.moveTo(i,u+c-r),t.lineTo(i+p/2,u-r),t.lineTo(i+p,u+c-r),t.lineTo(i,u+c-r),"none"!=n.fillStyle&&t.fill(),t.closePath(),t.stroke(),t.restore()},Object.defineProperty(e.prototype,"className",{get:function(){return"DrawBrushTriangle"},enumerable:!1,configurable:!0}),e}(W),Y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return U(e,t),e.prototype.draw=function(t,e,o,n){0==this._points.length&&(this._startPoint=e),this._points=[e,o];var r=parseInt(t.canvas.style.top);isNaN(r)&&(r=0),t.save(),M.merge(t,n),t.beginPath();var i=M.getDistance(e.x,e.y,o.x,o.y);this._minx=e.x-i-this.strokeSize_x(n),this._maxx=e.x+i+this.strokeSize_x(n),this._miny=e.y-i-this.strokeSize_y(n),this._maxy=e.y+i+this.strokeSize_y(n),t.arc(e.x,e.y-r,i,0,2*Math.PI),"none"!=n.fillStyle&&t.fill(),t.closePath(),t.stroke(),t.restore()},Object.defineProperty(e.prototype,"className",{get:function(){return"DrawBrushCircle"},enumerable:!1,configurable:!0}),e}(W),q=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return U(e,t),e.prototype.draw=function(t,e,o,n){0==this._points.length&&(this._startPoint=e),this._points=[e,o],this._minx=Math.min(e.x,o.x)-this.strokeSize_x(n),this._maxx=Math.max(e.x,o.x)+this.strokeSize_x(n),this._miny=Math.min(e.y,o.y)-this.strokeSize_y(n),this._maxy=Math.max(e.y,o.y)+this.strokeSize_y(n);var r=parseInt(t.canvas.style.top);isNaN(r)&&(r=0),t.save(),M.merge(t,n);var i=e.x,u=e.y-r,s=o.x,c=o.y-r,p=10+n.lineWidth,a=s-i,f=c-u,l=Math.atan2(f,a);t.beginPath(),t.moveTo(i,u),t.lineTo(s,c),t.lineTo(s-p*Math.cos(l-Math.PI/6),c-p*Math.sin(l-Math.PI/6)),t.moveTo(s,c),t.lineTo(s-p*Math.cos(l+Math.PI/6),c-p*Math.sin(l+Math.PI/6)),t.closePath(),t.stroke(),t.restore()},Object.defineProperty(e.prototype,"className",{get:function(){return"DrawBrushArrow"},enumerable:!1,configurable:!0}),e}(W),J=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpli=new B,e}return U(e,t),e.prototype.draw=function(t,e,o,n){0==this._points.length&&(this._startPoint=e,this._minx=e.x-this.strokeSize_x(n),this._maxx=e.x+this.strokeSize_x(n),this._miny=e.y-this.strokeSize_y(n),this._maxy=e.y+this.strokeSize_y(n),this._points.push(e)),this._minx=this._minx>o.x-this.strokeSize_x(n)?o.x:this._minx-this.strokeSize_x(n),this._maxx=this._maxx<o.x+this.strokeSize_x(n)?o.x:this._maxx+this.strokeSize_x(n),this._miny=this._miny>o.y-this.strokeSize_y(n)?o.y:this._miny-this.strokeSize_y(n),this._maxy=this._maxy<o.y+this.strokeSize_y(n)?o.y:this._maxy+this.strokeSize_y(n),this._points.push(o),t.save(),M.merge(t,n),t.globalCompositeOperation="destination-out";var r=parseInt(t.canvas.style.top);if(isNaN(r)&&(r=0),!(this._points.length<2)){if(2==this._points.length)t.beginPath(),t.moveTo(this._points[0].x,this._points[0].y-r),t.lineTo(this._points[1].x,this._points[1].y-r),t.closePath();else{this._points=this.simpli.simplify(this._points,.4);var i=this._points[0],u=this._points[1];t.beginPath(),t.moveTo(i.x,i.y-r),t.lineTo(u.x,u.y-r);for(var s=2;s<this._points.length;s++){var c=this._points[s],p=(i.x+u.x)/2,a=(i.y-r+u.y-r)/2,f=(u.x+c.x)/2,l=(u.y-r+c.y-r)/2;t.moveTo(p,a),t.quadraticCurveTo(u.x,u.y-r,f,l),i=u,u=c}t.lineTo(u.x,u.y-r)}t.stroke(),t.closePath(),t.restore()}},Object.defineProperty(e.prototype,"className",{get:function(){return"DrawBrushErase"},enumerable:!1,configurable:!0}),e}(W),Z=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return U(e,t),e.prototype.reset=function(){t.prototype.reset.call(this)},Object.defineProperty(e.prototype,"src",{get:function(){return this._src},set:function(t){this._img||(this._img=new Image),this._src=t,this._img.src=this._src},enumerable:!1,configurable:!0}),e.prototype.draw=function(t,e,o,n){0==this._points.length&&(this._startPoint=e),this._points=[e,o],this._minx=Math.min(e.x,o.x)-this.strokeSize_x(n),this._maxx=Math.max(e.x,o.x)+this.strokeSize_x(n),this._miny=Math.min(e.y,o.y)-this.strokeSize_y(n),this._maxy=Math.max(e.y,o.y)+this.strokeSize_y(n);var r=parseInt(t.canvas.style.top);isNaN(r)&&(r=0),t.save(),M.merge(t,n);var i=Math.min(e.x,o.x),u=Math.min(e.y,o.y),s=Math.max(e.x,o.x),c=Math.max(e.y,o.y);this._img&&(this.log("draw image : "+this._img.width),t.drawImage(this._img,0,0,this._img.width,this._img.height,i,u-r,s-i,c-u)),t.restore()},Object.defineProperty(e.prototype,"className",{get:function(){return"DrawBrushImage"},enumerable:!1,configurable:!0}),e}(W),Q=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();!function(t){t.COLOR="color",t.CANVASGRADIENT="canvasgradient",t.CANVASPATTERN="canvaspattern"}(k||(k={})),function(t){t.COLOR="color",t.CANVASGRADIENT="canvasgradient",t.CANVASPATTERN="canvaspattern"}(R||(R={}));var $=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Q(e,t),e.prototype.do=function(t){this.note.getHandlerByName(et.prototype.className).setBrushStyle(t)},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[E.META,"d","s","u"],[E.SHIFT,"d","s","u"],[E.CONTROL,"d","s","u"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"SetStyleBrush"},enumerable:!1,configurable:!0}),e}(h),tt=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),et=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._posxDown=-1,e._posyDown=-1,e._posx=-1,e._posy=-1,e._mousePressing=!1,e._minSizeDraw=4,e}return tt(e,t),e.prototype.init=function(){this.onPageChange=this.onPageChange.bind(this),this.onCanvasMouseDown=this.onCanvasMouseDown.bind(this),this.onWindowMouseMove=this.onWindowMouseMove.bind(this),this.onWindowMouseUp=this.onWindowMouseUp.bind(this),this.onCanvasMouseUp=this.onCanvasMouseUp.bind(this),this.addPageDrawEvent=this.addPageDrawEvent.bind(this),this.render=document.createElement("div"),this.render.style.position="absolute",this.render.classList.add(this.className),this.note.appendHandlerRender(this.render),this._cvDrawCache=document.createElement("canvas"),this._ctxCvDrawCache=this._cvDrawCache.getContext("2d"),this._styleBrush={fillType:k.COLOR,fillStyle:"none",strokeType:R.COLOR,strokeStyle:"red",shadowColor:"red",shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,lineCap:"round",lineJoin:"round",lineWidth:10,miterLimit:5,globalAlpha:.5,src:"http://localhost:8000/images/svg_1/009.svg",erase:!1,dashLine:null,smartDraw:!0},this._drawBrush=this.note.getClassType(W.getClassType(),"DrawBrushFree")},e.prototype.startHandler=function(){var t=this;this.log("startHandler "+this.className),this.note.setNodeSelected(null),this.note.on(z.EVENT_RENDER_DRAW,this.addPageDrawEvent),this.note.getPages().forEach((function(e){t.addPageDrawEvent(e)})),this.setDrawCursor()},e.prototype.stopHandler=function(){this.log("stopHandler "+this.className),this.onEndDrawSession(),this.removePageDrawEvent(),this.note.removeListener(z.EVENT_RENDER_DRAW,this.addPageDrawEvent)},e.prototype.addPageDrawEvent=function(t){var e=this;t&&t.drawLayer&&(t.drawLayer.style.pointerEvents="all",t.render.style.pointerEvents="none",Array.from(t.drawLayer.getElementsByClassName("cvDrawTop")).forEach((function(t){e.addEventListenerCvDraw(t)})))},e.prototype.removePageDrawEvent=function(){var t=this;this.note.render.style.cursor="default",this.note.getPages().forEach((function(e){e.render.style.pointerEvents="all",e.drawLayer.style.pointerEvents="none",Array.from(e.drawLayer.getElementsByClassName("cvDrawTop")).forEach((function(e){t.removeEventListenerCvDraw(e)}))}))},e.prototype.setBrushStyle=function(t){this._styleBrush=M.merge(this._styleBrush,t),this.setDrawCursor()},e.prototype.setBrushDraw=function(t){if(!this._drawBrush||this._drawBrush.className!=t){var e=this.note.getClassType(W.getClassType(),t);e&&(this._drawBrush=e,this._drawBrush.className==Z.getClassName()&&(this._drawBrush.src=this._styleBrush.src)),this.setDrawCursor()}},e.prototype.onPageChange=function(){this.setCanvasDraw()},e.prototype.setCanvasDraw=function(){var t=this;this.note.getPages().forEach((function(e){var o=e.render.getElementsByClassName("cvDraw");Array.from(o).forEach((function(t){t.parentNode.removeChild(t)}));var n=e.officePageHeight>0?Math.round(e.height/e.officePageHeight):1,r=e.officePageHeight>0?e.officePageHeight:e.height,i=document.createElement("div");i.style.position="absolute",i.style.top="0px",i.style.left="0px",e.render.appendChild(i),e.drawLayer=i;for(var u=0;u<n;u++){var s=document.createElement("canvas");s.width=e.width,s.height=r,s.style.position="absolute",s.style.pointerEvents="all",s.style.top=u*r+"px",s.style.zIndex="99999999",s.classList.add("cvDraw");var c=s.cloneNode(!0);c.cvIndex=u,c.pageHeight=r,c.page=e,i.appendChild(s),i.appendChild(c),t.addEventListenerCvDraw(c)}})),this.note.setNodeSelected(null)},e.prototype.removeCanvasDraw=function(){var t=this;this.note.getPages().forEach((function(e){e.render.style.pointerEvents="all";var o=e.render.getElementsByClassName("cvDraw");o&&Array.from(o).forEach((function(o){t.removeEventListenerCvDraw(o),o.page=null,e.render.removeChild(o)}))}))},e.prototype.addEventListenerCvDraw=function(t){t.hasDraw=!1,this.note.config.actionMode==w.MOUSE?(t.addEventListener("mousedown",this.onCanvasMouseDown),t.addEventListener("mouseup",this.onCanvasMouseUp)):this.note.config.actionMode==w.TOUCH&&(t.addEventListener("touchstart",this.onCanvasMouseDown),t.addEventListener("touchend",this.onCanvasMouseUp),t.addEventListener("touchcancel",this.onCanvasMouseUp))},e.prototype.removeEventListenerCvDraw=function(t){t.removeEventListener("mousedown",this.onCanvasMouseDown),t.removeEventListener("mouseup",this.onCanvasMouseUp),t.removeEventListener("touchstart",this.onCanvasMouseDown),t.removeEventListener("touchend",this.onCanvasMouseUp),t.removeEventListener("touchcancel",this.onCanvasMouseUp)},e.prototype.onCanvasMouseDown=function(t){if(!this._mousePressing){var e=t.currentTarget,o=e.page,n={x:t instanceof MouseEvent?t.clientX:t.touches[0].clientX,y:t instanceof MouseEvent?t.clientY:t.touches[0].clientY},r=this.pointToPage(n,o);this._posxDown=r.x,this._posyDown=r.y,this._posx=r.x,this._posy=r.y,this._mousePressing=!0,this._cvDrawPressing=e,this._drawBrush.reset(),t instanceof MouseEvent?(window.addEventListener("mousemove",this.onWindowMouseMove),window.addEventListener("mouseup",this.onWindowMouseUp)):(window.addEventListener("touchmove",this.onWindowMouseMove),window.addEventListener("touchcancel",this.onWindowMouseUp),window.addEventListener("touchend",this.onWindowMouseUp)),t.preventDefault(),t.stopImmediatePropagation()}},e.prototype.onWindowMouseMove=function(t){if(0!=this._mousePressing){var e=this._cvDrawPressing,o=e.page,n={x:t instanceof MouseEvent?t.clientX:t.touches[0].clientX,y:t instanceof MouseEvent?t.clientY:t.touches[0].clientY},r=this.pointToPage(n,o);if(!(Math.abs(r.x-this._posxDown)<=1&&Math.abs(r.y-this._posyDown)<=1)){this._posx=r.x,this._posy=r.y;var i=this._drawBrush.miny>=0&&this._drawBrush.miny<this._posy?this._drawBrush.miny:this._posy,u=this._drawBrush.maxy>=0&&this._drawBrush.maxy>this._posy?this._drawBrush.maxy:this._posy;if(this._drawBrush.className!=J.getClassName())for(var s=Math.floor(i/e.pageHeight),c=Math.floor(u/e.pageHeight),p=s;p<c+1;p++){var a=o.drawLayer.getElementsByClassName("cvTopIndex"+p);if(a=a.length>0?a[0]:null)(y=a.getContext("2d")).clearRect(0,0,y.canvas.width,y.canvas.height),this._drawBrush.draw(y,{x:this._posxDown,y:this._posyDown},{x:this._posx,y:this._posy},this._styleBrush),a.hasDraw=!0}else{var f=Math.floor(this._posy/e.pageHeight),l=o.drawLayer.getElementsByClassName("cvBottomIndex"+f);if(l=l.length>0?l[0]:null){l.hasModified=!0;var y=l.getContext("2d");this._drawBrush.draw(y,{x:this._posxDown,y:this._posyDown},{x:this._posx,y:this._posy},this._styleBrush)}}}}},e.prototype.onWindowMouseUp=function(t){this.onCanvasMouseUp(t)},e.prototype.onCanvasMouseUp=function(t){this.onEndDrawSession()},e.prototype.onEndDrawSession=function(){if(window.removeEventListener("mousemove",this.onWindowMouseMove),window.removeEventListener("mouseup",this.onWindowMouseUp),window.removeEventListener("touchmove",this.onWindowMouseMove),window.removeEventListener("touchcancel",this.onWindowMouseUp),window.removeEventListener("touchend",this.onWindowMouseUp),this._cvDrawPressing){this._drawBrush.endDraw(this._styleBrush);var t=this._cvDrawPressing.page;if(this._drawBrush.className!=J.getClassName())Array.from(t.drawLayer.getElementsByClassName("cvDrawTop")).forEach((function(t){if(1==t.hasDraw){var e=t.cvDrawBottom;e.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,t.width,t.height),t.getContext("2d").clearRect(0,0,t.width,t.height),e.hasModified=!0,t.hasDraw=!1}}));this._drawBrush.points.length>1&&this.note.saveHistory(t),this._posx=-1,this._posy=-1,this._posxDown=-1,this._posyDown=-1,this._mousePressing=!1,this._cvDrawPressing=null,this._drawBrush.reset()}},e.prototype.calculateDrawBrushEnd=function(){var t=this._drawBrush.startPoint,e=Number.MAX_SAFE_INTEGER,o=Number.MAX_SAFE_INTEGER,n=-1,r=-1,i=this._drawBrush.points,u=(new B).simplify(i,15);u.length<4&&(i=u),i.forEach((function(t){e=t.x<e?t.x:e,o=t.y<o?t.y:o,n=t.x>n?t.x:n,r=t.y>r?t.y:r})),e-=this._styleBrush.lineWidth+this._styleBrush.shadowBlur+this._styleBrush.shadowOffsetX,o-=this._styleBrush.lineWidth+this._styleBrush.shadowBlur+this._styleBrush.shadowOffsetY,n+=this._styleBrush.lineWidth+this._styleBrush.shadowBlur+this._styleBrush.shadowOffsetX,r+=this._styleBrush.lineWidth+this._styleBrush.shadowBlur+this._styleBrush.shadowOffsetY;var s=n-e,c=r-o;if(!(s<this._minSizeDraw&&c<this._minSizeDraw)){var p={x:t.x-e,y:t.y-o},a=[];if(i.forEach((function(t){a.push({x:t.x-e,y:t.y-o})})),this._drawBrush.className==Y.getClassName()){p.x=this._drawBrush.startPoint.x,p.y=this._drawBrush.startPoint.y;var f=this._drawBrush.points[this._drawBrush.points.length-1],l=Math.round(M.getDistance(f.x,f.y,p.x,p.y));l+=this._styleBrush.lineWidth+this._styleBrush.shadowBlur+this._styleBrush.shadowOffsetX,e=p.x-l,o=p.y-l,p.x-=e,p.y-=o,f.x-=e,f.y-=o,s=2*l,c=2*l,a=[p,f]}var y=this.note.createNode({className:"UIDraw",x:e,y:o,width:s,height:c,startPoint:p,points:a,brushName:this._drawBrush.className,styleBrush:M.deepClone(this._styleBrush)});if(y){var h=this._cvDrawPressing.page;h.addChild(y),this.note.emit(x.PAGE_CHANGE,h)}}},e.prototype.setDrawCursor=function(){if(this._drawBrush.className!=G.getClassName()&&this._drawBrush.className!=J.getClassName())this.note.render.style.cursor="crosshair";else{this._drawBrush.className==J.getClassName()&&(this._styleBrush.lineWidth=this._styleBrush.lineWidth<10?10:this._styleBrush.lineWidth);var t=(this._styleBrush.lineWidth+20)/2,e="url("+this.createImageCursor()+") "+t+" "+t+", auto";this.note.render.style.cursor=e}},e.prototype.createImageCursor=function(){var t=document.createElement("canvas");t.width=this._styleBrush.lineWidth+20,t.height=this._styleBrush.lineWidth+20;var e=t.getContext("2d");e.lineWidth=1,e.shadowColor="gray",e.shadowBlur=3,e.strokeStyle=this._styleBrush.strokeStyle,e.globalAlpha=this._styleBrush.globalAlpha,e.fillStyle=e.strokeStyle,e.beginPath();var o=this._styleBrush.lineWidth/2;return e.arc(t.width/2,t.height/2,o,0,2*Math.PI,!1),this._drawBrush.className!=J.getClassName()&&e.fill(),e.stroke(),t.toDataURL("image/png")},e.prototype.pointToPage=function(t,e){var o=Array.isArray(t)?[]:{x:0,y:0},n=e.render.getBoundingClientRect(),r=0==n.width?1:e.width/n.width,i=0==n.height?1:e.height/n.height;if(Array.isArray(t))for(var u=0;u<t.length;u++)o.push({x:Math.floor((t[u].x-n.x)*r),y:Math.floor((t[u].y-n.y)*i)});else o.x=Math.floor((t.x-n.x)*r),o.y=Math.floor((t.y-n.y)*i);return o},Object.defineProperty(e.prototype,"className",{get:function(){return"DrawHandler"},enumerable:!1,configurable:!0}),e}(T),ot=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),nt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ot(e,t),e.prototype.do=function(t){this.note.getHandlerByName(et.prototype.className).setBrushDraw(t)},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[E.META,"d","b","u"],[E.SHIFT,"d","b","u"],[E.CONTROL,"d","b","u"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"SetDrawBrush"},enumerable:!1,configurable:!0}),e}(h),rt=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),it=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return rt(e,t),e.prototype.do=function(){var t=this.note.getHandlerByName("DrawHandler");t&&t.start()},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[E.META,"d","a"],[E.SHIFT,"d","a"],[E.CONTROL,"d","a"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"StartDrawCmd"},enumerable:!1,configurable:!0}),e}(h),ut=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),st=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ut(e,t),e.prototype.do=function(){var t=this.note.getHandlerByName("DrawHandler");t&&t.stop()},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[E.META,"d","o"],[E.SHIFT,"d","o"],[E.CONTROL,"d","o"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"StopDrawCmd"},enumerable:!1,configurable:!0}),e}(h),ct=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),pt=function(){return pt=Object.assign||function(t){for(var e,o=1,n=arguments.length;o<n;o++)for(var r in e=arguments[o])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},pt.apply(this,arguments)},at=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ct(e,t),e.prototype.init=function(){this._styleBrush={},t.prototype.init.call(this)},e.prototype.initRender=function(){this._cv=document.createElement("canvas"),this._cv.style.position="absolute",this._cv.style.pointerEvents="none",this._ctx=this._cv.getContext("2d"),this.render.appendChild(this._cv)},e.prototype.calSize=function(){t.prototype.calSize.call(this)},e.prototype.setSize=function(e,o){if(t.prototype.setSize.call(this,e,o),this._width>0&&this._height>0){var n=document.createElement("canvas");n.width=this._cv.width,n.height=this._cv.height,n.getContext("2d").drawImage(this._cv,0,0,n.width,n.height,0,0,n.width,n.height),this._cv.width=this._width,this._cv.height=this._height,this._ctx.drawImage(n,0,0,n.width,n.height,0,0,this._cv.width,this._cv.height)}},e.prototype.getData=function(){return pt(pt({},t.prototype.getData.call(this)),{startPoint:this._startPoint,points:this._points,brushName:this.brushName,styleBrush:this.styleBrush})},e.prototype.renderAll=function(){t.prototype.renderAll.call(this),this._startPoint&&this._points&&this._brushName&&this._styleBrush&&0!=this._points.length&&(this._drawBrush=this.note.getClassType(W.getClassType(),this._brushName),this._drawBrush&&(this._ctx.clearRect(0,0,this._cv.width,this._cv.height),this._drawBrush.reset(),this._drawBrush.points=this._points,this._drawBrush.draw(this._ctx,this.startPoint,this._points[this._points.length-1],this._styleBrush)))},e.prototype.anchorable=function(){return[d.TOP,d.RIGHT,d.BOTTOM,d.LEFT]},Object.defineProperty(e.prototype,"startPoint",{get:function(){return this._startPoint},set:function(t){this._startPoint=t,this.renderAll()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"points",{get:function(){return this._points},set:function(t){this._points=t,this.renderAll()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"brushName",{get:function(){return this._brushName},set:function(t){t!=this._brushName&&(this._brushName=t,this.renderAll())},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"styleBrush",{get:function(){return this._styleBrush},set:function(t){this._styleBrush=M.merge(this._styleBrush,t),this.renderAll()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIDraw"},enumerable:!1,configurable:!0}),e}(S);return e})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,