!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.nAnimejs=t():e.nAnimejs=t()}(self,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{AnimejsAmun:()=>Le,AnimejsAtum:()=>Ge,AnimejsBes:()=>Ve,AnimejsHandler:()=>qe,AnimejsHapi:()=>xe,AnimejsIsis:()=>Be,AnimejsKek:()=>ke,AnimejsMontu:()=>He,AnimejsNut:()=>ze,AnimejsObject:()=>Se,AnimejsOsiris:()=>Re,AnimejsPtah:()=>Xe,AnimejsRa:()=>Fe,AnimejsSatet:()=>Ue,AnimejsSeker:()=>Ye,AnimejsShu:()=>Ke,AnimejsSobek:()=>We});var n,o=(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),r=function(e,t,n,o){var r,i=arguments.length,u=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(u=(i<3?r(u):i>3?r(t,n,u):r(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u},i=function(){function e(){this._cBind={}}return e.prototype.pushBind=function(e,t){this._cBind[e]||(this._cBind[e]=[]);var n=t.prototype.className;n&&(this._cBind[e].push({c:t,name:n}),window[e]&&this.doBind(e))},e.prototype.doBind=function(e){if(this._cBind[e]&&Array.isArray(this._cBind[e])&&window[e])for(var t=this._cBind[e];t.length>0;){var n=t.pop(),o=window[e][n.name];if(o){var r=Object.getOwnPropertyDescriptors(o.prototype);for(var i in r)"function"==typeof r[i].set&&Object.defineProperty(n.c.prototype,i,{set:r[i].set,enumerable:!0,configurable:!0}),"function"==typeof r[i].get&&Object.defineProperty(n.c.prototype,i,{get:r[i].get,enumerable:!0,configurable:!0}),r[i].value&&"function"==typeof r[i].value&&(n.c.prototype[i]=o.prototype[i]);for(var i in o)n.c[i]=o[i]}}},e}();function u(e,t){return function(t,n){t.prototype.className&&window.NoteBinder.pushBind(e,t)}}window.NoteBinder||(window.NoteBinder=new i);var a,c,p,f,s="nCore",l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.getClassName=function(){},t.getClassType=function(){},t.prototype.init=function(){},t.prototype.getData=function(){},t.prototype.setData=function(e,t){},t.prototype.export=function(){},t.prototype.setHis=function(e){},t.prototype.getHis=function(){},t.prototype.getDescriptor=function(){},t.prototype.setNote=function(e){},t.prototype.getNote=function(){},t.prototype.getConfig=function(){},t.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]},t.prototype.renderName=function(){},t.prototype.renderTags=function(){},t.prototype.setTag=function(e){},t.prototype.removeTag=function(e){},t.prototype.hasTag=function(e){},Object.defineProperty(t.prototype,"name",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tags",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastHis",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return"ClassNote"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"note",{get:function(){},enumerable:!1,configurable:!0}),t=r([u(s)],t)}(function(){function e(){this._id=t.genId(this.classType),this._events={}}var t;return t=e,e.genId=function(e){for(var n="",o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=o.length,i=0;i<6;i++)n+=o.charAt(Math.floor(Math.random()*r));return t._count=t._count>=Number.MAX_VALUE?0:t._count+1,n=e+"_"+t._count+"_"+n+"_"+(new Date).getTime()},e.prototype.on=function(e,t,n){},e.prototype.removeListener=function(e,t,n){},e.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n]},e.prototype.getId=function(){},Object.defineProperty(e.prototype,"className",{get:function(){return"ClassBase"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e._count=0,e=t=r([u(s)],e)}());!function(e){function t(){return null!==e&&e.apply(this,arguments)||this}o(t,e),Object.defineProperty(t.prototype,"className",{get:function(){return"Cmd"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t=r([u(s)],t)}(l);!function(e){e.UNKNOW="unknow",e.NUMBER="number",e.STRING="string",e.BOOLEAN="boolean",e.ARRAY="array",e.BIGINT="bigint",e.OBJECT="object"}(a||(a={})),function(e){e.COLOR="COLOR",e.DATETIME="DATETIME"}(c||(c={})),function(e){e.GET="GET",e.SET="SET",e.EXPO="EXPO",e.LANG="LANG"}(p||(p={})),function(e){e.UI="UI",e.HANDLER="HANDLER",e.RENDER="RENDER",e.SET="SET",e.GET="GET"}(f||(f={}));(function(){function e(){}e=r([u(s)],e)})(),function(){function e(){}e=r([u(s)],e)}(),function(){function e(){}e=r([u(s)],e)}(),function(){function e(){}e.classDes=function(){},e.removeProDes=function(e){},e.number=function(e){},e.string=function(e){},e.stringColor=function(e){},e.stringDateTime=function(e){},e.boolean=function(e){},e.object=function(e){},e.array=function(e){},e.render=function(e){},e.scrColor=function(){},e.srcDateTime=function(){},e.src=function(e){},e.notSet=function(){},e.notExpo=function(){},e.notGet=function(){},e.language=function(){},e.funchandler=function(){},e.funcrender=function(){},e.funcget=function(){},e.funcset=function(){},e=r([u(s)],e)}();var d,y,g,m,b,h,O,v,_,P,E,j,N=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.start=function(){},t.prototype.stop=function(){},t.prototype.isRunning=function(){},Object.defineProperty(t.prototype,"autoStart",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return"Handler"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t=r([u(s)],t)}(l);!function(e){e[e.TOP=0]="TOP",e[e.MID_TOP=1]="MID_TOP",e[e.RIGHT=2]="RIGHT",e[e.MID_RIGHT=3]="MID_RIGHT",e[e.BOTTOM=4]="BOTTOM",e[e.MID_BOTTOM=5]="MID_BOTTOM",e[e.LEFT=6]="LEFT",e[e.MID_LEFT=7]="MID_LEFT",e[e.MID_CENTER=8]="MID_CENTER"}(d||(d={})),function(e){e.EXPORT="EXPORT",e.LANG="LANG"}(y||(y={})),function(e){e.LEFT="left",e.RIGHT="right",e.CENTER="center"}(g||(g={})),function(e){e.TOP="top",e.BOTTOM="bottom",e.CENTER="center"}(m||(m={})),function(e){e.EDIT="edit",e.VIEW="view",e.COMMENT="comment"}(b||(b={})),function(e){e.FIT_WIDTH="fit_width",e.FIT_HEIGHT="fit_height",e.FIT_CONTENT="fit_content",e.FIT_SIZE="fit_size",e.FIT_AUTO="fit_auto"}(h||(h={})),function(e){e.NOTLOAD="notload",e.LOADING="loading",e.LOADFAIL="loadfail",e.LOADED="loaded"}(O||(O={})),function(e){e.UNKNOW="",e.IMAGE="image",e.VIDEO="video",e.AUDIO="audio",e.PDF="pdf",e.DOCX="docx",e.PPTX="pptx",e.XLSX="xlsx",e.LOTTIEANIM="lottieAnim",e.WEBVIEW="webview"}(v||(v={})),function(e){e.TOUCH="touch",e.MOUSE="mouse"}(_||(_={})),function(e){e.READY="ready",e.LOAD_EVENT="load_event",e.MODULE_CHANGE="module_change",e.MODULE_LOADED="module_loaded",e.MODULE_LOADFAIL="module_loadfail",e.NOTE_SELECTION_START="note_selection_start",e.NOTE_SELECTION_MOVING="note_selection_moving",e.NOTE_SELECTION_END="note_selection_end",e.NOTE_NODE_SELECTED="note_node_selected",e.NOTE_PAGE_SELECTED="note_page_selected",e.NOTE_PAGE_VIEW_CHANGE="note_page_view_change",e.NOTE_PAGE_CHANGE="note_page_change",e.NOTE_PAGE_ADD="note_page_add",e.NOTE_PAGE_REMOVE="note_page_remove",e.PAGE_CHANGE="page_change",e.NOTE_HANDLER_RENDER_CHANGE="note_handler_render_change",e.NOTE_ZOOM_CHANGE="note_zoom_change",e.NOTE_KEYUP="note_keyup",e.NOTE_KEYDOWN="note_keydown",e.TEXT_INPUT_FOCUS="text_input_focus",e.TEXT_INPUT_BLUR="text_input_blur",e.NODE_CHANGE="node_change",e.NODE_SIZE_CHANGE="node_size_change",e.NODE_TRANSFORM_CHANGE="node_transform_change",e.NODE_MOUSE_OVER="node_mouse_over",e.NODE_MOUSE_OUT="node_mouse_out",e.NODE_MOUSE_MOVE="node_mouse_move",e.NODE_MOUSE_DOWN="node_mouse_down",e.NODE_MOUSE_UP="node_mouse_up",e.NODE_OVER="node_over",e.NODE_OUT="node_out",e.NODE_MOVE="node_move",e.NODE_DOWN="node_down",e.NODE_UP="node_up",e.NODE_CLICK="node_click",e.NODE_DBLCLICK="node_dblclick",e.NODE_MULTICLICK="node_multiclick",e.NODE_MOUSE_CLICK="node_mouse_click",e.NODE_MOUSE_DBLCLICK="node_mouse_dblclick",e.NOTE_CMD_CHANGE="note_cmd_change"}(P||(P={})),function(e){e.SHIFT="shift",e.META="meta",e.CONTROL="control",e.ALT="alt"}(E||(E={})),function(e){e.UIPAGE="UIPage",e.UINODE="UINode",e.NOTE="Note",e.CMD="Cmd",e.HANDLER="Handler"}(j||(j={}));var T=function(){function e(){}return Object.defineProperty(e.prototype,"className",{get:function(){return"Logger"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"getType",{get:function(){},enumerable:!1,configurable:!0}),e=r([u(s)],e)}(),A=(function(e){function t(t){var n=e.call(this)||this;return console.log("Initing Note Version "+(null==t?void 0:t.version)),(null==t?void 0:t.coreUrl)?n.loadCore((null==t?void 0:t.coreUrl)+"?ver="+(null==t?void 0:t.version),(function(){n.initNote(t)})):n.initNote(t),n}o(t,e),t.prototype.defaultCheckTouchCapable=function(e){},t.prototype.defaultCheckIsMobile=function(e){},t.prototype.defaultCheckIsWebview=function(e){},t.prototype.loadCore=function(e,t){console.log("load module note core "+e);var n=document.createElement("script");n.onload=function(){window.nCore;window.NoteBinder&&window.NoteBinder.doBind("nCore"),t()},n.onerror=function(){console.log("Load module core error !")},n.src=e,document.head.appendChild(n)},t.prototype.initNote=function(e){},t.prototype._parseModuleConfig=function(e){},t.prototype._mergeModuleData=function(e,t){},t.prototype.addModule=function(e){},t.prototype.loadModule=function(e){},t.prototype.getModuleData=function(e){},t.prototype.getStatusModule=function(e){},t.prototype.checkDependenciesModuleLoaded=function(e){},t.prototype._findAndLoadModule=function(){},t.prototype._loadJs=function(e){},t.prototype._onLoadModuleFinish=function(e,t,n){},t.prototype._doBindModule=function(e){},Object.defineProperty(t.prototype,"version",{get:function(){},enumerable:!1,configurable:!0}),t.prototype._start=function(){},t.prototype._initUI=function(){},Object.defineProperty(t.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),t.prototype.appendHandlerRender=function(e){},t.prototype.removeHandlerRender=function(e){},t.prototype.setTextFocus=function(e){},t.prototype.getTextFocus=function(){},t.prototype.load=function(e){},t.prototype.export=function(){},t.prototype.reset=function(){},t.prototype.setClipboardData=function(e,t){},t.prototype.getClipboardData=function(e){},t.prototype.getHis=function(){},t.prototype.setHis=function(e){},t.prototype.onPageChange=function(e){},t.prototype.saveHistory=function(e){},t.prototype.undo=function(){},t.prototype.redo=function(){},t.prototype.doSetHisData=function(e){},t.prototype.getRegisterInstance=function(){},t.prototype.setConfig=function(e){},t.prototype.getConfig=function(){},Object.defineProperty(t.prototype,"config",{get:function(){},enumerable:!1,configurable:!0}),t.prototype._applyConfig=function(){},Object.defineProperty(t.prototype,"zoom",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){},enumerable:!1,configurable:!0}),t.prototype.isTouchCapable=function(){},t.prototype.isMobile=function(){},t.prototype.isWebview=function(){},t.prototype.enableLog=function(){},t.prototype.disableLog=function(){},t.prototype.setLogger=function(e){},t.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]},t.prototype.registerCmd=function(e,t){},t.prototype.unregisterCmd=function(e){},t.prototype.registerCmds=function(e){},t.prototype.unregisterCmds=function(e){},t.prototype.getAllRegisterCmdName=function(){},t.prototype.getRegisterCmd=function(){},t.prototype.doCmd=function(e,t){},t.prototype.registerHandler=function(e,t){},t.prototype.unregisterHandler=function(e){},t.prototype.registerHandlers=function(e){},t.prototype.unregisterHandlers=function(e){},t.prototype.getHandlerByName=function(e){},t.prototype.getAllHandler=function(){},t.prototype.getAllRegisterHandlerName=function(){},t.prototype.registerNode=function(e,t){},t.prototype.unregisterNode=function(e){},t.prototype.registerNodes=function(e){},t.prototype.unregisterNodes=function(e){},t.prototype.getAllRegisterNodeName=function(){},t.prototype.addNode=function(e,t){},t.prototype.getNodeSelected=function(){},t.prototype.setNodeSelected=function(e){},t.prototype.createNode=function(e){},t.prototype.getIdsOfListNode=function(e){},t.prototype.compareListNode=function(e,t){},t.prototype.addPage=function(e,t){},t.prototype.removePage=function(e){},t.prototype.removeAllPage=function(){},t.prototype.getIndexPage=function(e){},t.prototype.swapIndexPage=function(e,t){},t.prototype.getPageSelected=function(){},t.prototype.setPageSelected=function(e){},t.prototype.getPages=function(){},t.prototype.registerClassType=function(e,t){},t.prototype.unregisterClassType=function(e,t){},t.prototype.registerClassTypes=function(e){},t.prototype.unregisterClassTypes=function(e){},t.prototype.getClassType=function(e,t){},t.prototype.getAllNameClassType=function(e){},t.prototype.loadJs=function(e,t,n){},t.prototype.loadCss=function(e){},t.prototype.loadFont=function(e,t,n){},t.prototype._initKeyboard=function(){},t.prototype._onkeypress=function(e){},t.prototype._onkeydown=function(e){},t.prototype._onkeyup=function(e){},Object.defineProperty(t.prototype,"keydowns",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key_shift",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key_meta",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key_ctrl",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key_alt",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return"Note"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t=r([u(s)],t)}(l),function(e){function t(){return null!==e&&e.apply(this,arguments)||this}o(t,e),t.prototype.init=function(){},t.prototype.startHandler=function(){},t.prototype.stopHandler=function(){},t.prototype.createBt=function(e,t){},t.prototype.showFrame=function(){},t.prototype.hideFrame=function(){},t.prototype.iframeMessages=function(e){},t.prototype.onBtCancel=function(){},t.prototype.onBtDone=function(){},Object.defineProperty(t.prototype,"iframePluginUrl",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return"PHandler"},enumerable:!1,configurable:!0}),t=r([u(s)],t)}(N),function(){function e(){}Object.defineProperty(e.prototype,"className",{get:function(){return"Sanitizer"},enumerable:!1,configurable:!0}),e.num=function(e){},e.str=function(e){},e.str_hexColor=function(e){},e.str_style=function(e){},e.str_url=function(e,t,n){},e.sanitizeString=function(e){},e.sanitizeHtml=function(e){},e.sanitizeSvg=function(e){},e.sanitizeMathML=function(e){},e=r([u(s)],e)}(),function(e){function t(){return null!==e&&e.apply(this,arguments)||this}o(t,e),t.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]},Object.defineProperty(t.prototype,"className",{get:function(){return"TimestampLogger"},enumerable:!1,configurable:!0}),t=r([u(s)],t)}(T),function(e){function t(){return null!==e&&e.apply(this,arguments)||this}o(t,e),t.prototype.init=function(){},t.prototype.renderAll=function(){},t.prototype.getData=function(){},t.prototype._checkNeedSaveHis=function(e){},t.prototype.setData=function(e,t){},t.prototype.export=function(){},t.prototype.getHis=function(){},t.prototype.setHis=function(e){},t.prototype.addChild=function(e){},t.prototype.addToParent=function(e){},t.prototype.addChilds=function(e){},t.prototype.getParent=function(){},t.prototype.removeFromParent=function(){},t.prototype.removeChild=function(e){},t.prototype.removeAllChild=function(){},t.prototype.getChild=function(){},t.prototype.clone=function(){},Object.defineProperty(t.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"renderContent",{get:function(){},enumerable:!1,configurable:!0}),t.prototype.anchorable=function(){},t.prototype.getThumb=function(){},t.prototype.calSize=function(){},Object.defineProperty(t.prototype,"childData",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"childIds",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),t.prototype.css=function(e,t){},t.prototype.getCss=function(e){},t.prototype.renderStyle=function(){},t.prototype.renderCssClass=function(){},t.prototype.renderSize=function(){},t.prototype.renderTransform=function(){},t.prototype.renderTransformOrigin=function(){},t.prototype.setSize=function(e,t){},t.prototype.setTransformOriginPoint=function(e,t){},t.prototype.setTransformOrigin=function(e,t){},t.prototype.onResize=function(){},t.prototype.onTransform=function(){},t.prototype.getBorderWidth=function(){},Object.defineProperty(t.prototype,"x",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"originX",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"originY",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"deltaPos",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"deltaTime",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"resizable",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"movable",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rotatable",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"borderWidth",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"borderRadius",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"borderStyle",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"borderColor",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"enabled",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectable",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hisSetting",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scale",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rotate",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"opacity",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"visible",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"zIndex",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lock",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"style",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"cssClass",{get:function(){},set:function(e){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"contentWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"contentHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"originPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"centerPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"topPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rightPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bottomPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"leftPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"boundingBox",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastMouseDown",{get:function(){},enumerable:!1,configurable:!0}),t.prototype.initEventListener=function(){},t.prototype.addMouseEvent=function(){},t.prototype.removeMouseEvent=function(){},t.prototype.addTouchEvent=function(){},t.prototype.removeTouchEvent=function(){},t.prototype._mouseover=function(e){},t.prototype._mouseout=function(e){},t.prototype._mousemove=function(e){},t.prototype._mousedown=function(e){},t.prototype._mouseup=function(e){},t.prototype._nodeClick=function(e){},t.prototype._nodeDbClick=function(e){},t.prototype._nodeMultiClick=function(e){},t.prototype._click=function(e){},t.prototype._dblclick=function(e){},t.prototype._touchstart=function(e){},t.prototype._touchmove=function(e){},t.prototype._touchcancel=function(e){},t.prototype._touchend=function(e){},t.prototype._nodeDown=function(e){},t.prototype._nodeUp=function(e){},Object.defineProperty(t.prototype,"className",{get:function(){return"UINode"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t=r([u(s)],t)}(l),function(){function e(){}Object.defineProperty(e.prototype,"className",{get:function(){return"Utils"},enumerable:!1,configurable:!0}),e.addArrayPrototype=function(){},e.removeArrayPrototype=function(){},e.notNull=function(e){},e.isNull=function(e){},e.randrom=function(e,t){},e.merge=function(e,t){},e.deepMerge=function(e,t){},e.deepClone=function(e){},e.mergeNotNull=function(e,t){},e.mergePartial=function(e,t){},e.toArr=function(e){},e.getTransformValue=function(e){},e.transformToCss=function(e){},e.inserClassCss=function(e,t){},e.removeAllChildHTMLElement=function(e,t){},e.pointToPage=function(e,t){},e.getDistance=function(e,t,n,o){},e.getBoundingBox=function(e,t){},e.getOriginBoxOfBoundingBox=function(e,t){},e.pointInRect=function(e,t,n){},e.rectInRect=function(e,t){},e.pointRighAngle=function(e,t,n,o,r,i){},e.pointRighAngleRotate=function(e,t,n,o,r){},e.angleTo180=function(e){},e.pointLineInOrder=function(e,t,n,o,r,i){},e.angleOf=function(e,t,n,o){},e.getPointRotate=function(e,t,n,o,r){},e.getRectRotate=function(e,t,n,o){},e.getNodeConner=function(e){},e.createPointTest=function(e,t,n,o,r){},e.makeDragable=function(e){},e.clearDragable=function(e){},e.makeIconButtom=function(e,t,n,o){},e.cropCanvasTransparent=function(e,t){},e=r([u(s)],e)}(),function(){function e(){}e.prototype.getSqDist=function(e,t){},e.prototype.getSqSegDist=function(e,t,n){},e.prototype.simplifyRadialDist=function(e,t){},e.prototype.simplifyDPStep=function(e,t,n,o,r){},e.prototype.simplifyDouglasPeucker=function(e,t){},e.prototype.simplify=function(e,t,n){},Object.defineProperty(e.prototype,"className",{get:function(){return"Simplify"},enumerable:!1,configurable:!0}),e=r([u(s)],e)}(),{update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0}),C={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},D=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],M={CSS:{},springs:{}};function w(e,t,n){return Math.min(Math.max(e,t),n)}function I(e,t){return e.indexOf(t)>-1}function S(e,t){return e.apply(null,t)}var x={arr:function(e){return Array.isArray(e)},obj:function(e){return I(Object.prototype.toString.call(e),"Object")},pth:function(e){return x.obj(e)&&e.hasOwnProperty("totalLength")},svg:function(e){return e instanceof SVGElement},inp:function(e){return e instanceof HTMLInputElement},dom:function(e){return e.nodeType||x.svg(e)},str:function(e){return"string"==typeof e},fnc:function(e){return"function"==typeof e},und:function(e){return void 0===e},nil:function(e){return x.und(e)||null===e},hex:function(e){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e)},rgb:function(e){return/^rgb/.test(e)},hsl:function(e){return/^hsl/.test(e)},col:function(e){return x.hex(e)||x.rgb(e)||x.hsl(e)},key:function(e){return!A.hasOwnProperty(e)&&!C.hasOwnProperty(e)&&"targets"!==e&&"keyframes"!==e}};function L(e){var t=/\(([^)]+)\)/.exec(e);return t?t[1].split(",").map((function(e){return parseFloat(e)})):[]}function k(e,t){var n=L(e),o=w(x.und(n[0])?1:n[0],.1,100),r=w(x.und(n[1])?100:n[1],.1,100),i=w(x.und(n[2])?10:n[2],.1,100),u=w(x.und(n[3])?0:n[3],.1,100),a=Math.sqrt(r/o),c=i/(2*Math.sqrt(r*o)),p=c<1?a*Math.sqrt(1-c*c):0,f=c<1?(c*a-u)/p:-u+a;function s(e){var n=t?t*e/1e3:e;return n=c<1?Math.exp(-n*c*a)*(1*Math.cos(p*n)+f*Math.sin(p*n)):(1+f*n)*Math.exp(-n*a),0===e||1===e?e:1-n}return t?s:function(){var t=M.springs[e];if(t)return t;for(var n=1/6,o=0,r=0;;)if(1===s(o+=n)){if(++r>=16)break}else r=0;var i=o*n*1e3;return M.springs[e]=i,i}}function B(e){return void 0===e&&(e=10),function(t){return Math.ceil(w(t,1e-6,1)*e)*(1/e)}}var H,R,U=function(){var e=.1;function t(e,t){return 1-3*t+3*e}function n(e,t){return 3*t-6*e}function o(e){return 3*e}function r(e,r,i){return((t(r,i)*e+n(r,i))*e+o(r))*e}function i(e,r,i){return 3*t(r,i)*e*e+2*n(r,i)*e+o(r)}return function(t,n,o,u){if(0<=t&&t<=1&&0<=o&&o<=1){var a=new Float32Array(11);if(t!==n||o!==u)for(var c=0;c<11;++c)a[c]=r(c*e,t,o);return function(e){return t===n&&o===u||0===e||1===e?e:r(p(e),n,u)}}function p(n){for(var u=0,c=1;10!==c&&a[c]<=n;++c)u+=e;--c;var p=u+(n-a[c])/(a[c+1]-a[c])*e,f=i(p,t,o);return f>=.001?function(e,t,n,o){for(var u=0;u<4;++u){var a=i(t,n,o);if(0===a)return t;t-=(r(t,n,o)-e)/a}return t}(n,p,t,o):0===f?p:function(e,t,n,o,i){var u,a,c=0;do{(u=r(a=t+(n-t)/2,o,i)-e)>0?n=a:t=a}while(Math.abs(u)>1e-7&&++c<10);return a}(n,u,u+e,t,o)}}}(),G=(H={linear:function(){return function(e){return e}}},R={Sine:function(){return function(e){return 1-Math.cos(e*Math.PI/2)}},Circ:function(){return function(e){return 1-Math.sqrt(1-e*e)}},Back:function(){return function(e){return e*e*(3*e-2)}},Bounce:function(){return function(e){for(var t,n=4;e<((t=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*t-2)/22-e,2)}},Elastic:function(e,t){void 0===e&&(e=1),void 0===t&&(t=.5);var n=w(e,1,10),o=w(t,.1,2);return function(e){return 0===e||1===e?e:-n*Math.pow(2,10*(e-1))*Math.sin((e-1-o/(2*Math.PI)*Math.asin(1/n))*(2*Math.PI)/o)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(e,t){R[e]=function(){return function(e){return Math.pow(e,t+2)}}})),Object.keys(R).forEach((function(e){var t=R[e];H["easeIn"+e]=t,H["easeOut"+e]=function(e,n){return function(o){return 1-t(e,n)(1-o)}},H["easeInOut"+e]=function(e,n){return function(o){return o<.5?t(e,n)(2*o)/2:1-t(e,n)(-2*o+2)/2}},H["easeOutIn"+e]=function(e,n){return function(o){return o<.5?(1-t(e,n)(1-2*o))/2:(t(e,n)(2*o-1)+1)/2}}})),H);function F(e,t){if(x.fnc(e))return e;var n=e.split("(")[0],o=G[n],r=L(e);switch(n){case"spring":return k(e,t);case"cubicBezier":return S(U,r);case"steps":return S(B,r);default:return S(o,r)}}function W(e){try{return document.querySelectorAll(e)}catch(e){return}}function X(e,t){for(var n=e.length,o=arguments.length>=2?arguments[1]:void 0,r=[],i=0;i<n;i++)if(i in e){var u=e[i];t.call(o,u,i,e)&&r.push(u)}return r}function V(e){return e.reduce((function(e,t){return e.concat(x.arr(t)?V(t):t)}),[])}function Y(e){return x.arr(e)?e:(x.str(e)&&(e=W(e)||e),e instanceof NodeList||e instanceof HTMLCollection?[].slice.call(e):[e])}function z(e,t){return e.some((function(e){return e===t}))}function K(e){var t={};for(var n in e)t[n]=e[n];return t}function Z(e,t){var n=K(e);for(var o in e)n[o]=t.hasOwnProperty(o)?t[o]:e[o];return n}function q(e,t){var n=K(e);for(var o in t)n[o]=x.und(e[o])?t[o]:e[o];return n}function $(e){return x.rgb(e)?(n=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(t=e))?"rgba("+n[1]+",1)":t:x.hex(e)?function(e){var t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,n,o){return t+t+n+n+o+o})),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return"rgba("+parseInt(n[1],16)+","+parseInt(n[2],16)+","+parseInt(n[3],16)+",1)"}(e):x.hsl(e)?function(e){var t,n,o,r=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(e),i=parseInt(r[1],10)/360,u=parseInt(r[2],10)/100,a=parseInt(r[3],10)/100,c=r[4]||1;function p(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}if(0==u)t=n=o=a;else{var f=a<.5?a*(1+u):a+u-a*u,s=2*a-f;t=p(s,f,i+1/3),n=p(s,f,i),o=p(s,f,i-1/3)}return"rgba("+255*t+","+255*n+","+255*o+","+c+")"}(e):void 0;var t,n}function Q(e){var t=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(e);if(t)return t[1]}function J(e,t){return x.fnc(e)?e(t.target,t.id,t.total):e}function ee(e,t){return e.getAttribute(t)}function te(e,t,n){if(z([n,"deg","rad","turn"],Q(t)))return t;var o=M.CSS[t+n];if(!x.und(o))return o;var r=document.createElement(e.tagName),i=e.parentNode&&e.parentNode!==document?e.parentNode:document.body;i.appendChild(r),r.style.position="absolute",r.style.width=100+n;var u=100/r.offsetWidth;i.removeChild(r);var a=u*parseFloat(t);return M.CSS[t+n]=a,a}function ne(e,t,n){if(t in e.style){var o=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),r=e.style[t]||getComputedStyle(e).getPropertyValue(o)||"0";return n?te(e,r,n):r}}function oe(e,t){return x.dom(e)&&!x.inp(e)&&(!x.nil(ee(e,t))||x.svg(e)&&e[t])?"attribute":x.dom(e)&&z(D,t)?"transform":x.dom(e)&&"transform"!==t&&ne(e,t)?"css":null!=e[t]?"object":void 0}function re(e){if(x.dom(e)){for(var t,n=e.style.transform||"",o=/(\w+)\(([^)]*)\)/g,r=new Map;t=o.exec(n);)r.set(t[1],t[2]);return r}}function ie(e,t,n,o){var r=I(t,"scale")?1:0+function(e){return I(e,"translate")||"perspective"===e?"px":I(e,"rotate")||I(e,"skew")?"deg":void 0}(t),i=re(e).get(t)||r;return n&&(n.transforms.list.set(t,i),n.transforms.last=t),o?te(e,i,o):i}function ue(e,t,n,o){switch(oe(e,t)){case"transform":return ie(e,t,o,n);case"css":return ne(e,t,n);case"attribute":return ee(e,t);default:return e[t]||0}}function ae(e,t){var n=/^(\*=|\+=|-=)/.exec(e);if(!n)return e;var o=Q(e)||0,r=parseFloat(t),i=parseFloat(e.replace(n[0],""));switch(n[0][0]){case"+":return r+i+o;case"-":return r-i+o;case"*":return r*i+o}}function ce(e,t){if(x.col(e))return $(e);if(/\s/g.test(e))return e;var n=Q(e),o=n?e.substr(0,e.length-n.length):e;return t?o+t:o}function pe(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function fe(e){for(var t,n=e.points,o=0,r=0;r<n.numberOfItems;r++){var i=n.getItem(r);r>0&&(o+=pe(t,i)),t=i}return o}function se(e){if(e.getTotalLength)return e.getTotalLength();switch(e.tagName.toLowerCase()){case"circle":return function(e){return 2*Math.PI*ee(e,"r")}(e);case"rect":return function(e){return 2*ee(e,"width")+2*ee(e,"height")}(e);case"line":return function(e){return pe({x:ee(e,"x1"),y:ee(e,"y1")},{x:ee(e,"x2"),y:ee(e,"y2")})}(e);case"polyline":return fe(e);case"polygon":return function(e){var t=e.points;return fe(e)+pe(t.getItem(t.numberOfItems-1),t.getItem(0))}(e)}}function le(e,t){var n=t||{},o=n.el||function(e){for(var t=e.parentNode;x.svg(t)&&x.svg(t.parentNode);)t=t.parentNode;return t}(e),r=o.getBoundingClientRect(),i=ee(o,"viewBox"),u=r.width,a=r.height,c=n.viewBox||(i?i.split(" "):[0,0,u,a]);return{el:o,viewBox:c,x:c[0]/1,y:c[1]/1,w:u,h:a,vW:c[2],vH:c[3]}}function de(e,t,n){function o(n){void 0===n&&(n=0);var o=t+n>=1?t+n:0;return e.el.getPointAtLength(o)}var r=le(e.el,e.svg),i=o(),u=o(-1),a=o(1),c=n?1:r.w/r.vW,p=n?1:r.h/r.vH;switch(e.property){case"x":return(i.x-r.x)*c;case"y":return(i.y-r.y)*p;case"angle":return 180*Math.atan2(a.y-u.y,a.x-u.x)/Math.PI}}function ye(e,t){var n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,o=ce(x.pth(e)?e.totalLength:e,t)+"";return{original:o,numbers:o.match(n)?o.match(n).map(Number):[0],strings:x.str(e)||t?o.split(n):[]}}function ge(e){return X(e?V(x.arr(e)?e.map(Y):Y(e)):[],(function(e,t,n){return n.indexOf(e)===t}))}function me(e){var t=ge(e);return t.map((function(e,n){return{target:e,id:n,total:t.length,transforms:{list:re(e)}}}))}function be(e,t){var n=K(t);if(/^spring/.test(n.easing)&&(n.duration=k(n.easing)),x.arr(e)){var o=e.length;2===o&&!x.obj(e[0])?e={value:e}:x.fnc(t.duration)||(n.duration=t.duration/o)}var r=x.arr(e)?e:[e];return r.map((function(e,n){var o=x.obj(e)&&!x.pth(e)?e:{value:e};return x.und(o.delay)&&(o.delay=n?0:t.delay),x.und(o.endDelay)&&(o.endDelay=n===r.length-1?t.endDelay:0),o})).map((function(e){return q(e,n)}))}function he(e,t){var n=[],o=t.keyframes;for(var r in o&&(t=q(function(e){for(var t=X(V(e.map((function(e){return Object.keys(e)}))),(function(e){return x.key(e)})).reduce((function(e,t){return e.indexOf(t)<0&&e.push(t),e}),[]),n={},o=function(o){var r=t[o];n[r]=e.map((function(e){var t={};for(var n in e)x.key(n)?n==r&&(t.value=e[n]):t[n]=e[n];return t}))},r=0;r<t.length;r++)o(r);return n}(o),t)),t)x.key(r)&&n.push({name:r,tweens:be(t[r],e)});return n}function Oe(e,t){var n;return e.tweens.map((function(o){var r=function(e,t){var n={};for(var o in e){var r=J(e[o],t);x.arr(r)&&1===(r=r.map((function(e){return J(e,t)}))).length&&(r=r[0]),n[o]=r}return n.duration=parseFloat(n.duration),n.delay=parseFloat(n.delay),n}(o,t),i=r.value,u=x.arr(i)?i[1]:i,a=Q(u),c=ue(t.target,e.name,a,t),p=n?n.to.original:c,f=x.arr(i)?i[0]:p,s=Q(f)||Q(c),l=a||s;return x.und(u)&&(u=p),r.from=ye(f,l),r.to=ye(ae(u,f),l),r.start=n?n.end:0,r.end=r.start+r.delay+r.duration+r.endDelay,r.easing=F(r.easing,r.duration),r.isPath=x.pth(i),r.isPathTargetInsideSVG=r.isPath&&x.svg(t.target),r.isColor=x.col(r.from.original),r.isColor&&(r.round=1),n=r,r}))}var ve={css:function(e,t,n){return e.style[t]=n},attribute:function(e,t,n){return e.setAttribute(t,n)},object:function(e,t,n){return e[t]=n},transform:function(e,t,n,o,r){if(o.list.set(t,n),t===o.last||r){var i="";o.list.forEach((function(e,t){i+=t+"("+e+") "})),e.style.transform=i}}};function _e(e,t){me(e).forEach((function(e){for(var n in t){var o=J(t[n],e),r=e.target,i=Q(o),u=ue(r,n,i,e),a=ae(ce(o,i||Q(u)),u),c=oe(r,n);ve[c](r,n,a,e.transforms,!0)}}))}function Pe(e,t){return X(V(e.map((function(e){return t.map((function(t){return function(e,t){var n=oe(e.target,t.name);if(n){var o=Oe(t,e),r=o[o.length-1];return{type:n,property:t.name,animatable:e,tweens:o,duration:r.end,delay:o[0].delay,endDelay:r.endDelay}}}(e,t)}))}))),(function(e){return!x.und(e)}))}function Ee(e,t){var n=e.length,o=function(e){return e.timelineOffset?e.timelineOffset:0},r={};return r.duration=n?Math.max.apply(Math,e.map((function(e){return o(e)+e.duration}))):t.duration,r.delay=n?Math.min.apply(Math,e.map((function(e){return o(e)+e.delay}))):t.delay,r.endDelay=n?r.duration-Math.max.apply(Math,e.map((function(e){return o(e)+e.duration-e.endDelay}))):t.endDelay,r}var je=0;var Ne=[],Te=function(){var e;function t(n){for(var o=Ne.length,r=0;r<o;){var i=Ne[r];i.paused?(Ne.splice(r,1),o--):(i.tick(n),r++)}e=r>0?requestAnimationFrame(t):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){Ce.suspendWhenDocumentHidden&&(Ae()?e=cancelAnimationFrame(e):(Ne.forEach((function(e){return e._onDocumentVisibility()})),Te()))})),function(){e||Ae()&&Ce.suspendWhenDocumentHidden||!(Ne.length>0)||(e=requestAnimationFrame(t))}}();function Ae(){return!!document&&document.hidden}function Ce(e){void 0===e&&(e={});var t,n=0,o=0,r=0,i=0,u=null;function a(e){var t=window.Promise&&new Promise((function(e){return u=e}));return e.finished=t,t}var c=function(e){var t=Z(A,e),n=Z(C,e),o=he(n,e),r=me(e.targets),i=Pe(r,o),u=Ee(i,n),a=je;return je++,q(t,{id:a,children:[],animatables:r,animations:i,duration:u.duration,delay:u.delay,endDelay:u.endDelay})}(e);a(c);function p(){var e=c.direction;"alternate"!==e&&(c.direction="normal"!==e?"normal":"reverse"),c.reversed=!c.reversed,t.forEach((function(e){return e.reversed=c.reversed}))}function f(e){return c.reversed?c.duration-e:e}function s(){n=0,o=f(c.currentTime)*(1/Ce.speed)}function l(e,t){t&&t.seek(e-t.timelineOffset)}function d(e){for(var t=0,n=c.animations,o=n.length;t<o;){var r=n[t],i=r.animatable,u=r.tweens,a=u.length-1,p=u[a];a&&(p=X(u,(function(t){return e<t.end}))[0]||p);for(var f=w(e-p.start-p.delay,0,p.duration)/p.duration,s=isNaN(f)?1:p.easing(f),l=p.to.strings,d=p.round,y=[],g=p.to.numbers.length,m=void 0,b=0;b<g;b++){var h=void 0,O=p.to.numbers[b],v=p.from.numbers[b]||0;h=p.isPath?de(p.value,s*O,p.isPathTargetInsideSVG):v+s*(O-v),d&&(p.isColor&&b>2||(h=Math.round(h*d)/d)),y.push(h)}var _=l.length;if(_){m=l[0];for(var P=0;P<_;P++){l[P];var E=l[P+1],j=y[P];isNaN(j)||(m+=E?j+E:j+" ")}}else m=y[0];ve[r.type](i.target,r.property,m,i.transforms),r.currentValue=m,t++}}function y(e){c[e]&&!c.passThrough&&c[e](c)}function g(e){var s=c.duration,g=c.delay,m=s-c.endDelay,b=f(e);c.progress=w(b/s*100,0,100),c.reversePlayback=b<c.currentTime,t&&function(e){if(c.reversePlayback)for(var n=i;n--;)l(e,t[n]);else for(var o=0;o<i;o++)l(e,t[o])}(b),!c.began&&c.currentTime>0&&(c.began=!0,y("begin")),!c.loopBegan&&c.currentTime>0&&(c.loopBegan=!0,y("loopBegin")),b<=g&&0!==c.currentTime&&d(0),(b>=m&&c.currentTime!==s||!s)&&d(s),b>g&&b<m?(c.changeBegan||(c.changeBegan=!0,c.changeCompleted=!1,y("changeBegin")),y("change"),d(b)):c.changeBegan&&(c.changeCompleted=!0,c.changeBegan=!1,y("changeComplete")),c.currentTime=w(b,0,s),c.began&&y("update"),e>=s&&(o=0,c.remaining&&!0!==c.remaining&&c.remaining--,c.remaining?(n=r,y("loopComplete"),c.loopBegan=!1,"alternate"===c.direction&&p()):(c.paused=!0,c.completed||(c.completed=!0,y("loopComplete"),y("complete"),!c.passThrough&&"Promise"in window&&(u(),a(c)))))}return c.reset=function(){var e=c.direction;c.passThrough=!1,c.currentTime=0,c.progress=0,c.paused=!0,c.began=!1,c.loopBegan=!1,c.changeBegan=!1,c.completed=!1,c.changeCompleted=!1,c.reversePlayback=!1,c.reversed="reverse"===e,c.remaining=c.loop,t=c.children;for(var n=i=t.length;n--;)c.children[n].reset();(c.reversed&&!0!==c.loop||"alternate"===e&&1===c.loop)&&c.remaining++,d(c.reversed?c.duration:0)},c._onDocumentVisibility=s,c.set=function(e,t){return _e(e,t),c},c.tick=function(e){r=e,n||(n=r),g((r+(o-n))*Ce.speed)},c.seek=function(e){g(f(e))},c.pause=function(){c.paused=!0,s()},c.play=function(){c.paused&&(c.completed&&c.reset(),c.paused=!1,Ne.push(c),s(),Te())},c.reverse=function(){p(),c.completed=!c.reversed,s()},c.restart=function(){c.reset(),c.play()},c.remove=function(e){Me(ge(e),c)},c.reset(),c.autoplay&&c.play(),c}function De(e,t){for(var n=t.length;n--;)z(e,t[n].animatable.target)&&t.splice(n,1)}function Me(e,t){var n=t.animations,o=t.children;De(e,n);for(var r=o.length;r--;){var i=o[r],u=i.animations;De(e,u),u.length||i.children.length||o.splice(r,1)}n.length||o.length||t.pause()}Ce.version="3.2.1",Ce.speed=1,Ce.suspendWhenDocumentHidden=!0,Ce.running=Ne,Ce.remove=function(e){for(var t=ge(e),n=Ne.length;n--;){Me(t,Ne[n])}},Ce.get=ue,Ce.set=_e,Ce.convertPx=te,Ce.path=function(e,t){var n=x.str(e)?W(e)[0]:e,o=t||100;return function(e){return{property:e,el:n,svg:le(n),totalLength:se(n)*(o/100)}}},Ce.setDashoffset=function(e){var t=se(e);return e.setAttribute("stroke-dasharray",t),t},Ce.stagger=function(e,t){void 0===t&&(t={});var n=t.direction||"normal",o=t.easing?F(t.easing):null,r=t.grid,i=t.axis,u=t.from||0,a="first"===u,c="center"===u,p="last"===u,f=x.arr(e),s=f?parseFloat(e[0]):parseFloat(e),l=f?parseFloat(e[1]):0,d=Q(f?e[1]:e)||0,y=t.start||0+(f?s:0),g=[],m=0;return function(e,t,b){if(a&&(u=0),c&&(u=(b-1)/2),p&&(u=b-1),!g.length){for(var h=0;h<b;h++){if(r){var O=c?(r[0]-1)/2:u%r[0],v=c?(r[1]-1)/2:Math.floor(u/r[0]),_=O-h%r[0],P=v-Math.floor(h/r[0]),E=Math.sqrt(_*_+P*P);"x"===i&&(E=-_),"y"===i&&(E=-P),g.push(E)}else g.push(Math.abs(u-h));m=Math.max.apply(Math,g)}o&&(g=g.map((function(e){return o(e/m)*m}))),"reverse"===n&&(g=g.map((function(e){return i?e<0?-1*e:-e:Math.abs(m-e)})))}return y+(f?(l-s)/m:s)*(Math.round(100*g[t])/100)+d}},Ce.timeline=function(e){void 0===e&&(e={});var t=Ce(e);return t.duration=0,t.add=function(n,o){var r=Ne.indexOf(t),i=t.children;function u(e){e.passThrough=!0}r>-1&&Ne.splice(r,1);for(var a=0;a<i.length;a++)u(i[a]);var c=q(n,Z(C,e));c.targets=c.targets||e.targets;var p=t.duration;c.autoplay=!1,c.direction=t.direction,c.timelineOffset=x.und(o)?p:ae(o,p),u(t),t.seek(c.timelineOffset);var f=Ce(c);u(f),i.push(f);var s=Ee(i,e);return t.delay=s.delay,t.endDelay=s.endDelay,t.duration=s.duration,t.seek(0),t.reset(),t.autoplay&&t.play(),t},t},Ce.easing=F,Ce.penner=G,Ce.random=function(e,t){return Math.floor(Math.random()*(t-e+1))+e};const we=Ce;var Ie=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Se=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),Object.defineProperty(t.prototype,"classType",{get:function(){return"AnimejsObject"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsObject"},enumerable:!1,configurable:!0}),t}(l),xe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:function(e,t){return 600+75*t},easing:"easeOutExpo",delay:function(e,t){return 50*t},opacity:{value:[0,1],easing:"linear"},scale:[0,1]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsHapi"},enumerable:!1,configurable:!0}),t}(Se),Le=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:function(e,t){return 500+50*t},easing:"easeOutExpo",delay:function(e,t){return 20*t},opacity:{value:[0,1],duration:function(e,t){return 250+50*t},easing:"linear"},translateY:[400,0]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsAmun"},enumerable:!1,configurable:!0}),t}(Se),ke=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:800,delay:function(e,t){return 20*t},opacity:{value:[0,1],duration:600,easing:"linear"},translateX:[-500,0],rotateZ:[15,0]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsKek"},enumerable:!1,configurable:!0}),t}(Se),Be=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:900,elasticity:500,delay:function(e,t){return 15*t},opacity:{value:[0,1],duration:300,easing:"linear"},translateX:function(){return[0===we.random(0,1)?100:-100,0]},translateY:function(){return[0===we.random(0,1)?100:-100,0]}}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsIsis"},enumerable:!1,configurable:!0}),t}(Se),He=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return e.forEach((function(e){e.style.transformOrigin="50% 0%"})),{targets:e,duration:1500,elasticity:400,delay:function(e,t){return 75*t},opacity:{value:[0,1],duration:1e3,easing:"linear"},rotateX:[-90,0]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsMontu"},enumerable:!1,configurable:!0}),t}(Se),Re=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:function(){return we.random(500,1e3)},delay:function(e,t){return 50*t},opacity:{value:[0,1],duration:700,easing:"linear"},translateZ:{value:[-3e3,0],duration:1e3},rotateY:["-1turns",0]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsOsiris"},enumerable:!1,configurable:!0}),t}(Se),Ue=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:800,elasticity:600,delay:function(e,t){return 100*t},opacity:{value:[0,1],duration:600,easing:"linear"},scaleX:{value:[.4,1]},scaleY:{value:[.6,1],duration:1e3}}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsSatet"},enumerable:!1,configurable:!0}),t}(Se),Ge=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return e.forEach((function(e){e.style.transformOrigin="50% 0%"})),{targets:e,duration:800,delay:function(e,t){return 35*t},opacity:{value:[0,1],duration:600,easing:"linear"},translateX:[100,0],translateY:[-100,0],translateZ:[400,0],rotateZ:[10,0],rotateX:[75,0]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsAtum"},enumerable:!1,configurable:!0}),t}(Se),Fe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return e.forEach((function(e){e.style.transformOrigin="50% 0%"})),{targets:e,duration:500,easing:"easeOutBack",delay:function(e,t){return 100*t},opacity:{value:[0,1],easing:"linear"},translateY:[400,0],scaleY:[{value:[3,.6],delay:function(e,t){return 100*t+120},duration:300,easing:"easeOutExpo"},{value:[.6,1],duration:1400,easing:"easeOutElastic"}],scaleX:[{value:[.9,1.05],delay:function(e,t){return 100*t+120},duration:300,easing:"easeOutExpo"},{value:[1.05,1],duration:1400,easing:"easeOutElastic"}]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsRa"},enumerable:!1,configurable:!0}),t}(Se),We=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:600,easing:"easeOutExpo",delay:function(e,t){return 100*t},opacity:{value:[0,1],duration:100,easing:"linear"},translateX:function(e,t){var n=document.body.scrollLeft+document.documentElement.scrollLeft,o=window.innerWidth/2+n,r=e.getBoundingClientRect();return[o-(r.left+n+r.width/2),0]},translateY:function(e,t){var n=document.body.scrollTop+document.documentElement.scrollTop,o=window.innerHeight+n,r=e.getBoundingClientRect();return[o-(r.top+n+r.height/2),0]},rotate:function(e,t){var n=window.innerWidth/2,o=e.getBoundingClientRect();return[o.left+o.width/2<n?90:-90,0]},scale:[0,1]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsSobek"},enumerable:!1,configurable:!0}),t}(Se),Xe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return e.forEach((function(e){e.style.transformOrigin="100% 0%"})),{targets:e,duration:500,easing:"easeOutExpo",delay:function(e,t){return 20*t},opacity:{value:[0,1],duration:400,easing:"linear"},rotateZ:[45,0]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsPtah"},enumerable:!1,configurable:!0}),t}(Se),Ve=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:800,easing:"easeInOutQuart",delay:function(e,t){return 75*t},opacity:{value:[0,1],easing:"linear"},scale:[.8,1]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsBes"},enumerable:!1,configurable:!0}),t}(Se),Ye=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:500,delay:function(e,t){return 50*t},opacity:{value:[0,1],duration:400,easing:"linear"},translateY:[100,0],scale:[.8,1]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsSeker"},enumerable:!1,configurable:!0}),t}(Se),ze=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:900,easing:"easeOutCubic",delay:function(e,t){return 400+100*t},opacity:{value:1,duration:1,easing:"linear"},scale:[.8,1]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsNut"},enumerable:!1,configurable:!0}),t}(Se),Ke=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ie(t,e),t.prototype.getOptions=function(e){return{targets:e,duration:800,delay:function(e,t){return 150*t+800},opacity:{value:[0,1],easing:"linear"},scale:[.5,1]}},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimejsNut"},enumerable:!1,configurable:!0}),t}(Se),Ze=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),qe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ze(t,e),t.prototype.init=function(){this._count=0,this.onkey=this.onkey.bind(this)},t.prototype.startHandler=function(){this.log("startHandler "+this.className),this.note.on(P.NOTE_KEYDOWN,this.onkey)},t.prototype.stopHandler=function(){this.log("startHandler "+this.className),this.note.removeListener(P.NOTE_KEYDOWN,this.onkey)},t.prototype.startAnime=function(e,t){},t.prototype.stopAnime=function(e){},t.prototype.previewAnimeObject=function(e){var t=this,n=this.note.getClassType(Se.getClassType(),e);if(n&&n.getOptions){var o=this.note.getHandlerByName("SelectionHandler");this._preAnim&&(this._preAnim.seek(this._preAnim.duration),this._preAnim&&we.remove(this._preAnim.animatables),o&&(o.render.style.display="block"));var r=this.note.getNodeSelected();r&&0!=r.length||(r=this.note.getPageSelected().getChild());var i=[];r.forEach((function(e){i.push(e.renderContent)}));var u=n.getOptions(i);u.complete=function(e){o&&(o.render.style.display="block"),delete t._preAnim},o&&(o.render.style.display="none"),this._preAnim=we(u)}},t.prototype.previewAnimeText=function(e,t){},t.prototype.onkey=function(e){var t=this.note.keydowns,n=["AnimejsHapi","AnimejsAmun","AnimejsKek","AnimejsIsis","AnimejsMontu","AnimejsOsiris","AnimejsSatet","AnimejsAtum","AnimejsRa","AnimejsSobek","AnimejsPtah","AnimejsBes","AnimejsSeker","AnimejsNut","AnimejsShu"];"a,1"==t&&(this.previewAnimeObject(n[this._count%n.length]),this._count++)},Object.defineProperty(t.prototype,"className",{get:function(){return"AnimeHandler"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){return"AnimeHandler"},enumerable:!1,configurable:!0}),t}(N);return t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,