!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.nCmd=e():t.nCmd=e()}(self,(()=>(()=>{"use strict";var t={d:(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{BringBack:()=>S,BringDown:()=>x,BringFront:()=>M,BringUp:()=>H,Copy:()=>G,Delete:()=>B,Duplicate:()=>U,Group:()=>X,HorizonAlignCmd:()=>W,Lock:()=>Y,Paste:()=>J,Redo:()=>tt,Undo:()=>Q,Ungroup:()=>ot,Unlock:()=>rt,VerticalAlignCmd:()=>ct,ZoomIn:()=>pt,ZoomOut:()=>at});var o,n=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),r=function(t,e,o,n){var r,i=arguments.length,c=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,e,o,n);else for(var u=t.length-1;u>=0;u--)(r=t[u])&&(c=(i<3?r(c):i>3?r(e,o,c):r(e,o))||c);return i>3&&c&&Object.defineProperty(e,o,c),c},i=function(){function t(){this._cBind={}}return t.prototype.pushBind=function(t,e){this._cBind[t]||(this._cBind[t]=[]);var o=e.prototype.className;o&&(this._cBind[t].push({c:e,name:o}),window[t]&&this.doBind(t))},t.prototype.doBind=function(t){if(this._cBind[t]&&Array.isArray(this._cBind[t])&&window[t])for(var e=this._cBind[t];e.length>0;){var o=e.pop(),n=window[t][o.name];if(n){var r=Object.getOwnPropertyDescriptors(n.prototype);for(var i in r)"function"==typeof r[i].set&&Object.defineProperty(o.c.prototype,i,{set:r[i].set,enumerable:!0,configurable:!0}),"function"==typeof r[i].get&&Object.defineProperty(o.c.prototype,i,{get:r[i].get,enumerable:!0,configurable:!0}),r[i].value&&"function"==typeof r[i].value&&(o.c.prototype[i]=n.prototype[i]);for(var i in n)o.c[i]=n[i]}}},t}();function c(t,e){return function(e,o){e.prototype.className&&window.NoteBinder.pushBind(t,e)}}window.NoteBinder||(window.NoteBinder=new i);var u,p,f,a,l="nCore",y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.getClassName=function(){},e.getClassType=function(){},e.prototype.init=function(){},e.prototype.getData=function(){},e.prototype.setData=function(t,e){},e.prototype.export=function(){},e.prototype.setHis=function(t){},e.prototype.getHis=function(){},e.prototype.getDescriptor=function(){},e.prototype.setNote=function(t){},e.prototype.getNote=function(){},e.prototype.getConfig=function(){},e.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},e.prototype.renderName=function(){},e.prototype.renderTags=function(){},e.prototype.setTag=function(t){},e.prototype.removeTag=function(t){},e.prototype.hasTag=function(t){},Object.defineProperty(e.prototype,"name",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tags",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastHis",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"ClassNote"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"note",{get:function(){},enumerable:!1,configurable:!0}),e=r([c(l)],e)}(function(){function t(){this._id=e.genId(this.classType),this._events={}}var e;return e=t,t.genId=function(t){for(var o="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=n.length,i=0;i<6;i++)o+=n.charAt(Math.floor(Math.random()*r));return e._count=e._count>=Number.MAX_VALUE?0:e._count+1,o=t+"_"+e._count+"_"+o+"_"+(new Date).getTime()},t.prototype.on=function(t,e,o){},t.prototype.removeListener=function(t,e,o){},t.prototype.emit=function(t){for(var e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o]},t.prototype.getId=function(){},Object.defineProperty(t.prototype,"className",{get:function(){return"ClassBase"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t._count=0,t=e=r([c(l)],t)}()),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),Object.defineProperty(e.prototype,"className",{get:function(){return"Cmd"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=r([c(l)],e)}(y);!function(t){t.UNKNOW="unknow",t.NUMBER="number",t.STRING="string",t.BOOLEAN="boolean",t.ARRAY="array",t.BIGINT="bigint",t.OBJECT="object"}(u||(u={})),function(t){t.COLOR="COLOR",t.DATETIME="DATETIME"}(p||(p={})),function(t){t.GET="GET",t.SET="SET",t.EXPO="EXPO",t.LANG="LANG"}(f||(f={})),function(t){t.UI="UI",t.HANDLER="HANDLER",t.RENDER="RENDER",t.SET="SET",t.GET="GET"}(a||(a={}));(function(){function t(){}t=r([c(l)],t)})(),function(){function t(){}t=r([c(l)],t)}(),function(){function t(){}t=r([c(l)],t)}(),function(){function t(){}t.classDes=function(){},t.removeProDes=function(t){},t.number=function(t){},t.string=function(t){},t.stringColor=function(t){},t.stringDateTime=function(t){},t.boolean=function(t){},t.object=function(t){},t.array=function(t){},t.render=function(t){},t.scrColor=function(){},t.srcDateTime=function(){},t.src=function(t){},t.notSet=function(){},t.notExpo=function(){},t.notGet=function(){},t.language=function(){},t.funchandler=function(){},t.funcrender=function(){},t.funcget=function(){},t.funcset=function(){},t=r([c(l)],t)}();var d,g,b,h,_,O,m,E,P,N,T,v,C=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.start=function(){},e.prototype.stop=function(){},e.prototype.isRunning=function(){},Object.defineProperty(e.prototype,"autoStart",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Handler"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=r([c(l)],e)}(y);!function(t){t[t.TOP=0]="TOP",t[t.MID_TOP=1]="MID_TOP",t[t.RIGHT=2]="RIGHT",t[t.MID_RIGHT=3]="MID_RIGHT",t[t.BOTTOM=4]="BOTTOM",t[t.MID_BOTTOM=5]="MID_BOTTOM",t[t.LEFT=6]="LEFT",t[t.MID_LEFT=7]="MID_LEFT",t[t.MID_CENTER=8]="MID_CENTER"}(d||(d={})),function(t){t.EXPORT="EXPORT",t.LANG="LANG"}(g||(g={})),function(t){t.LEFT="left",t.RIGHT="right",t.CENTER="center"}(b||(b={})),function(t){t.TOP="top",t.BOTTOM="bottom",t.CENTER="center"}(h||(h={})),function(t){t.EDIT="edit",t.VIEW="view",t.COMMENT="comment"}(_||(_={})),function(t){t.FIT_WIDTH="fit_width",t.FIT_HEIGHT="fit_height",t.FIT_CONTENT="fit_content",t.FIT_SIZE="fit_size",t.FIT_AUTO="fit_auto"}(O||(O={})),function(t){t.NOTLOAD="notload",t.LOADING="loading",t.LOADFAIL="loadfail",t.LOADED="loaded"}(m||(m={})),function(t){t.UNKNOW="",t.IMAGE="image",t.VIDEO="video",t.AUDIO="audio",t.PDF="pdf",t.DOCX="docx",t.PPTX="pptx",t.XLSX="xlsx",t.LOTTIEANIM="lottieAnim",t.WEBVIEW="webview"}(E||(E={})),function(t){t.TOUCH="touch",t.MOUSE="mouse"}(P||(P={})),function(t){t.READY="ready",t.LOAD_EVENT="load_event",t.MODULE_CHANGE="module_change",t.MODULE_LOADED="module_loaded",t.MODULE_LOADFAIL="module_loadfail",t.NOTE_SELECTION_START="note_selection_start",t.NOTE_SELECTION_MOVING="note_selection_moving",t.NOTE_SELECTION_END="note_selection_end",t.NOTE_NODE_SELECTED="note_node_selected",t.NOTE_PAGE_SELECTED="note_page_selected",t.NOTE_PAGE_VIEW_CHANGE="note_page_view_change",t.NOTE_PAGE_CHANGE="note_page_change",t.NOTE_PAGE_ADD="note_page_add",t.NOTE_PAGE_REMOVE="note_page_remove",t.PAGE_CHANGE="page_change",t.NOTE_HANDLER_RENDER_CHANGE="note_handler_render_change",t.NOTE_ZOOM_CHANGE="note_zoom_change",t.NOTE_KEYUP="note_keyup",t.NOTE_KEYDOWN="note_keydown",t.TEXT_INPUT_FOCUS="text_input_focus",t.TEXT_INPUT_BLUR="text_input_blur",t.NODE_CHANGE="node_change",t.NODE_SIZE_CHANGE="node_size_change",t.NODE_TRANSFORM_CHANGE="node_transform_change",t.NODE_MOUSE_OVER="node_mouse_over",t.NODE_MOUSE_OUT="node_mouse_out",t.NODE_MOUSE_MOVE="node_mouse_move",t.NODE_MOUSE_DOWN="node_mouse_down",t.NODE_MOUSE_UP="node_mouse_up",t.NODE_OVER="node_over",t.NODE_OUT="node_out",t.NODE_MOVE="node_move",t.NODE_DOWN="node_down",t.NODE_UP="node_up",t.NODE_CLICK="node_click",t.NODE_DBLCLICK="node_dblclick",t.NODE_MULTICLICK="node_multiclick",t.NODE_MOUSE_CLICK="node_mouse_click",t.NODE_MOUSE_DBLCLICK="node_mouse_dblclick",t.NOTE_CMD_CHANGE="note_cmd_change"}(N||(N={})),function(t){t.SHIFT="shift",t.META="meta",t.CONTROL="control",t.ALT="alt"}(T||(T={})),function(t){t.UIPAGE="UIPage",t.UINODE="UINode",t.NOTE="Note",t.CMD="Cmd",t.HANDLER="Handler"}(v||(v={}));var j=function(){function t(){}return Object.defineProperty(t.prototype,"className",{get:function(){return"Logger"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"getType",{get:function(){},enumerable:!1,configurable:!0}),t=r([c(l)],t)}(),A=(function(t){function e(e){var o=t.call(this)||this;return console.log("Initing Note Version "+(null==e?void 0:e.version)),(null==e?void 0:e.coreUrl)?o.loadCore((null==e?void 0:e.coreUrl)+"?ver="+(null==e?void 0:e.version),(function(){o.initNote(e)})):o.initNote(e),o}n(e,t),e.prototype.defaultCheckTouchCapable=function(t){},e.prototype.defaultCheckIsMobile=function(t){},e.prototype.defaultCheckIsWebview=function(t){},e.prototype.loadCore=function(t,e){console.log("load module note core "+t);var o=document.createElement("script");o.onload=function(){window.nCore;window.NoteBinder&&window.NoteBinder.doBind("nCore"),e()},o.onerror=function(){console.log("Load module core error !")},o.src=t,document.head.appendChild(o)},e.prototype.initNote=function(t){},e.prototype._parseModuleConfig=function(t){},e.prototype._mergeModuleData=function(t,e){},e.prototype.addModule=function(t){},e.prototype.loadModule=function(t){},e.prototype.getModuleData=function(t){},e.prototype.getStatusModule=function(t){},e.prototype.checkDependenciesModuleLoaded=function(t){},e.prototype._findAndLoadModule=function(){},e.prototype._loadJs=function(t){},e.prototype._onLoadModuleFinish=function(t,e,o){},e.prototype._doBindModule=function(t){},Object.defineProperty(e.prototype,"version",{get:function(){},enumerable:!1,configurable:!0}),e.prototype._start=function(){},e.prototype._initUI=function(){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.appendHandlerRender=function(t){},e.prototype.removeHandlerRender=function(t){},e.prototype.setTextFocus=function(t){},e.prototype.getTextFocus=function(){},e.prototype.load=function(t){},e.prototype.export=function(){},e.prototype.reset=function(){},e.prototype.setClipboardData=function(t,e){},e.prototype.getClipboardData=function(t){},e.prototype.getHis=function(){},e.prototype.setHis=function(t){},e.prototype.onPageChange=function(t){},e.prototype.saveHistory=function(t){},e.prototype.undo=function(){},e.prototype.redo=function(){},e.prototype.doSetHisData=function(t){},e.prototype.getRegisterInstance=function(){},e.prototype.setConfig=function(t){},e.prototype.getConfig=function(){},Object.defineProperty(e.prototype,"config",{get:function(){},enumerable:!1,configurable:!0}),e.prototype._applyConfig=function(){},Object.defineProperty(e.prototype,"zoom",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.isTouchCapable=function(){},e.prototype.isMobile=function(){},e.prototype.isWebview=function(){},e.prototype.enableLog=function(){},e.prototype.disableLog=function(){},e.prototype.setLogger=function(t){},e.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},e.prototype.registerCmd=function(t,e){},e.prototype.unregisterCmd=function(t){},e.prototype.registerCmds=function(t){},e.prototype.unregisterCmds=function(t){},e.prototype.getAllRegisterCmdName=function(){},e.prototype.getRegisterCmd=function(){},e.prototype.doCmd=function(t,e){},e.prototype.registerHandler=function(t,e){},e.prototype.unregisterHandler=function(t){},e.prototype.registerHandlers=function(t){},e.prototype.unregisterHandlers=function(t){},e.prototype.getHandlerByName=function(t){},e.prototype.getAllHandler=function(){},e.prototype.getAllRegisterHandlerName=function(){},e.prototype.registerNode=function(t,e){},e.prototype.unregisterNode=function(t){},e.prototype.registerNodes=function(t){},e.prototype.unregisterNodes=function(t){},e.prototype.getAllRegisterNodeName=function(){},e.prototype.addNode=function(t,e){},e.prototype.getNodeSelected=function(){},e.prototype.setNodeSelected=function(t){},e.prototype.createNode=function(t){},e.prototype.getIdsOfListNode=function(t){},e.prototype.compareListNode=function(t,e){},e.prototype.addPage=function(t,e){},e.prototype.removePage=function(t){},e.prototype.removeAllPage=function(){},e.prototype.getIndexPage=function(t){},e.prototype.swapIndexPage=function(t,e){},e.prototype.getPageSelected=function(){},e.prototype.setPageSelected=function(t){},e.prototype.getPages=function(){},e.prototype.registerClassType=function(t,e){},e.prototype.unregisterClassType=function(t,e){},e.prototype.registerClassTypes=function(t){},e.prototype.unregisterClassTypes=function(t){},e.prototype.getClassType=function(t,e){},e.prototype.getAllNameClassType=function(t){},e.prototype.loadJs=function(t,e,o){},e.prototype.loadCss=function(t){},e.prototype.loadFont=function(t,e,o){},e.prototype._initKeyboard=function(){},e.prototype._onkeypress=function(t){},e.prototype._onkeydown=function(t){},e.prototype._onkeyup=function(t){},Object.defineProperty(e.prototype,"keydowns",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_shift",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_meta",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_ctrl",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_alt",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Note"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=r([c(l)],e)}(y),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}n(e,t),e.prototype.init=function(){},e.prototype.startHandler=function(){},e.prototype.stopHandler=function(){},e.prototype.createBt=function(t,e){},e.prototype.showFrame=function(){},e.prototype.hideFrame=function(){},e.prototype.iframeMessages=function(t){},e.prototype.onBtCancel=function(){},e.prototype.onBtDone=function(){},Object.defineProperty(e.prototype,"iframePluginUrl",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"PHandler"},enumerable:!1,configurable:!0}),e=r([c(l)],e)}(C),function(){function t(){}Object.defineProperty(t.prototype,"className",{get:function(){return"Sanitizer"},enumerable:!1,configurable:!0}),t.num=function(t){},t.str=function(t){},t.str_hexColor=function(t){},t.str_style=function(t){},t.str_url=function(t,e,o){},t.sanitizeString=function(t){},t.sanitizeHtml=function(t){},t.sanitizeSvg=function(t){},t.sanitizeMathML=function(t){},t=r([c(l)],t)}(),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}n(e,t),e.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},Object.defineProperty(e.prototype,"className",{get:function(){return"TimestampLogger"},enumerable:!1,configurable:!0}),e=r([c(l)],e)}(j),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}n(e,t),e.prototype.init=function(){},e.prototype.renderAll=function(){},e.prototype.getData=function(){},e.prototype._checkNeedSaveHis=function(t){},e.prototype.setData=function(t,e){},e.prototype.export=function(){},e.prototype.getHis=function(){},e.prototype.setHis=function(t){},e.prototype.addChild=function(t){},e.prototype.addToParent=function(t){},e.prototype.addChilds=function(t){},e.prototype.getParent=function(){},e.prototype.removeFromParent=function(){},e.prototype.removeChild=function(t){},e.prototype.removeAllChild=function(){},e.prototype.getChild=function(){},e.prototype.clone=function(){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"renderContent",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.anchorable=function(){},e.prototype.getThumb=function(){},e.prototype.calSize=function(){},Object.defineProperty(e.prototype,"childData",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"childIds",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),e.prototype.css=function(t,e){},e.prototype.getCss=function(t){},e.prototype.renderStyle=function(){},e.prototype.renderCssClass=function(){},e.prototype.renderSize=function(){},e.prototype.renderTransform=function(){},e.prototype.renderTransformOrigin=function(){},e.prototype.setSize=function(t,e){},e.prototype.setTransformOriginPoint=function(t,e){},e.prototype.setTransformOrigin=function(t,e){},e.prototype.onResize=function(){},e.prototype.onTransform=function(){},e.prototype.getBorderWidth=function(){},Object.defineProperty(e.prototype,"x",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originX",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originY",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deltaPos",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deltaTime",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"resizable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"movable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rotatable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderWidth",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderRadius",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderStyle",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderColor",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"enabled",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selectable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"hisSetting",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"scale",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rotate",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"opacity",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"zIndex",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lock",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"style",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cssClass",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"centerPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"topPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rightPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"bottomPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"leftPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"boundingBox",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastMouseDown",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.initEventListener=function(){},e.prototype.addMouseEvent=function(){},e.prototype.removeMouseEvent=function(){},e.prototype.addTouchEvent=function(){},e.prototype.removeTouchEvent=function(){},e.prototype._mouseover=function(t){},e.prototype._mouseout=function(t){},e.prototype._mousemove=function(t){},e.prototype._mousedown=function(t){},e.prototype._mouseup=function(t){},e.prototype._nodeClick=function(t){},e.prototype._nodeDbClick=function(t){},e.prototype._nodeMultiClick=function(t){},e.prototype._click=function(t){},e.prototype._dblclick=function(t){},e.prototype._touchstart=function(t){},e.prototype._touchmove=function(t){},e.prototype._touchcancel=function(t){},e.prototype._touchend=function(t){},e.prototype._nodeDown=function(t){},e.prototype._nodeUp=function(t){},Object.defineProperty(e.prototype,"className",{get:function(){return"UINode"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=r([c(l)],e)}(y),function(){function t(){}return Object.defineProperty(t.prototype,"className",{get:function(){return"Utils"},enumerable:!1,configurable:!0}),t.addArrayPrototype=function(){},t.removeArrayPrototype=function(){},t.notNull=function(t){},t.isNull=function(t){},t.randrom=function(t,e){},t.merge=function(t,e){},t.deepMerge=function(t,e){},t.deepClone=function(t){},t.mergeNotNull=function(t,e){},t.mergePartial=function(t,e){},t.toArr=function(t){},t.getTransformValue=function(t){},t.transformToCss=function(t){},t.inserClassCss=function(t,e){},t.removeAllChildHTMLElement=function(t,e){},t.pointToPage=function(t,e){},t.getDistance=function(t,e,o,n){},t.getBoundingBox=function(t,e){},t.getOriginBoxOfBoundingBox=function(t,e){},t.pointInRect=function(t,e,o){},t.rectInRect=function(t,e){},t.pointRighAngle=function(t,e,o,n,r,i){},t.pointRighAngleRotate=function(t,e,o,n,r){},t.angleTo180=function(t){},t.pointLineInOrder=function(t,e,o,n,r,i){},t.angleOf=function(t,e,o,n){},t.getPointRotate=function(t,e,o,n,r){},t.getRectRotate=function(t,e,o,n){},t.getNodeConner=function(t){},t.createPointTest=function(t,e,o,n,r){},t.makeDragable=function(t){},t.clearDragable=function(t){},t.makeIconButtom=function(t,e,o,n){},t.cropCanvasTransparent=function(t,e){},t=r([c(l)],t)}()),w=(function(){function t(){}t.prototype.getSqDist=function(t,e){},t.prototype.getSqSegDist=function(t,e,o){},t.prototype.simplifyRadialDist=function(t,e){},t.prototype.simplifyDPStep=function(t,e,o,n,r){},t.prototype.simplifyDouglasPeucker=function(t,e){},t.prototype.simplify=function(t,e,o){},Object.defineProperty(t.prototype,"className",{get:function(){return"Simplify"},enumerable:!1,configurable:!0}),t=r([c(l)],t)}(),function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}()),S=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return w(e,t),e.prototype.do=function(){var t=this.note.getNodeSelected();if(0!=t.length){for(var e=t[0].getParent(),o=t.concat([]),n=0;n<o.length;n++)for(var r=n;r<o.length;r++)if(o[n].zIndex>o[r].zIndex){var i=o[n];o[n]=o[r],o[r]=i}var c=o.concat([]);for(n=0;n<e.getChild().length;n++){var u=e.getChild()[n];o.indexOf(u)<0&&c.push(u)}var p=0;c.forEach((function(t){t.zIndex=p,e.getChild()[p]=t,p++})),this.note.emit(N.PAGE_CHANGE,e)}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"b"],[T.CONTROL,"b"],[T.SHIFT,"b"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"BringBack"},enumerable:!1,configurable:!0}),e}(s),I=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),x=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return I(e,t),e.prototype.do=function(){var t=this.note.getNodeSelected();if(0!=t.length){for(var e=t[0].getParent(),o=t.concat([]),n=0;n<o.length;n++)for(var r=n;r<o.length;r++)if(o[n].zIndex>o[r].zIndex){var i=o[n];o[n]=o[r],o[r]=i}var c=[],u=e.getChild().concat([]);for(n=0;n<u.length;n++){var p=u[n];if(n<u.length-1)if(o.indexOf(p)>=0)c.addFilter(p);else{var f=u[n+1];o.indexOf(f)>=0?(c.addFilter(f),u[n+1]=p):c.addFilter(p)}else c.addFilter(p)}var a=0;c.forEach((function(t){t.zIndex=a,e.getChild()[a]=t,a++})),this.note.emit(N.PAGE_CHANGE,e)}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"d"],[T.CONTROL,"d"],[T.SHIFT,"d"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"BringDown"},enumerable:!1,configurable:!0}),e}(s),D=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),M=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return D(e,t),e.prototype.do=function(){var t=this.note.getNodeSelected();if(0!=t.length){for(var e=t[0].getParent(),o=t.concat([]),n=0;n<o.length;n++)for(var r=n;r<o.length;r++)if(o[n].zIndex>o[r].zIndex){var i=o[n];o[n]=o[r],o[r]=i}var c=[];for(n=0;n<e.getChild().length;n++){var u=e.getChild()[n];o.indexOf(u)<0&&c.push(u)}c=c.concat(o);var p=0;c.forEach((function(t){t.zIndex=p,e.getChild()[p]=t,p++})),this.note.emit(N.PAGE_CHANGE,e)}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"f"],[T.CONTROL,"f"],[T.SHIFT,"f"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"BringFront"},enumerable:!1,configurable:!0}),e}(s),R=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),H=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return R(e,t),e.prototype.do=function(){var t=this.note.getNodeSelected();if(0!=t.length){for(var e=t[0].getParent(),o=t.concat([]),n=0;n<o.length;n++)for(var r=n;r<o.length;r++)if(o[n].zIndex>o[r].zIndex){var i=o[n];o[n]=o[r],o[r]=i}var c=[],u=e.getChild().concat([]);for(n=u.length-1;n>=0;n--){var p=u[n];if(n>0)if(o.indexOf(p)>=0)c.addFilter(p);else{var f=u[n-1];o.indexOf(f)>=0?(c.addFilter(f),u[n-1]=p):c.addFilter(p)}else c.addFilter(p)}for(n=c.length-1;n>=0;n--)c[n].zIndex=c.length-1-n,e.getChild()[c.length-1-n]=c[n];this.note.emit(N.PAGE_CHANGE,e)}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"u"],[T.CONTROL,"u"],[T.SHIFT,"u"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"BringUp"},enumerable:!1,configurable:!0}),e}(s),L=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),G=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return L(e,t),e.prototype.do=function(){var t=this.note.getNodeSelected();if(0!=t.length){var e={page:t[0].getParent(),childData:[]};t.forEach((function(t){var o=t.export();e.childData.push(o)})),this.note.setClipboardData("CopyData",e)}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"c"],[T.SHIFT,"c"],[T.CONTROL,"c"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Copy"},enumerable:!1,configurable:!0}),e}(s),F=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),B=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return F(e,t),e.prototype.do=function(){if(null==this.note.getTextFocus()||0!=this.note.key_shift){var t=this.note.getNodeSelected();if(0!=t.length){var e=t[0].getParent();if(e){t.forEach((function(t){t.removeFromParent()}));for(var o=e.getChild(),n=0;n<o.length;n++)for(var r=n;r<o.length;r++)if(o[r].zIndex<o[n].zIndex){var i=o[n];o[n]=o[r],o[r]=i}for(n=0;n<o.length;n++)o[n].zIndex=n;this.note.setNodeSelected(),this.note.emit(N.PAGE_CHANGE,e)}}}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"backspace"],[T.SHIFT,"backspace"],[T.CONTROL,"backspace"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Delete"},enumerable:!1,configurable:!0}),e}(s),k=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),U=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return k(e,t),e.prototype.do=function(){var t=this,e=this.note.getNodeSelected();if(0!=e.length){var o=e[0].getParent();e.forEach((function(e){var n=e.export(),r=t.note.createNode(n);r&&(o.addChild(r),e.x+=15,e.y+=15)})),this.note.emit(N.PAGE_CHANGE,o)}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"d","u"],[T.SHIFT,"d","u"],[T.CONTROL,"d","u"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Duplicate"},enumerable:!1,configurable:!0}),e}(s),z=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),X=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return z(e,t),e.prototype.do=function(){var t=this.note.getNodeSelected();if(!(t.length<2)){for(var e=t[0].getParent(),o=Number.MAX_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER,r=-1,i=-1,c=t.concat([]),u=0;u<c.length;u++)for(var p=u;p<c.length;p++)if(c[p].zIndex<c[u].zIndex){var f=c[u];c[u]=c[p],c[p]=f}var a=[];c.forEach((function(t){var e=t.boundingBox;o=o>e.x?e.x:o,n=n>e.y?e.y:n,r=r<e.x+e.width?e.x+e.width:r,i=i<e.y+e.height?e.y+e.height:i;var c=t.export();a.push(c)}));var l=o,y=n,s=r-o,d=i-n;a.forEach((function(t){t.x=t.x?t.x:0,t.y=t.y?t.y:0,t.x-=l,t.y-=y})),t.forEach((function(t){t.removeFromParent()})),this.note.setNodeSelected(null);var g=this.note.createNode({className:"UIGroup",x:l,y,width:s,height:d,childData:a});e.addChild(g),this.note.setNodeSelected([g]),this.note.emit(N.PAGE_CHANGE,e)}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"g"],[T.SHIFT,"g"],[T.CONTROL,"g"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Group"},enumerable:!1,configurable:!0}),e}(s),V=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),W=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return V(e,t),e.prototype.do=function(t){this.log("do align !!!");var e=this.note.getNodeSelected();if(0!=e.length){if(t||(t=b.CENTER),1==e.length){var o=(r=e[0]).getParent(),n=r.boundingBox;return t==b.RIGHT&&(r.x+=o.width-n.width-n.x),t==b.CENTER&&(r.x=r.x+(o.width/2-(n.x+n.width/2))),t==b.LEFT&&(r.x=r.x-n.x),void this.note.emit(N.PAGE_CHANGE,o)}if(e.length>0){o=(r=e[0]).getParent();var r,i=Number.MAX_SAFE_INTEGER,c=Number.MAX_SAFE_INTEGER,u=-Number.MAX_SAFE_INTEGER,p=-Number.MAX_SAFE_INTEGER;e.forEach((function(t){var e=t.boundingBox;i=e.x<i?e.x:i,c=e.y<c?e.y:c,u=e.x+e.width>u?e.x+e.width:u,p=e.y+e.height>p?e.y+e.height:p}));var f={x:i,y:c,width:u-i,height:p-c};return e.forEach((function(e){var o=e.boundingBox;t==b.RIGHT&&(e.x+=f.x+f.width-o.width-o.x),t==b.CENTER&&(e.x+=f.x+f.width/2-(o.x+o.width/2)),t==b.LEFT&&(e.x+=f.x-o.x)})),void this.note.emit(N.PAGE_CHANGE,o)}}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"a","h"],[T.CONTROL,"a","h"],[T.SHIFT,"a","h"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"HorizonAlignCmd"},enumerable:!1,configurable:!0}),e}(s),K=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),Y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return K(e,t),e.prototype.do=function(){var t=this.note.getNodeSelected();if(0!=t.length){var e=t[0].getParent();t.forEach((function(t){t.lock=!0})),this.note.emit(N.PAGE_CHANGE,e)}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"l"],[T.SHIFT,"l"],[T.CONTROL,"l"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Lock"},enumerable:!1,configurable:!0}),e}(s),Z=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),J=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Z(e,t),e.prototype.do=function(){var t=this,e=this.note.getPageSelected(),o=this.note.getClipboardData("CopyData"),n=[];o&&Array.isArray(o.childData)&&(o.childData.forEach((function(r){var i=t.note.createNode(r);n.push(i),i&&(e!=o.page?(i.x=e.width/2-i.width/2,i.y=e.height/2-i.height/2):(i.x+=15,i.y+=15),e.addChild(i))})),o.childData.length>0&&(this.note.setNodeSelected(n),this.note.emit(N.PAGE_CHANGE,e)))},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"v"],[T.SHIFT,"v"],[T.CONTROL,"v"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Paste"},enumerable:!1,configurable:!0}),e}(s),q=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),Q=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return q(e,t),e.prototype.do=function(){this.note.undo()},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"z"],[T.SHIFT,"z"],[T.CONTROL,"z"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Undo"},enumerable:!1,configurable:!0}),e}(s),$=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),tt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return $(e,t),e.prototype.do=function(){this.note.redo()},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,T.CONTROL,"z"],[T.SHIFT,T.CONTROL,"z"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Redo"},enumerable:!1,configurable:!0}),e}(s),et=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),ot=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return et(e,t),e.prototype.do=function(){var t=this;if(1==(c=this.note.getNodeSelected()).length&&"UIGroup"==c[0].className){var e=c[0].getParent(),o=c[0],n=e.render.getBoundingClientRect(),r=(0==e.width||(n.width,e.width),0==e.height||(n.height,e.height),o.getChild()),i=[];r.forEach((function(t){var e=t.export();e.scale=A.isNull(e.scale)?1:e.scale,e.x=A.isNull(e.x)?0:e.x,e.y=A.isNull(e.y)?0:e.y,e.rotate=A.isNull(e.rotate)?0:e.rotate,e.originX=A.isNull(e.originX)?.5:e.originX,e.originY=A.isNull(e.originY)?.5:e.originY,e.rotate+=o.rotate,e.scale*=o.scale;var n={x:(e.x+e.width*e.originX-o.width/2)*o.scale,y:(e.y+e.height*e.originY-o.height/2)*o.scale};(n=A.getPointRotate(n.x,n.y,0,0,o.rotate)).x+=o.x+o.width/2,n.y+=o.y+o.height/2,e.x=n.x-e.width*e.originX,e.y=n.y-e.height*e.originY,i.push(e)})),o.removeFromParent(),this.note.setNodeSelected(null);var c=[];i.forEach((function(o){var n=t.note.createNode(o);n&&(e.addChild(n),c.push(n))})),this.note.setNodeSelected(null),this.note.emit(N.PAGE_CHANGE,e)}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"u","g"],[T.SHIFT,"u","g"],[T.CONTROL,"u","g"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Ungroup"},enumerable:!1,configurable:!0}),e}(s),nt=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),rt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return nt(e,t),e.prototype.do=function(){var t=this.note.getNodeSelected();if(0!=t.length){var e=t[0].getParent();t.forEach((function(t){t.lock=!1})),this.note.emit(N.PAGE_CHANGE,e)}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"u","l"],[T.SHIFT,"u","l"],[T.CONTROL,"u","l"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Unlock"},enumerable:!1,configurable:!0}),e}(s),it=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),ct=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return it(e,t),e.prototype.do=function(t){this.log("do align !!!!!! ");var e=this.note.getNodeSelected();if(0!=e.length){if(t||(t=h.CENTER),1==e.length){var o=(r=e[0]).getParent(),n=r.boundingBox;return t==h.BOTTOM&&(r.y+=o.height-n.height-n.y),t==h.CENTER&&(r.y=r.y+(o.height/2-(n.y+n.height/2))),t==h.TOP&&(r.y=r.y-n.y),void this.note.emit(N.PAGE_CHANGE,o)}if(e.length>0){o=(r=e[0]).getParent();var r,i=Number.MAX_SAFE_INTEGER,c=Number.MAX_SAFE_INTEGER,u=-Number.MAX_SAFE_INTEGER,p=-Number.MAX_SAFE_INTEGER;e.forEach((function(t){var e=t.boundingBox;i=e.x<i?e.x:i,c=e.y<c?e.y:c,u=e.x+e.width>u?e.x+e.width:u,p=e.y+e.height>p?e.y+e.height:p}));var f={x:i,y:c,width:u-i,height:p-c};return e.forEach((function(e){var o=e.boundingBox;t==h.BOTTOM&&(e.y+=f.y+f.height-o.height-o.y),t==h.CENTER&&(e.y+=f.y+f.height/2-(o.y+o.height/2)),t==h.TOP&&(e.y+=f.y-o.y)})),void this.note.emit(N.PAGE_CHANGE,o)}}},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"a","v"],[T.CONTROL,"a","v"],[T.SHIFT,"a","v"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"VerticalAlignCmd"},enumerable:!1,configurable:!0}),e}(s),ut=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),pt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ut(e,t),e.prototype.do=function(){this.note.zoom+=this.note.config.stepZoom},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"="],[T.META,"-","="],[T.SHIFT,"+"],[T.CONTROL,"="]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"ZoomIn"},enumerable:!1,configurable:!0}),e}(s),ft=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),at=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ft(e,t),e.prototype.do=function(){this.note.zoom-=this.note.config.stepZoom},Object.defineProperty(e.prototype,"keyShortcut",{get:function(){return[[T.META,"-"],[T.META,"=","-"],[T.SHIFT,"_"],[T.CONTROL,"-"]]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"ZoomOut"},enumerable:!1,configurable:!0}),e}(s);return e})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,