!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.nPMath=e():t.nPMath=e()}(self,(()=>(()=>{"use strict";var t={d:(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{GeogebraHandler:()=>R,UIMathML:()=>H,WirisHandler:()=>M});var n,o=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}),i=function(t,e,n,o){var i,r=arguments.length,p=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)p=Reflect.decorate(t,e,n,o);else for(var c=t.length-1;c>=0;c--)(i=t[c])&&(p=(r<3?i(p):r>3?i(e,n,p):i(e,n))||p);return r>3&&p&&Object.defineProperty(e,n,p),p},r=function(){function t(){this._cBind={}}return t.prototype.pushBind=function(t,e){this._cBind[t]||(this._cBind[t]=[]);var n=e.prototype.className;n&&(this._cBind[t].push({c:e,name:n}),window[t]&&this.doBind(t))},t.prototype.doBind=function(t){if(this._cBind[t]&&Array.isArray(this._cBind[t])&&window[t])for(var e=this._cBind[t];e.length>0;){var n=e.pop(),o=window[t][n.name];if(o){var i=Object.getOwnPropertyDescriptors(o.prototype);for(var r in i)"function"==typeof i[r].set&&Object.defineProperty(n.c.prototype,r,{set:i[r].set,enumerable:!0,configurable:!0}),"function"==typeof i[r].get&&Object.defineProperty(n.c.prototype,r,{get:i[r].get,enumerable:!0,configurable:!0}),i[r].value&&"function"==typeof i[r].value&&(n.c.prototype[r]=o.prototype[r]);for(var r in o)n.c[r]=o[r]}}},t}();function p(t,e){return function(e,n){e.prototype.className&&window.NoteBinder.pushBind(t,e)}}window.NoteBinder||(window.NoteBinder=new r);var c,u,a,f,l="nCore",s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.getClassName=function(){},e.getClassType=function(){},e.prototype.init=function(){},e.prototype.getData=function(){},e.prototype.setData=function(t,e){},e.prototype.export=function(){},e.prototype.setHis=function(t){},e.prototype.getHis=function(){},e.prototype.getDescriptor=function(){},e.prototype.setNote=function(t){},e.prototype.getNote=function(){},e.prototype.getConfig=function(){},e.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},e.prototype.renderName=function(){},e.prototype.renderTags=function(){},e.prototype.setTag=function(t){},e.prototype.removeTag=function(t){},e.prototype.hasTag=function(t){},Object.defineProperty(e.prototype,"name",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tags",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastHis",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"ClassNote"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"note",{get:function(){},enumerable:!1,configurable:!0}),e=i([p(l)],e)}(function(){function t(){this._id=e.genId(this.classType),this._events={}}var e;return e=t,t.genId=function(t){for(var n="",o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",i=o.length,r=0;r<6;r++)n+=o.charAt(Math.floor(Math.random()*i));return e._count=e._count>=Number.MAX_VALUE?0:e._count+1,n=t+"_"+e._count+"_"+n+"_"+(new Date).getTime()},t.prototype.on=function(t,e,n){},t.prototype.removeListener=function(t,e,n){},t.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n]},t.prototype.getId=function(){},Object.defineProperty(t.prototype,"className",{get:function(){return"ClassBase"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t._count=0,t=e=i([p(l)],t)}());!function(t){function e(){return null!==t&&t.apply(this,arguments)||this}o(e,t),Object.defineProperty(e.prototype,"className",{get:function(){return"Cmd"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=i([p(l)],e)}(s);!function(t){t.UNKNOW="unknow",t.NUMBER="number",t.STRING="string",t.BOOLEAN="boolean",t.ARRAY="array",t.BIGINT="bigint",t.OBJECT="object"}(c||(c={})),function(t){t.COLOR="COLOR",t.DATETIME="DATETIME"}(u||(u={})),function(t){t.GET="GET",t.SET="SET",t.EXPO="EXPO",t.LANG="LANG"}(a||(a={})),function(t){t.UI="UI",t.HANDLER="HANDLER",t.RENDER="RENDER",t.SET="SET",t.GET="GET"}(f||(f={}));(function(){function t(){}t=i([p(l)],t)})(),function(){function t(){}t=i([p(l)],t)}(),function(){function t(){}t=i([p(l)],t)}(),function(){function t(){}t.classDes=function(){},t.removeProDes=function(t){},t.number=function(t){},t.string=function(t){},t.stringColor=function(t){},t.stringDateTime=function(t){},t.boolean=function(t){},t.object=function(t){},t.array=function(t){},t.render=function(t){},t.scrColor=function(){},t.srcDateTime=function(){},t.src=function(t){},t.notSet=function(){},t.notExpo=function(){},t.notGet=function(){},t.language=function(){},t.funchandler=function(){},t.funcrender=function(){},t.funcget=function(){},t.funcset=function(){},t=i([p(l)],t)}();var y,g,d,h,m,b,_,O,E,T,N,P,v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.start=function(){},e.prototype.stop=function(){},e.prototype.isRunning=function(){},Object.defineProperty(e.prototype,"autoStart",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Handler"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=i([p(l)],e)}(s);!function(t){t[t.TOP=0]="TOP",t[t.MID_TOP=1]="MID_TOP",t[t.RIGHT=2]="RIGHT",t[t.MID_RIGHT=3]="MID_RIGHT",t[t.BOTTOM=4]="BOTTOM",t[t.MID_BOTTOM=5]="MID_BOTTOM",t[t.LEFT=6]="LEFT",t[t.MID_LEFT=7]="MID_LEFT",t[t.MID_CENTER=8]="MID_CENTER"}(y||(y={})),function(t){t.EXPORT="EXPORT",t.LANG="LANG"}(g||(g={})),function(t){t.LEFT="left",t.RIGHT="right",t.CENTER="center"}(d||(d={})),function(t){t.TOP="top",t.BOTTOM="bottom",t.CENTER="center"}(h||(h={})),function(t){t.EDIT="edit",t.VIEW="view",t.COMMENT="comment"}(m||(m={})),function(t){t.FIT_WIDTH="fit_width",t.FIT_HEIGHT="fit_height",t.FIT_CONTENT="fit_content",t.FIT_SIZE="fit_size",t.FIT_AUTO="fit_auto"}(b||(b={})),function(t){t.NOTLOAD="notload",t.LOADING="loading",t.LOADFAIL="loadfail",t.LOADED="loaded"}(_||(_={})),function(t){t.UNKNOW="",t.IMAGE="image",t.VIDEO="video",t.AUDIO="audio",t.PDF="pdf",t.DOCX="docx",t.PPTX="pptx",t.XLSX="xlsx",t.LOTTIEANIM="lottieAnim",t.WEBVIEW="webview"}(O||(O={})),function(t){t.TOUCH="touch",t.MOUSE="mouse"}(E||(E={})),function(t){t.READY="ready",t.LOAD_EVENT="load_event",t.MODULE_CHANGE="module_change",t.MODULE_LOADED="module_loaded",t.MODULE_LOADFAIL="module_loadfail",t.NOTE_SELECTION_START="note_selection_start",t.NOTE_SELECTION_MOVING="note_selection_moving",t.NOTE_SELECTION_END="note_selection_end",t.NOTE_NODE_SELECTED="note_node_selected",t.NOTE_PAGE_SELECTED="note_page_selected",t.NOTE_PAGE_VIEW_CHANGE="note_page_view_change",t.NOTE_PAGE_CHANGE="note_page_change",t.NOTE_PAGE_ADD="note_page_add",t.NOTE_PAGE_REMOVE="note_page_remove",t.PAGE_CHANGE="page_change",t.NOTE_HANDLER_RENDER_CHANGE="note_handler_render_change",t.NOTE_ZOOM_CHANGE="note_zoom_change",t.NOTE_KEYUP="note_keyup",t.NOTE_KEYDOWN="note_keydown",t.TEXT_INPUT_FOCUS="text_input_focus",t.TEXT_INPUT_BLUR="text_input_blur",t.NODE_CHANGE="node_change",t.NODE_SIZE_CHANGE="node_size_change",t.NODE_TRANSFORM_CHANGE="node_transform_change",t.NODE_MOUSE_OVER="node_mouse_over",t.NODE_MOUSE_OUT="node_mouse_out",t.NODE_MOUSE_MOVE="node_mouse_move",t.NODE_MOUSE_DOWN="node_mouse_down",t.NODE_MOUSE_UP="node_mouse_up",t.NODE_OVER="node_over",t.NODE_OUT="node_out",t.NODE_MOVE="node_move",t.NODE_DOWN="node_down",t.NODE_UP="node_up",t.NODE_CLICK="node_click",t.NODE_DBLCLICK="node_dblclick",t.NODE_MULTICLICK="node_multiclick",t.NODE_MOUSE_CLICK="node_mouse_click",t.NODE_MOUSE_DBLCLICK="node_mouse_dblclick",t.NOTE_END_UNDO="note_end_undo",t.NOTE_END_REDO="note_end_redo",t.NOTE_CMD_CHANGE="note_cmd_change"}(T||(T={})),function(t){t.SHIFT="shift",t.META="meta",t.CONTROL="control",t.ALT="alt"}(N||(N={})),function(t){t.UIPAGE="UIPage",t.UINODE="UINode",t.NOTE="Note",t.CMD="Cmd",t.HANDLER="Handler"}(P||(P={}));var I=function(){function t(){}return Object.defineProperty(t.prototype,"className",{get:function(){return"Logger"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"getType",{get:function(){},enumerable:!1,configurable:!0}),t=i([p(l)],t)}(),D=(function(t){function e(e){var n=t.call(this)||this;return console.log("Initing Note Version "+(null==e?void 0:e.version)),(null==e?void 0:e.coreUrl)?n.loadCore((null==e?void 0:e.coreUrl)+"?ver="+(null==e?void 0:e.version),(function(){n.initNote(e)})):n.initNote(e),n}o(e,t),e.prototype.defaultCheckTouchCapable=function(t){},e.prototype.defaultCheckIsMobile=function(t){},e.prototype.defaultCheckIsWebview=function(t){},e.prototype.loadCore=function(t,e){console.log("load module note core "+t);var n=document.createElement("script");n.onload=function(){window.nCore;window.NoteBinder&&window.NoteBinder.doBind("nCore"),e()},n.onerror=function(){console.log("Load module core error !")},n.src=t,document.head.appendChild(n)},e.prototype.initNote=function(t){},e.prototype._parseModuleConfig=function(t){},e.prototype._mergeModuleData=function(t,e){},e.prototype.addModule=function(t){},e.prototype.loadModule=function(t){},e.prototype.getModuleData=function(t){},e.prototype.getStatusModule=function(t){},e.prototype.checkDependenciesModuleLoaded=function(t){},e.prototype._findAndLoadModule=function(){},e.prototype._loadJs=function(t){},e.prototype._onLoadModuleFinish=function(t,e,n){},e.prototype._doBindModule=function(t){},Object.defineProperty(e.prototype,"version",{get:function(){},enumerable:!1,configurable:!0}),e.prototype._start=function(){},e.prototype._initUI=function(){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.appendHandlerRender=function(t){},e.prototype.removeHandlerRender=function(t){},e.prototype.setTextFocus=function(t){},e.prototype.getTextFocus=function(){},e.prototype.load=function(t){},e.prototype.export=function(){},e.prototype.reset=function(){},e.prototype.setClipboardData=function(t,e){},e.prototype.getClipboardData=function(t){},e.prototype.getHis=function(){},e.prototype.setHis=function(t){},e.prototype.onPageChange=function(t){},e.prototype.saveHistory=function(t){},e.prototype.undo=function(){},e.prototype.redo=function(){},e.prototype.doSetHisData=function(t){},e.prototype.getRegisterInstance=function(){},e.prototype.setConfig=function(t){},e.prototype.getConfig=function(){},Object.defineProperty(e.prototype,"baseUrl",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"config",{get:function(){},enumerable:!1,configurable:!0}),e.prototype._applyConfig=function(){},Object.defineProperty(e.prototype,"zoom",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.isTouchCapable=function(){},e.prototype.isMobile=function(){},e.prototype.isWebview=function(){},e.prototype.enableLog=function(){},e.prototype.disableLog=function(){},e.prototype.setLogger=function(t){},e.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},e.prototype.registerCmd=function(t,e){},e.prototype.unregisterCmd=function(t){},e.prototype.registerCmds=function(t){},e.prototype.unregisterCmds=function(t){},e.prototype.getAllRegisterCmdName=function(){},e.prototype.getRegisterCmd=function(){},e.prototype.doCmd=function(t,e){},e.prototype.registerHandler=function(t,e){},e.prototype.unregisterHandler=function(t){},e.prototype.registerHandlers=function(t){},e.prototype.unregisterHandlers=function(t){},e.prototype.getHandlerByName=function(t){},e.prototype.getAllHandler=function(){},e.prototype.getAllRegisterHandlerName=function(){},e.prototype.registerNode=function(t,e){},e.prototype.unregisterNode=function(t){},e.prototype.registerNodes=function(t){},e.prototype.unregisterNodes=function(t){},e.prototype.getAllRegisterNodeName=function(){},e.prototype.addNode=function(t,e){},e.prototype.getNodeSelected=function(){},e.prototype.setNodeSelected=function(t){},e.prototype.createNode=function(t){},e.prototype.getIdsOfListNode=function(t){},e.prototype.compareListNode=function(t,e){},e.prototype.addPage=function(t,e){},e.prototype.removePage=function(t){},e.prototype.removeAllPage=function(){},e.prototype.getIndexPage=function(t){},e.prototype.swapIndexPage=function(t,e){},e.prototype.getPageSelected=function(){},e.prototype.setPageSelected=function(t){},e.prototype.getPages=function(){},e.prototype.registerClassType=function(t,e){},e.prototype.unregisterClassType=function(t,e){},e.prototype.registerClassTypes=function(t){},e.prototype.unregisterClassTypes=function(t){},e.prototype.getClassType=function(t,e){},e.prototype.getAllNameClassType=function(t){},e.prototype.loadJs=function(t,e,n){},e.prototype.loadCss=function(t){},e.prototype.loadFont=function(t,e,n){},e.prototype._initKeyboard=function(){},e.prototype._onkeypress=function(t){},e.prototype._onkeydown=function(t){},e.prototype._onkeyup=function(t){},Object.defineProperty(e.prototype,"keydowns",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_shift",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_meta",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_ctrl",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_alt",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Note"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=i([p(l)],e)}(s),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.init=function(){},e.prototype.startHandler=function(){},e.prototype.stopHandler=function(){},e.prototype.createBt=function(t,e){},e.prototype.showFrame=function(){},e.prototype.hideFrame=function(){},e.prototype.iframeMessages=function(t){},e.prototype.onBtCancel=function(){},e.prototype.onBtDone=function(){},Object.defineProperty(e.prototype,"iframePluginUrl",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"PHandler"},enumerable:!1,configurable:!0}),e=i([p(l)],e)}(v)),C=(function(){function t(){}Object.defineProperty(t.prototype,"className",{get:function(){return"Sanitizer"},enumerable:!1,configurable:!0}),t.num=function(t){},t.str=function(t){},t.str_hexColor=function(t){},t.str_style=function(t){},t.str_url=function(t,e,n){},t.sanitizeString=function(t){},t.sanitizeHtml=function(t){},t.sanitizeSvg=function(t){},t.sanitizeMathML=function(t){},t=i([p(l)],t)}(),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}o(e,t),e.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},Object.defineProperty(e.prototype,"className",{get:function(){return"TimestampLogger"},enumerable:!1,configurable:!0}),e=i([p(l)],e)}(I),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.init=function(){},e.prototype.renderAll=function(){},e.prototype.getData=function(){},e.prototype._checkNeedSaveHis=function(t){},e.prototype.setData=function(t,e){},e.prototype.export=function(){},e.prototype.getHis=function(){},e.prototype.setHis=function(t){},e.prototype.addChild=function(t){},e.prototype.addToParent=function(t){},e.prototype.addChilds=function(t){},e.prototype.getParent=function(){},e.prototype.removeFromParent=function(){},e.prototype.removeChild=function(t){},e.prototype.removeAllChild=function(){},e.prototype.getChild=function(){},e.prototype.clone=function(){},Object.defineProperty(e.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"renderContent",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.anchorable=function(){},e.prototype.getThumb=function(){},e.prototype.calSize=function(){},Object.defineProperty(e.prototype,"childData",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"childIds",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),e.prototype.css=function(t,e){},e.prototype.getCss=function(t){},e.prototype.renderStyle=function(){},e.prototype.renderCssClass=function(){},e.prototype.renderSize=function(){},e.prototype.renderTransform=function(){},e.prototype.renderTransformOrigin=function(){},e.prototype.setSize=function(t,e){},e.prototype.setTransformOriginPoint=function(t,e){},e.prototype.setTransformOrigin=function(t,e){},e.prototype.onResize=function(){},e.prototype.onTransform=function(){},e.prototype.getBorderWidth=function(){},Object.defineProperty(e.prototype,"x",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originX",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originY",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deltaPos",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deltaTime",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"resizable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"movable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rotatable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderWidth",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderRadius",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderStyle",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderColor",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"enabled",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selectable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"hisSetting",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"scale",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rotate",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"opacity",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"zIndex",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lock",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"style",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cssClass",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"centerPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"topPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rightPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"bottomPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"leftPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"boundingBox",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastMouseDown",{get:function(){},enumerable:!1,configurable:!0}),e.prototype.initEventListener=function(){},e.prototype.addMouseEvent=function(){},e.prototype.removeMouseEvent=function(){},e.prototype.addTouchEvent=function(){},e.prototype.removeTouchEvent=function(){},e.prototype._mouseover=function(t){},e.prototype._mouseout=function(t){},e.prototype._mousemove=function(t){},e.prototype._mousedown=function(t){},e.prototype._mouseup=function(t){},e.prototype._nodeClick=function(t){},e.prototype._nodeDbClick=function(t){},e.prototype._nodeMultiClick=function(t){},e.prototype._click=function(t){},e.prototype._dblclick=function(t){},e.prototype._touchstart=function(t){},e.prototype._touchmove=function(t){},e.prototype._touchcancel=function(t){},e.prototype._touchend=function(t){},e.prototype._nodeDown=function(t){},e.prototype._nodeUp=function(t){},Object.defineProperty(e.prototype,"className",{get:function(){return"UINode"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),e=i([p(l)],e)}(s)),j=function(){function t(){}return Object.defineProperty(t.prototype,"className",{get:function(){return"Utils"},enumerable:!1,configurable:!0}),t.addArrayPrototype=function(){},t.removeArrayPrototype=function(){},t.notNull=function(t){},t.isNull=function(t){},t.randrom=function(t,e){},t.merge=function(t,e){},t.deepMerge=function(t,e){},t.deepClone=function(t){},t.mergeNotNull=function(t,e){},t.mergePartial=function(t,e){},t.toArr=function(t){},t.getTransformValue=function(t){},t.transformToCss=function(t){},t.inserClassCss=function(t,e){},t.removeAllChildHTMLElement=function(t,e){},t.pointToPage=function(t,e){},t.getDistance=function(t,e,n,o){},t.getBoundingBox=function(t,e){},t.getOriginBoxOfBoundingBox=function(t,e){},t.pointInRect=function(t,e,n){},t.rectInRect=function(t,e){},t.pointRighAngle=function(t,e,n,o,i,r){},t.pointRighAngleRotate=function(t,e,n,o,i){},t.angleTo180=function(t){},t.pointLineInOrder=function(t,e,n,o,i,r){},t.angleOf=function(t,e,n,o){},t.getPointRotate=function(t,e,n,o,i){},t.getRectRotate=function(t,e,n,o){},t.getNodeConner=function(t){},t.createPointTest=function(t,e,n,o,i){},t.makeDragable=function(t){},t.clearDragable=function(t){},t.makeIconButtom=function(t,e,n,o){},t.cropCanvasTransparent=function(t,e){},t=i([p(l)],t)}(),w=(function(){function t(){}t.prototype.getSqDist=function(t,e){},t.prototype.getSqSegDist=function(t,e,n){},t.prototype.simplifyRadialDist=function(t,e){},t.prototype.simplifyDPStep=function(t,e,n,o,i){},t.prototype.simplifyDouglasPeucker=function(t,e){},t.prototype.simplify=function(t,e,n){},Object.defineProperty(t.prototype,"className",{get:function(){return"Simplify"},enumerable:!1,configurable:!0}),t=i([p(l)],t)}(),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),M=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return w(e,t),e.prototype.init=function(){t.prototype.init.call(this),this.onkey=this.onkey.bind(this),this._pluginInited=!1,this._frameWidth=500,this._frameHeight=350,this._iframePluginUrl="",this._pluginId="wiris",this._pluginEvent={EDIT:"EDIT",GET:"GET",INITED:"INITED"}},e.prototype.startHandler=function(){this.log("startHandler "+this.className),this.note.on(T.NOTE_KEYDOWN,this.onkey)},e.prototype.stopHandler=function(){this.log("stopHandler "+this.className),this.note.removeListener(T.NOTE_KEYDOWN,this.onkey)},e.prototype.onkey=function(t){"p,m"==this.note.keydowns.toString()&&("block"==this._frame.style.display?this.hideFrame():this.showFrame())},e.prototype.showFrame=function(){t.prototype.showFrame.call(this)},e.prototype.hideFrame=function(){t.prototype.hideFrame.call(this),this._pluginInited&&this._iframePlugin.contentWindow.postMessage({pluginId:this._pluginId,eventName:this._pluginEvent.EDIT,data:{type:"mathml",content:'<math xmlns="http://www.w3.org/1998/Math/MathML"></math>'}},"*")},e.prototype.iframeMessages=function(t){if(this._iframePlugin&&(!t||t.source===this._iframePlugin.contentWindow)){if(this.log(t),t.data&&t.data.eventName==this._pluginEvent.INITED)return this._pluginInited=!0,void this.emit(this._pluginEvent.INITED);if(t.data&&t.data.eventName==this._pluginEvent.GET){var e=t.data.data;if(e&&"mathml"==e.type&&""!=e.content)if(e.instId){var n=this.note.getRegisterInstance()[e.instId];n&&(n.mathml=e.content)}else{var o=this.note.createNode({className:"UIMathML",mathml:t.data.data.content}),i=this.note.getPageSelected();i.addChild(o),o.x=i.width/2-o.width/2;var r=j.pointToPage({x:0,y:window.innerHeight/2},i);o.y=r.y-o.height/2}this.hideFrame()}else;}},e.prototype.editMathML=function(t){var e=this;this._pluginInited?this._iframePlugin.contentWindow.postMessage({pluginId:this._pluginId,eventName:this._pluginEvent.EDIT,data:t},"*"):this.on(this._pluginEvent.INITED,(function(){e._iframePlugin.contentWindow.postMessage({pluginId:e._pluginId,eventName:e._pluginEvent.EDIT,data:t},"*")}))},e.prototype.onBtCancel=function(){t.prototype.onBtCancel.call(this)},e.prototype.onBtDone=function(){this._pluginInited&&this._iframePlugin.contentWindow.postMessage({pluginId:this._pluginId,eventName:this._pluginEvent.GET},"*")},Object.defineProperty(e.prototype,"className",{get:function(){return"WirisHandler"},enumerable:!1,configurable:!0}),e}(D),A=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),L=function(){return L=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},L.apply(this,arguments)},H=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._mathJaxLink="http://localhost:8005/plugins/mathjax/mml-svg.js",e}return A(e,t),e.prototype.init=function(){this._originX=0,this._originY=0,t.prototype.init.call(this)},e.prototype.initRender=function(){},e.prototype.calSize=function(){t.prototype.calSize.call(this),this.renderAll()},e.prototype.setSize=function(e,n){t.prototype.setSize.call(this,e,n)},e.prototype.getData=function(){return L({mathml:this._mathml},t.prototype.getData.call(this))},e.prototype.renderAll=function(){if(this._parent&&window.MathJaxx&&window.MathJaxx.mathml2svg){var e=window.MathJaxx.mathml2svg(this._mathml);if(e&&e.firstChild){var n=e.firstChild;n.style.transformOrigin="0% 0%",n.style.transform="scale(2)",j.removeAllChildHTMLElement(this.renderContent),this.renderContent.appendChild(n),this._width=2*n.clientWidth+10,this._height=2*n.clientHeight+10}t.prototype.renderAll.call(this)}},e.prototype.anchorable=function(){return[y.TOP,y.RIGHT,y.BOTTOM,y.LEFT]},e.prototype._dblclick=function(e){t.prototype._dblclick.call(this,e);var n=this.note.getHandlerByName(M.getClassName());n.showFrame(),n.editMathML({instId:this.getId(),type:"mathml",content:this._mathml})},Object.defineProperty(e.prototype,"mathJaxLink",{get:function(){return this._mathJaxLink},set:function(t){t&&t!=this._mathJaxLink&&(this._mathJaxLink=t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"mathml",{get:function(){return this._mathml},set:function(t){var e=this;t&&t!=this._mathml&&(this._mathml=t,this.note.loadJs(this._mathJaxLink,(function(){e.log(window.MathJaxx),e.renderAll()})))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"UIMathML"},enumerable:!1,configurable:!0}),e}(C),G=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),R=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return G(e,t),e.prototype.init=function(){t.prototype.init.call(this),this.onkey=this.onkey.bind(this),this._pluginInited=!1,this._frameWidth=710,this._frameHeight=600,this._iframePluginUrl="",this._pluginId="geobebra",this._pluginEvent={GET:"GET",INITED:"INITED"}},e.prototype.startHandler=function(){this.log("startHandler "+this.className),this.note.on(T.NOTE_KEYDOWN,this.onkey)},e.prototype.stopHandler=function(){this.log("stopHandler "+this.className),this.note.removeListener(T.NOTE_KEYDOWN,this.onkey)},e.prototype.onkey=function(t){"g,e"==this.note.keydowns.toString()&&("block"==this._frame.style.display?this.hideFrame():this.showFrame())},e.prototype.showFrame=function(n){n!=e.GEO_TYPE_GRAPHING&&n!=e.GEO_TYPE_3D&&n!=e.GEO_TYPE_GEOMETRY&&(n=e.GEO_TYPE_BBT),this._iframePluginUrl+="?geogebraType="+n,t.prototype.showFrame.call(this)},e.prototype.hideFrame=function(){t.prototype.hideFrame.call(this),this._iframePlugin&&(window.removeEventListener("message",this.iframeMessages),this._frame.removeChild(this._iframePlugin),document.body.removeChild(this._frame),this._iframePluginUrl=this._iframePluginUrl.substring(0,this._iframePluginUrl.indexOf("?")),this._iframePlugin=null)},e.prototype.iframeMessages=function(t){var e=this;if(this._iframePlugin&&(!t||t.source===this._iframePlugin.contentWindow)){if(t.data&&t.data.eventName==this._pluginEvent.INITED)return this._pluginInited=!0,void this.emit(this._pluginEvent.INITED);if(t.data&&t.data.eventName==this._pluginEvent.GET){var n=t.data.data;return n&&n.content&&n.content.length>0&&(this.log(n),"image/png"==n.type?this.cropImagePng(n.content,(function(t,n,o){e.createNodeImageGeo({content:t,type:"image/png",width:n,height:o})})):this.createNodeImageGeo(n)),void this.hideFrame()}}},e.prototype.createNodeImageGeo=function(t){var n=this.note.addNode({className:"UIImage",src:"image/png"==t.type?t.content:URL.createObjectURL(new Blob([t.content],{type:t.type})),width:t.width?.65*t.width:this._frameWidth,height:t.height?.65*t.height:this._frameHeight,style:{}});if("image/png"==t.type){var o=this.convertBase64ToFile(t.content);this.note.emit(e.EVENT_GEO_IMAGE,o,n)}else{o=new File([t.content],"geo_image_"+(new Date).getMilliseconds()+".svg");this.note.emit(e.EVENT_GEO_IMAGE,o,n)}},e.prototype.cropImagePng=function(t,e){var n=this,o=new Image;o.onload=function(){var t=document.createElement("canvas");t.width=o.width,t.height=o.height,t.getContext("2d").drawImage(o,0,0,o.width,o.height,0,0,t.width,t.height);var i=j.cropCanvasTransparent(t,5);n.log(i.width+":"+i.height),e(i.toDataURL("image/png"),i.width,i.height)},o.src=t},e.prototype.convertBase64ToFile=function(t){var e;e=t.split(",")[0].indexOf("base64")>=0?atob(t.split(",")[1]):unescape(t.split(",")[1]);for(var n=new Uint8Array(e.length),o=0;o<e.length;o++)n[o]=e.charCodeAt(o);return new File([new Blob([n],{type:"image/png"})],"geo_image_"+(new Date).getMilliseconds()+".png")},e.prototype.onBtCancel=function(){t.prototype.onBtCancel.call(this)},e.prototype.onBtDone=function(){this._pluginInited&&this._iframePlugin.contentWindow.postMessage({pluginId:this._pluginId,eventName:this._pluginEvent.GET},"*")},Object.defineProperty(e.prototype,"className",{get:function(){return"GeogebraHandler"},enumerable:!1,configurable:!0}),e.EVENT_GEO_IMAGE="event_geo_image",e.GEO_TYPE_BBT="bbt",e.GEO_TYPE_GRAPHING="graphing",e.GEO_TYPE_3D="3d",e.GEO_TYPE_GEOMETRY="geometry",e}(D);return e})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,