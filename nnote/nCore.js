!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.nCore=e():t.nCore=e()}(self,(()=>(()=>{var t={856:function(t){t.exports=function(){"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(t,i){return e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},e(t,i)}function i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function n(t,r,o){return n=i()?Reflect.construct:function(t,i,n){var r=[null];r.push.apply(r,i);var o=new(Function.bind.apply(t,r));return n&&e(o,n.prototype),o},n.apply(null,arguments)}function r(t){return o(t)||s(t)||a(t)||l()}function o(t){if(Array.isArray(t))return h(t)}function s(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function a(t,e){if(t){if("string"==typeof t)return h(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?h(t,e):void 0}}function h(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function l(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c=Object.hasOwnProperty,u=Object.setPrototypeOf,d=Object.isFrozen,p=Object.getPrototypeOf,f=Object.getOwnPropertyDescriptor,g=Object.freeze,_=Object.seal,y=Object.create,m="undefined"!=typeof Reflect&&Reflect,b=m.apply,v=m.construct;b||(b=function(t,e,i){return t.apply(e,i)}),g||(g=function(t){return t}),_||(_=function(t){return t}),v||(v=function(t,e){return n(t,r(e))});var N=I(Array.prototype.forEach),E=I(Array.prototype.pop),C=I(Array.prototype.push),w=I(String.prototype.toLowerCase),T=I(String.prototype.toString),O=I(String.prototype.match),M=I(String.prototype.replace),x=I(String.prototype.indexOf),A=I(String.prototype.trim),D=I(RegExp.prototype.test),P=L(TypeError);function I(t){return function(e){for(var i=arguments.length,n=new Array(i>1?i-1:0),r=1;r<i;r++)n[r-1]=arguments[r];return b(t,e,n)}}function L(t){return function(){for(var e=arguments.length,i=new Array(e),n=0;n<e;n++)i[n]=arguments[n];return v(t,i)}}function S(t,e,i){i=i||w,u&&u(t,null);for(var n=e.length;n--;){var r=e[n];if("string"==typeof r){var o=i(r);o!==r&&(d(e)||(e[n]=o),r=o)}t[r]=!0}return t}function k(t){var e,i=y(null);for(e in t)b(c,t,[e])&&(i[e]=t[e]);return i}function H(t,e){for(;null!==t;){var i=f(t,e);if(i){if(i.get)return I(i.get);if("function"==typeof i.value)return I(i.value)}t=p(t)}function n(t){return console.warn("fallback value for",t),null}return n}var R=g(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),j=g(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),F=g(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),U=g(["animate","color-profile","cursor","discard","fedropshadow","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),B=g(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"]),G=g(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),z=g(["#text"]),W=g(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns","slot"]),X=g(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),Y=g(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),V=g(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),K=_(/\{\{[\w\W]*|[\w\W]*\}\}/gm),J=_(/<%[\w\W]*|[\w\W]*%>/gm),q=_(/\${[\w\W]*}/gm),Z=_(/^data-[\-\w.\u00B7-\uFFFF]/),$=_(/^aria-[\-\w]+$/),Q=_(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),tt=_(/^(?:\w+script|data):/i),et=_(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),it=_(/^html$/i),nt=function(){return"undefined"==typeof window?null:window},rt=function(e,i){if("object"!==t(e)||"function"!=typeof e.createPolicy)return null;var n=null,r="data-tt-policy-suffix";i.currentScript&&i.currentScript.hasAttribute(r)&&(n=i.currentScript.getAttribute(r));var o="dompurify"+(n?"#"+n:"");try{return e.createPolicy(o,{createHTML:function(t){return t},createScriptURL:function(t){return t}})}catch(t){return console.warn("TrustedTypes policy "+o+" could not be created."),null}};function ot(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:nt(),i=function(t){return ot(t)};if(i.version="2.4.1",i.removed=[],!e||!e.document||9!==e.document.nodeType)return i.isSupported=!1,i;var n=e.document,o=e.document,s=e.DocumentFragment,a=e.HTMLTemplateElement,h=e.Node,l=e.Element,c=e.NodeFilter,u=e.NamedNodeMap,d=void 0===u?e.NamedNodeMap||e.MozNamedAttrMap:u,p=e.HTMLFormElement,f=e.DOMParser,_=e.trustedTypes,y=l.prototype,m=H(y,"cloneNode"),b=H(y,"nextSibling"),v=H(y,"childNodes"),I=H(y,"parentNode");if("function"==typeof a){var L=o.createElement("template");L.content&&L.content.ownerDocument&&(o=L.content.ownerDocument)}var st=rt(_,n),at=st?st.createHTML(""):"",ht=o,lt=ht.implementation,ct=ht.createNodeIterator,ut=ht.createDocumentFragment,dt=ht.getElementsByTagName,pt=n.importNode,ft={};try{ft=k(o).documentMode?o.documentMode:{}}catch(t){}var gt={};i.isSupported="function"==typeof I&&lt&&void 0!==lt.createHTMLDocument&&9!==ft;var _t,yt,mt=K,bt=J,vt=q,Nt=Z,Et=$,Ct=tt,wt=et,Tt=Q,Ot=null,Mt=S({},[].concat(r(R),r(j),r(F),r(B),r(z))),xt=null,At=S({},[].concat(r(W),r(X),r(Y),r(V))),Dt=Object.seal(Object.create(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),Pt=null,It=null,Lt=!0,St=!0,kt=!1,Ht=!1,Rt=!1,jt=!1,Ft=!1,Ut=!1,Bt=!1,Gt=!1,zt=!0,Wt=!1,Xt="user-content-",Yt=!0,Vt=!1,Kt={},Jt=null,qt=S({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]),Zt=null,$t=S({},["audio","video","img","source","image","track"]),Qt=null,te=S({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),ee="http://www.w3.org/1998/Math/MathML",ie="http://www.w3.org/2000/svg",ne="http://www.w3.org/1999/xhtml",re=ne,oe=!1,se=null,ae=S({},[ee,ie,ne],T),he=["application/xhtml+xml","text/html"],le="text/html",ce=null,ue=o.createElement("form"),de=function(t){return t instanceof RegExp||t instanceof Function},pe=function(e){ce&&ce===e||(e&&"object"===t(e)||(e={}),e=k(e),_t=_t=-1===he.indexOf(e.PARSER_MEDIA_TYPE)?le:e.PARSER_MEDIA_TYPE,yt="application/xhtml+xml"===_t?T:w,Ot="ALLOWED_TAGS"in e?S({},e.ALLOWED_TAGS,yt):Mt,xt="ALLOWED_ATTR"in e?S({},e.ALLOWED_ATTR,yt):At,se="ALLOWED_NAMESPACES"in e?S({},e.ALLOWED_NAMESPACES,T):ae,Qt="ADD_URI_SAFE_ATTR"in e?S(k(te),e.ADD_URI_SAFE_ATTR,yt):te,Zt="ADD_DATA_URI_TAGS"in e?S(k($t),e.ADD_DATA_URI_TAGS,yt):$t,Jt="FORBID_CONTENTS"in e?S({},e.FORBID_CONTENTS,yt):qt,Pt="FORBID_TAGS"in e?S({},e.FORBID_TAGS,yt):{},It="FORBID_ATTR"in e?S({},e.FORBID_ATTR,yt):{},Kt="USE_PROFILES"in e&&e.USE_PROFILES,Lt=!1!==e.ALLOW_ARIA_ATTR,St=!1!==e.ALLOW_DATA_ATTR,kt=e.ALLOW_UNKNOWN_PROTOCOLS||!1,Ht=e.SAFE_FOR_TEMPLATES||!1,Rt=e.WHOLE_DOCUMENT||!1,Ut=e.RETURN_DOM||!1,Bt=e.RETURN_DOM_FRAGMENT||!1,Gt=e.RETURN_TRUSTED_TYPE||!1,Ft=e.FORCE_BODY||!1,zt=!1!==e.SANITIZE_DOM,Wt=e.SANITIZE_NAMED_PROPS||!1,Yt=!1!==e.KEEP_CONTENT,Vt=e.IN_PLACE||!1,Tt=e.ALLOWED_URI_REGEXP||Tt,re=e.NAMESPACE||ne,e.CUSTOM_ELEMENT_HANDLING&&de(e.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(Dt.tagNameCheck=e.CUSTOM_ELEMENT_HANDLING.tagNameCheck),e.CUSTOM_ELEMENT_HANDLING&&de(e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(Dt.attributeNameCheck=e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),e.CUSTOM_ELEMENT_HANDLING&&"boolean"==typeof e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements&&(Dt.allowCustomizedBuiltInElements=e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),Ht&&(St=!1),Bt&&(Ut=!0),Kt&&(Ot=S({},r(z)),xt=[],!0===Kt.html&&(S(Ot,R),S(xt,W)),!0===Kt.svg&&(S(Ot,j),S(xt,X),S(xt,V)),!0===Kt.svgFilters&&(S(Ot,F),S(xt,X),S(xt,V)),!0===Kt.mathMl&&(S(Ot,B),S(xt,Y),S(xt,V))),e.ADD_TAGS&&(Ot===Mt&&(Ot=k(Ot)),S(Ot,e.ADD_TAGS,yt)),e.ADD_ATTR&&(xt===At&&(xt=k(xt)),S(xt,e.ADD_ATTR,yt)),e.ADD_URI_SAFE_ATTR&&S(Qt,e.ADD_URI_SAFE_ATTR,yt),e.FORBID_CONTENTS&&(Jt===qt&&(Jt=k(Jt)),S(Jt,e.FORBID_CONTENTS,yt)),Yt&&(Ot["#text"]=!0),Rt&&S(Ot,["html","head","body"]),Ot.table&&(S(Ot,["tbody"]),delete Pt.tbody),g&&g(e),ce=e)},fe=S({},["mi","mo","mn","ms","mtext"]),ge=S({},["foreignobject","desc","title","annotation-xml"]),_e=S({},["title","style","font","a","script"]),ye=S({},j);S(ye,F),S(ye,U);var me=S({},B);S(me,G);var be=function(t){var e=I(t);e&&e.tagName||(e={namespaceURI:re,tagName:"template"});var i=w(t.tagName),n=w(e.tagName);return!!se[t.namespaceURI]&&(t.namespaceURI===ie?e.namespaceURI===ne?"svg"===i:e.namespaceURI===ee?"svg"===i&&("annotation-xml"===n||fe[n]):Boolean(ye[i]):t.namespaceURI===ee?e.namespaceURI===ne?"math"===i:e.namespaceURI===ie?"math"===i&&ge[n]:Boolean(me[i]):t.namespaceURI===ne?!(e.namespaceURI===ie&&!ge[n])&&!(e.namespaceURI===ee&&!fe[n])&&!me[i]&&(_e[i]||!ye[i]):!("application/xhtml+xml"!==_t||!se[t.namespaceURI]))},ve=function(t){C(i.removed,{element:t});try{t.parentNode.removeChild(t)}catch(e){try{t.outerHTML=at}catch(e){t.remove()}}},Ne=function(t,e){try{C(i.removed,{attribute:e.getAttributeNode(t),from:e})}catch(t){C(i.removed,{attribute:null,from:e})}if(e.removeAttribute(t),"is"===t&&!xt[t])if(Ut||Bt)try{ve(e)}catch(t){}else try{e.setAttribute(t,"")}catch(t){}},Ee=function(t){var e,i;if(Ft)t="<remove></remove>"+t;else{var n=O(t,/^[\r\n\t ]+/);i=n&&n[0]}"application/xhtml+xml"===_t&&re===ne&&(t='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+t+"</body></html>");var r=st?st.createHTML(t):t;if(re===ne)try{e=(new f).parseFromString(r,_t)}catch(t){}if(!e||!e.documentElement){e=lt.createDocument(re,"template",null);try{e.documentElement.innerHTML=oe?"":r}catch(t){}}var s=e.body||e.documentElement;return t&&i&&s.insertBefore(o.createTextNode(i),s.childNodes[0]||null),re===ne?dt.call(e,Rt?"html":"body")[0]:Rt?e.documentElement:s},Ce=function(t){return ct.call(t.ownerDocument||t,t,c.SHOW_ELEMENT|c.SHOW_COMMENT|c.SHOW_TEXT,null,!1)},we=function(t){return t instanceof p&&("string"!=typeof t.nodeName||"string"!=typeof t.textContent||"function"!=typeof t.removeChild||!(t.attributes instanceof d)||"function"!=typeof t.removeAttribute||"function"!=typeof t.setAttribute||"string"!=typeof t.namespaceURI||"function"!=typeof t.insertBefore||"function"!=typeof t.hasChildNodes)},Te=function(e){return"object"===t(h)?e instanceof h:e&&"object"===t(e)&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName},Oe=function(t,e,n){gt[t]&&N(gt[t],(function(t){t.call(i,e,n,ce)}))},Me=function(t){var e;if(Oe("beforeSanitizeElements",t,null),we(t))return ve(t),!0;if(D(/[\u0080-\uFFFF]/,t.nodeName))return ve(t),!0;var n=yt(t.nodeName);if(Oe("uponSanitizeElement",t,{tagName:n,allowedTags:Ot}),t.hasChildNodes()&&!Te(t.firstElementChild)&&(!Te(t.content)||!Te(t.content.firstElementChild))&&D(/<[/\w]/g,t.innerHTML)&&D(/<[/\w]/g,t.textContent))return ve(t),!0;if("select"===n&&D(/<template/i,t.innerHTML))return ve(t),!0;if(!Ot[n]||Pt[n]){if(!Pt[n]&&Ae(n)){if(Dt.tagNameCheck instanceof RegExp&&D(Dt.tagNameCheck,n))return!1;if(Dt.tagNameCheck instanceof Function&&Dt.tagNameCheck(n))return!1}if(Yt&&!Jt[n]){var r=I(t)||t.parentNode,o=v(t)||t.childNodes;if(o&&r)for(var s=o.length-1;s>=0;--s)r.insertBefore(m(o[s],!0),b(t))}return ve(t),!0}return t instanceof l&&!be(t)?(ve(t),!0):"noscript"!==n&&"noembed"!==n||!D(/<\/no(script|embed)/i,t.innerHTML)?(Ht&&3===t.nodeType&&(e=t.textContent,e=M(e,mt," "),e=M(e,bt," "),e=M(e,vt," "),t.textContent!==e&&(C(i.removed,{element:t.cloneNode()}),t.textContent=e)),Oe("afterSanitizeElements",t,null),!1):(ve(t),!0)},xe=function(t,e,i){if(zt&&("id"===e||"name"===e)&&(i in o||i in ue))return!1;if(St&&!It[e]&&D(Nt,e));else if(Lt&&D(Et,e));else if(!xt[e]||It[e]){if(!(Ae(t)&&(Dt.tagNameCheck instanceof RegExp&&D(Dt.tagNameCheck,t)||Dt.tagNameCheck instanceof Function&&Dt.tagNameCheck(t))&&(Dt.attributeNameCheck instanceof RegExp&&D(Dt.attributeNameCheck,e)||Dt.attributeNameCheck instanceof Function&&Dt.attributeNameCheck(e))||"is"===e&&Dt.allowCustomizedBuiltInElements&&(Dt.tagNameCheck instanceof RegExp&&D(Dt.tagNameCheck,i)||Dt.tagNameCheck instanceof Function&&Dt.tagNameCheck(i))))return!1}else if(Qt[e]);else if(D(Tt,M(i,wt,"")));else if("src"!==e&&"xlink:href"!==e&&"href"!==e||"script"===t||0!==x(i,"data:")||!Zt[t])if(kt&&!D(Ct,M(i,wt,"")));else if(i)return!1;return!0},Ae=function(t){return t.indexOf("-")>0},De=function(e){var n,r,o,s;Oe("beforeSanitizeAttributes",e,null);var a=e.attributes;if(a){var h={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:xt};for(s=a.length;s--;){var l=n=a[s],c=l.name,u=l.namespaceURI;if(r="value"===c?n.value:A(n.value),o=yt(c),h.attrName=o,h.attrValue=r,h.keepAttr=!0,h.forceKeepAttr=void 0,Oe("uponSanitizeAttribute",e,h),r=h.attrValue,!h.forceKeepAttr&&(Ne(c,e),h.keepAttr))if(D(/\/>/i,r))Ne(c,e);else{Ht&&(r=M(r,mt," "),r=M(r,bt," "),r=M(r,vt," "));var d=yt(e.nodeName);if(xe(d,o,r)){if(!Wt||"id"!==o&&"name"!==o||(Ne(c,e),r=Xt+r),st&&"object"===t(_)&&"function"==typeof _.getAttributeType)if(u);else switch(_.getAttributeType(d,o)){case"TrustedHTML":r=st.createHTML(r);break;case"TrustedScriptURL":r=st.createScriptURL(r)}try{u?e.setAttributeNS(u,c,r):e.setAttribute(c,r),E(i.removed)}catch(t){}}}}Oe("afterSanitizeAttributes",e,null)}},Pe=function t(e){var i,n=Ce(e);for(Oe("beforeSanitizeShadowDOM",e,null);i=n.nextNode();)Oe("uponSanitizeShadowNode",i,null),Me(i)||(i.content instanceof s&&t(i.content),De(i));Oe("afterSanitizeShadowDOM",e,null)};return i.sanitize=function(r){var o,a,l,c,u,d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if((oe=!r)&&(r="\x3c!--\x3e"),"string"!=typeof r&&!Te(r)){if("function"!=typeof r.toString)throw P("toString is not a function");if("string"!=typeof(r=r.toString()))throw P("dirty is not a string, aborting")}if(!i.isSupported){if("object"===t(e.toStaticHTML)||"function"==typeof e.toStaticHTML){if("string"==typeof r)return e.toStaticHTML(r);if(Te(r))return e.toStaticHTML(r.outerHTML)}return r}if(jt||pe(d),i.removed=[],"string"==typeof r&&(Vt=!1),Vt){if(r.nodeName){var p=yt(r.nodeName);if(!Ot[p]||Pt[p])throw P("root node is forbidden and cannot be sanitized in-place")}}else if(r instanceof h)1===(a=(o=Ee("\x3c!----\x3e")).ownerDocument.importNode(r,!0)).nodeType&&"BODY"===a.nodeName||"HTML"===a.nodeName?o=a:o.appendChild(a);else{if(!Ut&&!Ht&&!Rt&&-1===r.indexOf("<"))return st&&Gt?st.createHTML(r):r;if(!(o=Ee(r)))return Ut?null:Gt?at:""}o&&Ft&&ve(o.firstChild);for(var f=Ce(Vt?r:o);l=f.nextNode();)3===l.nodeType&&l===c||Me(l)||(l.content instanceof s&&Pe(l.content),De(l),c=l);if(c=null,Vt)return r;if(Ut){if(Bt)for(u=ut.call(o.ownerDocument);o.firstChild;)u.appendChild(o.firstChild);else u=o;return xt.shadowroot&&(u=pt.call(n,u,!0)),u}var g=Rt?o.outerHTML:o.innerHTML;return Rt&&Ot["!doctype"]&&o.ownerDocument&&o.ownerDocument.doctype&&o.ownerDocument.doctype.name&&D(it,o.ownerDocument.doctype.name)&&(g="<!DOCTYPE "+o.ownerDocument.doctype.name+">\n"+g),Ht&&(g=M(g,mt," "),g=M(g,bt," "),g=M(g,vt," ")),st&&Gt?st.createHTML(g):g},i.setConfig=function(t){pe(t),jt=!0},i.clearConfig=function(){ce=null,jt=!1},i.isValidAttribute=function(t,e,i){ce||pe({});var n=yt(t),r=yt(e);return xe(n,r,i)},i.addHook=function(t,e){"function"==typeof e&&(gt[t]=gt[t]||[],C(gt[t],e))},i.removeHook=function(t){if(gt[t])return E(gt[t])},i.removeHooks=function(t){gt[t]&&(gt[t]=[])},i.removeAllHooks=function(){gt={}},i}return ot()}()}},e={};function i(n){var r=e[n];if(void 0!==r)return r.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{"use strict";function t(){Object.defineProperty(Array.prototype,"swap",{enumerable:!1,configurable:!0,value:function(t,e){if(t<0||t>=this.length||e<0||e>=this.length)return!1;var i=this[t];return this[t]=this[e],this[e]=i,!0}}),Object.defineProperty(Array.prototype,"addFilter",{enumerable:!1,configurable:!0,value:function(t,e){var i=this;if(!t)return!1;var n=Array.isArray(t)?t:[t],r=!1;return n.forEach((function(t){var n=!1;if(null==e||null==e)n=!(i.indexOf(t)<0);else for(var o=Array.isArray(e)?e:[e],s=0;s<i.length;s++){for(var a=!0,h=0;h<o.length;h++)if(t[o[h]]!=i[s][o[h]]){a=!1;break}if(a){n=!0;break}}n||(r=!0,i.push(t))})),r}}),Object.defineProperty(Array.prototype,"removeFilter",{enumerable:!1,configurable:!0,value:function(t){var e=this,i=[];return t?((Array.isArray(t)?t:[t]).forEach((function(t){var n=e.indexOf(t);n>=0&&i.push(e.splice(n,1))})),i):i}}),Object.defineProperty(Array.prototype,"removeAll",{enumerable:!1,configurable:!0,value:function(){return 0!=this.length&&(this.splice(0),!0)}}),Object.defineProperty(Array.prototype,"has",{enumerable:!1,configurable:!0,value:function(t){var e=this;return!!t&&((Array.isArray(t)?t:[t]).forEach((function(t){if(e.indexOf(t)<0)return!1})),!0)}})}i.r(n),i.d(n,{ActionMode:()=>M,ClassBase:()=>c,ClassNote:()=>I,Cmd:()=>B,DisplayMode:()=>w,FileType:()=>O,Handler:()=>z,HorizonAlign:()=>N,KEY_CODE:()=>A,LoadStatus:()=>T,Logger:()=>L,NOTE_CLASSTYPE:()=>D,NodeAnchor:()=>j,Note:()=>F,NoteEvent:()=>x,PHandler:()=>X,PropertiesType:()=>v,Sanitizer:()=>et,Simplify:()=>l,TimestampLogger:()=>k,UINode:()=>V,Utils:()=>a,VerticalAlign:()=>E,ViewMode:()=>C}),t();var e,r,o,s,a=function(){function e(){}return Object.defineProperty(e.prototype,"className",{get:function(){return"Utils"},enumerable:!1,configurable:!0}),e.addArrayPrototype=function(){t()},e.removeArrayPrototype=function(){delete Array.prototype.swap,delete Array.prototype.addFilter,delete Array.prototype.removeFilter,delete Array.prototype.removeAll,delete Array.prototype.has},e.notNull=function(t){return null!=t&&null!=t},e.isNull=function(t){return!e.notNull(t)},e.randrom=function(t,e){return Math.floor(Math.random()*(e-t+1))+t},e.merge=function(t,e){if(t!=e){if(!e)return t;for(var i in e)null==e[i]&&null==e[i]||(t[i]=e[i]);return t}},e.deepMerge=function(t,i){if(t!=i&&"object"==typeof t&&"object"==typeof i&&!Array.isArray(t)&&!Array.isArray(i)){try{for(var n in i)"number"!=typeof i[n]&&"string"!=typeof i[n]&&"boolean"!=typeof i[n]&&"bigint"!=typeof i[n]&&"symbol"!=typeof i[n]||(t[n]=i[n]),"function"==typeof i[n]?t[n]=i[n]:Array.isArray(i[n])?t[n]=i[n].concat([]):"object"==typeof i[n]&&(t[n]||(t[n]={}),e.deepMerge(t[n],i[n]))}catch(e){return console.log("deepMerge exception : "+e.message),t}return t}},e.deepClone=function(t){if("number"==typeof t||"string"==typeof t||"boolean"==typeof t||"bigint"==typeof t||"symbol"==typeof t)return t;if("function"==typeof t)return t;if(Array.isArray(t)){for(var i=[],n=0;n<t.length;n++){var r=e.deepClone(t[n]);i.push(r)}return i}if("object"==typeof t){r={};for(var o in t)r[o]=e.deepClone(t[o]);return r}},e.mergeNotNull=function(t,e){if(t!=e){for(var i in e)null!=t[i]&&null!=e[i]&&null!=t[i]&&null!=e[i]&&typeof e[i]==typeof t[i]&&(t[i]=e[i]);return t}},e.mergePartial=function(t,i){return e.merge(t,i)},e.toArr=function(t){var e=[];for(var i in t)e.push({name:i,value:t[i]});return e},e.getTransformValue=function(t){var e={scaleX:1,scaleY:1,rotate:0,skewX:1,skewY:1,translateX:1,translateY:1,x:0,y:0};if(!(t&&t.style&&t.style&&t.style.transform))return e;return(t.style.transform+"    ").replace(new RegExp("\\b"+["matrix3d","matrix","perspective","rotate3d","rotateX","rotateY","rotateZ","rotate","translate3d","translateX","translateY","translateZ","translate","scale3d","scaleX","scaleY","scaleZ","scale","skewX","skewY","skew"].join("|")+"\\b","gi"),(function(t){return"    "+t})).split(")    ").reduce((function(t,i){var n=(i=i.trim()).slice(0,i.indexOf("(")),r=i.slice(i.indexOf("(")+1,999);if(!i)return e;if("scaleX"!=n||isNaN(Number(r))||(e.scaleX*=Number(r)),"scaleY"!=n||isNaN(Number(r))||(e.scaleY*=Number(r)),"scale"==n){var o=r.split(",");isNaN(Number(o[0]))||(e.scaleX*=Number(o[0])),isNaN(Number(o[1]))?isNaN(Number(o[0]))||(e.scaleY*=Number(o[0])):e.scaleY*=Number(o[1])}if("rotate"!=n||isNaN(parseInt(r))||(e.rotate+=parseInt(r)),"translateX"!=n||isNaN(parseInt(r))||(e.translateX+=parseInt(r)),"translateY"!=n||isNaN(parseInt(r))||(e.translateY+=parseInt(r)),"translate"==n){o=r.split(",");isNaN(parseInt(o[0]))||(e.translateX+=parseInt(o[0])),isNaN(parseInt(o[1]))?isNaN(parseInt(o[0]))||(e.translateY+=parseInt(o[0])):e.translateY+=parseInt(o[1])}if("skewX"!=n||isNaN(parseInt(r))||(e.skewX+=parseInt(r)),"skewY"!=n||isNaN(parseInt(r))||(e.skewY+=parseInt(r)),"skew"==n){o=r.split(",");isNaN(parseInt(o[0]))||(e.skewX+=parseInt(o[0])),isNaN(parseInt(o[1]))?isNaN(parseInt(o[0]))||(e.skewY+=parseInt(o[0])):e.skewY+=parseInt(o[1])}if("matrix"==n){o=r.split(",");isNaN(Number(o[0]))||(e.scaleX*=Number(o[0])),isNaN(Number(o[1]))||(e.skewY+=180*Number(o[1])/Math.PI),isNaN(Number(o[2]))||(e.skewX+=180*Number(o[2])/Math.PI),isNaN(Number(o[3]))||(e.scaleY*=Number(o[3])),isNaN(parseInt(o[4]))||(e.translateX+=parseInt(o[4])),isNaN(parseInt(o[5]))||(e.translateY+=parseInt(o[5]))}return t}),{}),e.x=e.translateX,e.y=e.translateY,e},e.transformToCss=function(t){var e="";return t.x&&0!=t.x&&(e+="translateX("+t.x+"px) "),t.y&&0!=t.y&&(e+="translateY("+t.y+"px) "),t.rotate&&0!=t.rotate&&(e+="rotate("+t.rotate+"deg) "),1!=t.scale&&(e+="scale("+t.scale+","+t.scale+") "),e},e.inserClassCss=function(t,e){var i=(new h).convertJsonToCssString(t),n=document.createElement("style");n.type="text/css",n.textContent=e+"{"+i+"}",document.head&&document.head.appendChild(n)},e.removeAllChildHTMLElement=function(t,e){if(t&&t instanceof HTMLElement)if(e)for(var i=t.getElementsByClassName(e);i.length>0;)t.removeChild(i[0]);else for(;t.firstChild;)t.removeChild(t.firstChild)},e.pointToPage=function(t,e){var i=Array.isArray(t)?[]:{x:0,y:0},n=e.render.getBoundingClientRect(),r=0==n.width?1:e.width/n.width,o=0==n.height?1:e.height/n.height;if(Array.isArray(t))for(var s=0;s<t.length;s++)i.push({x:Math.floor((t[s].x-n.x)*r),y:Math.floor((t[s].y-n.y)*o)});else i.x=Math.floor((t.x-n.x)*r),i.y=Math.floor((t.y-n.y)*o);return i},e.getDistance=function(t,e,i,n){return Math.sqrt((t-i)*(t-i)+(e-n)*(e-n))},e.getBoundingBox=function(t,e){var i={x:t.x,y:t.y,width:t.width,height:t.height};return i.width=Math.abs(t.width*Math.cos(Math.PI*e/180))+Math.abs(t.height*Math.sin(Math.PI*e/180)),i.height=Math.abs(t.width*Math.sin(Math.PI*e/180))+Math.abs(t.height*Math.cos(Math.PI*e/180)),i.x=t.x+t.width/2-i.width/2,i.y=t.y+t.height/2-i.height/2,i},e.getOriginBoxOfBoundingBox=function(t,e){var i={x:t.x,y:t.y,width:t.width,height:t.height};return i.width=Math.floor((Math.abs(t.width*Math.cos(Math.PI*e/180))-Math.abs(t.height*Math.sin(Math.PI*e/180)))/(Math.pow(Math.cos(Math.PI*e/180),2)-Math.pow(Math.sin(Math.PI*e/180),2))),i.height=Math.floor((Math.abs(t.width*Math.sin(Math.PI*e/180))-Math.abs(t.height*Math.cos(Math.PI*e/180)))/(Math.pow(Math.sin(Math.PI*e/180),2)-Math.pow(Math.cos(Math.PI*e/180),2))),i.x=Math.floor(t.x+t.width/2-i.width/2),i.y=Math.floor(t.y+t.height/2-i.height/2),i},e.pointInRect=function(t,e,i){return t>=i.x&&t<=i.x+i.width&&e>=i.y&&e<=i.y+i.height},e.rectInRect=function(t,e){return!(t.x+t.width<e.x)&&(!(t.x>e.x+e.width)&&(!(t.y+t.height<e.y)&&!(e.y+e.height<t.y)))},e.pointRighAngle=function(t,e,i,n,r,o){var s={x:-1,y:-1};if(t==i)return s.x=t,s.y=o,s;if(e==n)return s.x=r,s.y=e,s;var a=(e-n)/(t-i),h=e-a*t,l=-1/a,c=o-l*r;return a==l?(s.x=r,s.y=o):(s.x=(c-h)/(a-l),s.y=l*s.x+c),s},e.pointRighAngleRotate=function(t,i,n,r,o){if(90==(n=e.angleTo180(n))||-90==n)return{x:t,y:o};if(0==n||180==n)return{x:r,y:i};var s={x:r,y:o},a=Math.tan(Math.PI*n/180),h=i-a*t,l=-1/a,c=o-l*r;return a==l?(s.x=r,s.y=o):(s.x=(c-h)/(a-l),s.y=l*s.x+c),s},e.angleTo180=function(t){return t=(t%=360)>180?t-360:t},e.pointLineInOrder=function(t,e,i,n,r,o){var s=Math.sqrt((t-i)*(t-i)+(e-n)*(e-n)),a=Math.sqrt((i-r)*(i-r)+(n-o)*(n-o)),h=Math.sqrt((t-r)*(t-r)+(e-o)*(e-o));return Math.floor(s+a)==Math.floor(h)},e.angleOf=function(t,e,i,n){var r=e-n,o=t-i,s=180*Math.atan2(r,o)/Math.PI;return s<0?360+s:s},e.getPointRotate=function(t,e,i,n,r){var o=Math.PI*r/180,s={x:t,y:e};return s.x=i+(t-i)*Math.cos(o)-(e-n)*Math.sin(o),s.y=n+(t-i)*Math.sin(o)+(e-n)*Math.cos(o),s},e.getRectRotate=function(t,e,i,n){var r=[],o=Math.PI*n/180;return r.push({x:Math.floor(e+(t.x-e)*Math.cos(o)-(t.y-i)*Math.sin(o)),y:Math.floor(i+(t.x-e)*Math.sin(o)+(t.y-i)*Math.cos(o))}),r.push({x:Math.floor(e+(t.x+t.width-e)*Math.cos(o)-(t.y-i)*Math.sin(o)),y:Math.floor(i+(t.x+t.width-e)*Math.sin(o)+(t.y-i)*Math.cos(o))}),r.push({x:Math.floor(e+(t.x+t.width-e)*Math.cos(o)-(t.y+t.height-i)*Math.sin(o)),y:Math.floor(i+(t.x+t.width-e)*Math.sin(o)+(t.y+t.height-i)*Math.cos(o))}),r.push({x:Math.floor(e+(t.x-e)*Math.cos(o)-(t.y+t.height-i)*Math.sin(o)),y:Math.floor(i+(t.x-e)*Math.sin(o)+(t.y+t.height-i)*Math.cos(o))}),r},e.getNodeConner=function(t){var e=[],i=Math.PI*t.rotate/180,n=t.width*t.originX,r=t.height*t.originY;return e.push({x:n+((t.x-n)*Math.cos(i)-(t.y-r)*Math.sin(i))/t.scale,y:r+((t.x-n)*Math.sin(i)+(t.y-r)*Math.cos(i))/t.scale}),e.push({x:n+((t.x+t.width-n)*Math.cos(i)-(t.y-r)*Math.sin(i))/t.scale,y:r+((t.x+t.width-n)*Math.sin(i)+(t.y-r)*Math.cos(i))/t.scale}),e.push({x:n+((t.x+t.width-n)*Math.cos(i)-(t.y+t.height-r)*Math.sin(i))/t.scale,y:r+((t.x+t.width-n)*Math.sin(i)+(t.y+t.height-r)*Math.cos(i))/t.scale}),e.push({x:n+((t.x-n)*Math.cos(i)-(t.y+t.height-r)*Math.sin(i))/t.scale,y:r+((t.x-n)*Math.sin(i)+(t.y+t.height-r)*Math.cos(i))/t.scale}),e},e.createPointTest=function(t,e,i,n,r){var o=document.createElement("div");return o.style.position="absolute",o.style.pointerEvents="none",i.appendChild(o),r&&o.classList.add(r),o.style.display="block",o.style.backgroundColor=n,o.style.opacity="0.4",o.style.borderRadius="50%",o.style.top=e-5+"px",o.style.left=t-5+"px",o.style.width=o.style.height="10px",o},e.makeDragable=function(t){t.dommousedown=function(e){var i=e.currentTarget;i.setAttribute("data-x",e.clientX+""),i.setAttribute("data-y",e.clientY+"");var n=i.style.left?parseInt(i.style.left):0,r=i.style.top?parseInt(i.style.top):0;i.setAttribute("start-x",n+""),i.setAttribute("start-y",r+""),window.addEventListener("mousemove",t.dommousemove),window.addEventListener("mouseup",t.dommouseup),t.style.cursor="move",e.preventDefault()},t.dommousemove=function(t){var e=this,i=parseInt(e.getAttribute("data-x"));if(i){var n=parseInt(e.getAttribute("data-y")),r=parseInt(e.getAttribute("start-x")),o=parseInt(e.getAttribute("start-y"));e.style.left=r+(t.clientX-i)+"px",e.style.top=o+(t.clientY-n)+"px",e.style.cursor="move",t.preventDefault()}},t.dommouseup=function(e){window.removeEventListener("mousemove",t.dommousemove),window.removeEventListener("mouseup",t.dommouseup);var i=this;i.removeAttribute("data-x"),i.removeAttribute("data-y"),i.removeAttribute("start-x"),i.removeAttribute("start-y"),i.style.cursor="default"},t.addEventListener("mousedown",t.dommousedown),t.dommousedown=t.dommousedown.bind(t),t.dommousemove=t.dommousemove.bind(t),t.dommouseup=t.dommouseup.bind(t)},e.clearDragable=function(t){t.removeEventListener("mousedown",t.onmousedown),t.dommouseup&&t.dommouseup()},e.makeIconButtom=function(t,e,i,n){var r=document.createElement("div");if(r.style.cursor="pointer",i)for(var o in i)r.style[o]=i[o];if(e instanceof HTMLImageElement)r.appendChild(e);else{var s=new Image;s.src=e,r.appendChild(s)}var a=document.createElement("span");return a.textContent=t,a.style.pointerEvents="none",r.appendChild(a),r.backgroundColor=i.backgroundColor?i.backgroundColor:"",r.addEventListener("mouseover",(function(t){r.style.backgroundColor=n})),r.addEventListener("mouseout",(function(t){r.style.backgroundColor=r.backgroundColor})),r},e.cropCanvasTransparent=function(t,e){if(!t)return null;e||(e=0);var i=t.width/2,n=t.width>i?i/t.width:1,r=document.createElement("canvas");r.width=Math.round(n*t.width),r.height=Math.round(n*t.height),r.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,r.width,r.height);var o=0,s=0,a=t.width,h=t.height,l=r.getContext("2d").getImageData(0,0,r.width,r.height).data;document.body.appendChild(r);for(var c=0;c<r.height;c++)for(var u=0;u<r.width;u++){if(0!=l[4*(c*r.width+u)+3]){s=Math.floor(c/n),c=r.height;break}}for(c=r.height-1;c>=0;c--)for(u=0;u<r.width;u++){if(0!=l[4*(c*r.width+u)+3]){h=Math.round(c/n),c=-1;break}}for(c=0;c<r.width;c++)for(u=0;u<r.height;u++){if(0!=l[4*(u*r.width+c)+3]){o=Math.floor(c/n),c=r.width;break}}for(c=r.width-1;c>=0;c--)for(u=r.height-1;u>=0;u--){if(0!=l[4*(u*r.width+c)+3]){a=Math.round(c/n),c=-1;break}}o=o<e?o:o-e,s=s<e?s:s-e,a=a+e>t.width?t.width:a+e,h=h+e>t.height?t.height:h+e;var d=document.createElement("canvas");return d.width=a-o,d.height=h-s,d.getContext("2d").drawImage(t,o,s,d.width,d.height,0,0,d.width,d.height),d},e}(),h=function(){function t(){var t=this;this.doesValObject=function(t){return"object"==typeof t&&null!=t},this.isLastNest=function(e){var i=!0;return!t.doesValObject(e)||(Object.keys(e).forEach((function(n){t.doesValObject(e[n])&&(i=!1)})),i)},this.convertNestedStylesToCssString=function(e,i){var n="";return t.isLastNest(i)?n+="".concat(t.styleObjectToString(i)):n+=t.convertJsonToCssString(i),n},this.convertJsonToCssString=function(e){var i="";return Object.keys(e).forEach((function(n){t.doesValObject(e[n])?i+="".concat(n," {").concat(t.convertNestedStylesToCssString(n,e[n]),"}"):i+=t.camelCaseToCssProp(n,e[n])})),i}}return t.prototype.styleObjectToString=function(t){var e=this;return Object.keys(t).reduce((function(i,n){return i+e.camelCaseToCssProp(n,t[n])}),"")},t.prototype.camelCaseToCssProp=function(t,e){return t.split(/(?=[A-Z])/).join("-").toLowerCase()+":"+e+";"},t}(),l=function(){function t(){}return t.prototype.getSqDist=function(t,e){var i=t.x-e.x,n=t.y-e.y;return i*i+n*n},t.prototype.getSqSegDist=function(t,e,i){var n=e.x,r=e.y,o=i.x-n,s=i.y-r;if(0!==o||0!==s){var a=((t.x-n)*o+(t.y-r)*s)/(o*o+s*s);a>1?(n=i.x,r=i.y):a>0&&(n+=o*a,r+=s*a)}return(o=t.x-n)*o+(s=t.y-r)*s},t.prototype.simplifyRadialDist=function(t,e){for(var i,n=t[0],r=[n],o=1,s=t.length;o<s;o++)i=t[o],this.getSqDist(i,n)>e&&(r.push(i),n=i);return n!==i&&r.push(i),r},t.prototype.simplifyDPStep=function(t,e,i,n,r){for(var o,s=n,a=e+1;a<i;a++){var h=this.getSqSegDist(t[a],t[e],t[i]);h>s&&(o=a,s=h)}s>n&&(o-e>1&&this.simplifyDPStep(t,e,o,n,r),r.push(t[o]),i-o>1&&this.simplifyDPStep(t,o,i,n,r))},t.prototype.simplifyDouglasPeucker=function(t,e){var i=t.length-1,n=[t[0]];return this.simplifyDPStep(t,0,i,e,n),n.push(t[i]),n},t.prototype.simplify=function(t,e,i){if(t.length<=2)return t;var n=void 0!==e?e*e:1;return t=i?t:this.simplifyRadialDist(t,n),t=this.simplifyDouglasPeucker(t,n)},Object.defineProperty(t.prototype,"className",{get:function(){return"Simplify"},enumerable:!1,configurable:!0}),t}(),c=function(){function t(){this._id=t.genId(this.className),this._events={}}return t.genId=function(e){for(var i="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=n.length,o=0;o<6;o++)i+=n.charAt(Math.floor(Math.random()*r));return t._count=t._count>=Number.MAX_VALUE?0:t._count+1,i=e+"_"+t._count+"_"+i+"_"+(new Date).getTime()},t.prototype.on=function(t,e,i){if(t&&""!=t.trim()&&e){var n={event:t,callback:e,caller:i||null};this._events||(this._events={}),this._events[t]||(this._events[t]=[]),this._events[t].push(n)}else console.log("addEventListener need event not empty !")},t.prototype.removeListener=function(t,e,i){if(t&&""!=t.trim())if(e){if(this._events[t]){var n=this._events[t].concat([]);if(this._events[t]=[],e)for(var r=0;r<n.length;r++)(n[r].callback!=e||n[r].caller!=i)&&this._events[t].push(n[r])}}else this._events[t]&&delete this._events[t];else for(var o in this._events)delete this._events[o]},t.prototype.emit=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(t&&""!=t.trim()){var n=this._events[t];if(n)for(var r=0;r<n.length;r++){var o=n[r];o.callback.apply(o.caller,e)}}else console.log("_fireEvent need event not empty !")},t.prototype.getId=function(){return this._id},Object.defineProperty(t.prototype,"className",{get:function(){return"ClassBase"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){return"Base"},enumerable:!1,configurable:!0}),t._count=0,t}();!function(t){t.UNKNOW="unknow",t.NUMBER="number",t.STRING="string",t.BOOLEAN="boolean",t.ARRAY="array",t.BIGINT="bigint",t.OBJECT="object"}(e||(e={})),function(t){t.COLOR="COLOR",t.DATETIME="DATETIME"}(r||(r={})),function(t){t.GET="GET",t.SET="SET",t.EXPO="EXPO",t.LANG="LANG"}(o||(o={})),function(t){t.UI="UI",t.HANDLER="HANDLER",t.RENDER="RENDER",t.SET="SET",t.GET="GET"}(s||(s={}));var u=function(){this.dataType=e.UNKNOW,this.proType=[o.GET,o.SET,o.EXPO],this.renderFuncName="render"},d=function(){},p=function(){this.className="",this.pro={},this.func={}};function f(t){if("number"==typeof t||"string"==typeof t||"boolean"==typeof t||"bigint"==typeof t||"symbol"==typeof t)return t;if("function"==typeof t)return t;if(Array.isArray(t)){for(var e=[],i=0;i<t.length;i++){var n=f(t[i]);e.push(n)}return e}if("object"==typeof t){n={};for(var r in t)n[r]=f(t[r]);return n}}function g(t){var e=t.constructor;e.descriptor||(e.descriptor=new p);var i=e.descriptor,n=t.className||t.prototype.className;return i.className&&i.className==n||(e.descriptor=f(i),e.descriptor.className=n),e.descriptor}function _(t){var e=t,i=e.charAt(0);return e="_"==i?e.substring(1):i==i.toLocaleUpperCase()?i.toLocaleLowerCase()+e.substring(1):i.toUpperCase()+e.substring(1)}function y(t,i,n){var r=g(t).pro,o=i,s=r[o];s||(s=new u),n.proType&&(s.proType=n.proType),n.src&&(s.src=n.src),null!=n.renderFuncName&&null!=n.renderFuncName&&(s.renderFuncName=n.renderFuncName),n.defaultVal&&(s.defaultVal=n.defaultVal),n.dataType&&(s.dataType,e.UNKNOW,s.dataType=n.dataType),r[o]=s}function m(t,e,i){var n=i.value;n._isRunning=!1,i.value=function(){if(!n._isRunning){n._isRunning=!0;var t=n.call(this,arguments);return n._isRunning=!1,t}}}!function(){function t(){}t.classDes=function(){return function(t,e){g(t)}},t.removeProDes=function(t){return function(e,i){var n=e.descriptor.pro;t.forEach((function(t){n[t]&&delete n[t]}))}},t.number=function(t){return t=t||"render",function(i,n,r){y(i,n,{dataType:e.NUMBER,renderFuncName:t})}},t.string=function(t){return t=t||"render",function(i,n,r){y(i,n,{dataType:e.STRING,renderFuncName:t})}},t.stringColor=function(t){return t=t||"render",function(i,n,o){y(i,n,{dataType:e.STRING,src:r.COLOR,renderFuncName:t})}},t.stringDateTime=function(t){return t=t||"render",function(i,n,o){y(i,n,{dataType:e.STRING,src:r.DATETIME,renderFuncName:t})}},t.boolean=function(t){return t=t||"render",function(i,n,r){y(i,n,{dataType:e.BOOLEAN,renderFuncName:t})}},t.object=function(t){return t=t||"render",function(i,n,r){y(i,n,{dataType:e.OBJECT,renderFuncName:t})}},t.array=function(t){return t=t||"render",function(i,n,r){y(i,n,{dataType:e.ARRAY,renderFuncName:t})}},t.render=function(t){return t=t||"render",function(e,i,n){y(e,i,{renderFuncName:t})}},t.scrColor=function(){return function(t,e,i){y(t,e,{src:r.COLOR})}},t.srcDateTime=function(){return function(t,e,i){y(t,e,{src:r.DATETIME})}},t.src=function(t){return function(e,i,n){y(e,i,{src:t})}},t.notSet=function(){return function(t,e,i){var n=g(t).pro,r=_(e);n[r]&&n[r].proType&&n[r].proType.remove(o.SET)}},t.notExpo=function(){return function(t,e,i){var n=g(t).pro,r=_(e);n[r]&&n[r].proType&&n[r].proType.remove(o.EXPO)}},t.notGet=function(){return function(t,e,i){var n=g(t).pro,r=_(e);n[r]&&n[r].proType&&n[r].proType.remove(o.GET)}},t.language=function(){return function(t,e,i){y(t,e,{proType:[o.LANG]})}},t.funchandler=function(){return function(t,e,i){!function(t,e,i){var n=g(t).func,r=n[e];r||(i=new d),i.funcType&&(r.funcType=i.funcType),n[e]=r}(t,e,{funcType:s.HANDLER})}},t.funcrender=function(){return function(t,e,i){m(0,0,i)}},t.funcget=function(){return function(t,e,i){m(0,0,i)}},t.funcset=function(){return function(t,e,i){m(0,0,i)}}}();var b,v,N,E,C,w,T,O,M,x,A,D,P=(b=function(t,e){return b=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},b(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}b(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),I=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._isInit=!1,e._name="",e._tags=[],e}return P(e,t),e.getClassName=function(){return this.prototype.className},e.getClassType=function(){return this.prototype.classType},e.prototype.init=function(){this._lastHis="",this._name="",this._tags=[],this._isInit=!0},e.prototype.getData=function(){var t={className:this.className},e=this.getDescriptor();if(e)for(var i in e.pro)e.pro[i].proType&&e.pro[i].proType.indexOf(o.GET)>=0&&a.notNull(this[i])&&(t[i]=this[i]);return t},e.prototype.setData=function(t,e){try{for(var i in t)"className"!=i&&(this[i]=t[i])}catch(t){this.log("Exception : "),this.log(t)}},e.prototype.export=function(){var t={className:this.className},e=this.getDescriptor();if(e)for(var i in e.pro)e.pro[i].proType&&e.pro[i].proType.indexOf(o.EXPO)>=0&&a.notNull(this[i])&&(t[i]=this[i]);return t},e.prototype.setHis=function(t){},e.prototype.getHis=function(){return""},e.prototype.getDescriptor=function(){return this.constructor.descriptor},e.prototype.setNote=function(t){this._note=t,this._isInit||this.init()},e.prototype.getNote=function(){return this._note},e.prototype.getConfig=function(){return"getConfig"},e.prototype.log=function(){for(var t,e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];this._note?(t=this._note).log.apply(t,e):console.log.apply(console,e)},e.prototype.renderName=function(){},e.prototype.renderTags=function(){},e.prototype.setTag=function(t){this._tags.addFilter(t)},e.prototype.removeTag=function(t){this._tags.removeFilter(t)},e.prototype.hasTag=function(t){return this._tags.has(t)},Object.defineProperty(e.prototype,"name",{get:function(){return this._name},set:function(t){this._name=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tags",{get:function(){return this._tags},set:function(t){this._tags=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastHis",{get:function(){return this._lastHis},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"ClassNote"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){return"ClassNote"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"note",{get:function(){return this._note},enumerable:!1,configurable:!0}),e}(c);!function(t){t.EXPORT="EXPORT",t.LANG="LANG"}(v||(v={})),function(t){t.LEFT="left",t.RIGHT="right",t.CENTER="center"}(N||(N={})),function(t){t.TOP="top",t.BOTTOM="bottom",t.CENTER="center"}(E||(E={})),function(t){t.EDIT="edit",t.VIEW="view",t.COMMENT="comment"}(C||(C={})),function(t){t.FIT_WIDTH="fit_width",t.FIT_HEIGHT="fit_height",t.FIT_CONTENT="fit_content",t.FIT_SIZE="fit_size",t.FIT_AUTO="fit_auto"}(w||(w={})),function(t){t.NOTLOAD="notload",t.LOADING="loading",t.LOADFAIL="loadfail",t.LOADED="loaded"}(T||(T={})),function(t){t.UNKNOW="",t.IMAGE="image",t.VIDEO="video",t.AUDIO="audio",t.PDF="pdf",t.DOCX="docx",t.PPTX="pptx",t.XLSX="xlsx",t.LOTTIEANIM="lottieAnim",t.WEBVIEW="webview"}(O||(O={})),function(t){t.TOUCH="touch",t.MOUSE="mouse"}(M||(M={})),function(t){t.READY="ready",t.LOAD_EVENT="load_event",t.MODULE_CHANGE="module_change",t.MODULE_LOADED="module_loaded",t.MODULE_LOADFAIL="module_loadfail",t.NOTE_SELECTION_START="note_selection_start",t.NOTE_SELECTION_MOVING="note_selection_moving",t.NOTE_SELECTION_END="note_selection_end",t.NOTE_NODE_SELECTED="note_node_selected",t.NOTE_PAGE_SELECTED="note_page_selected",t.NOTE_PAGE_VIEW_CHANGE="note_page_view_change",t.NOTE_PAGE_CHANGE="note_page_change",t.NOTE_PAGE_ADD="note_page_add",t.NOTE_PAGE_REMOVE="note_page_remove",t.PAGE_CHANGE="page_change",t.NOTE_HANDLER_RENDER_CHANGE="note_handler_render_change",t.NOTE_ZOOM_CHANGE="note_zoom_change",t.NOTE_KEYUP="note_keyup",t.NOTE_KEYDOWN="note_keydown",t.TEXT_INPUT_FOCUS="text_input_focus",t.TEXT_INPUT_BLUR="text_input_blur",t.NODE_CHANGE="node_change",t.NODE_SIZE_CHANGE="node_size_change",t.NODE_TRANSFORM_CHANGE="node_transform_change",t.NODE_MOUSE_OVER="node_mouse_over",t.NODE_MOUSE_OUT="node_mouse_out",t.NODE_MOUSE_MOVE="node_mouse_move",t.NODE_MOUSE_DOWN="node_mouse_down",t.NODE_MOUSE_UP="node_mouse_up",t.NODE_OVER="node_over",t.NODE_OUT="node_out",t.NODE_MOVE="node_move",t.NODE_DOWN="node_down",t.NODE_UP="node_up",t.NODE_CLICK="node_click",t.NODE_DBLCLICK="node_dblclick",t.NODE_MULTICLICK="node_multiclick",t.NODE_MOUSE_CLICK="node_mouse_click",t.NODE_MOUSE_DBLCLICK="node_mouse_dblclick",t.NOTE_CMD_CHANGE="note_cmd_change"}(x||(x={})),function(t){t.SHIFT="shift",t.META="meta",t.CONTROL="control",t.ALT="alt"}(A||(A={})),function(t){t.UIPAGE="UIPage",t.UINODE="UINode",t.NOTE="Note",t.CMD="Cmd",t.HANDLER="Handler"}(D||(D={}));var L=function(){function t(){}return Object.defineProperty(t.prototype,"className",{get:function(){return"Logger"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"getType",{get:function(){return"Logger"},enumerable:!1,configurable:!0}),t}(),S=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),k=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return S(e,t),e.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var i=(new Date).toISOString(),n=i.substr(i.length-13,13);t.splice(0,0,n),console.log.apply(console,t)},Object.defineProperty(e.prototype,"className",{get:function(){return"TimestampLogger"},enumerable:!1,configurable:!0}),e}(L),H=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),R=function(){function t(){this.resources={},this._timeout=6e4,this._testFontDiv=document.createElement("div"),document.body.appendChild(this._testFontDiv)}return t.prototype.loadJs=function(t,e,i,n){var r=this;if("string"==typeof e&&(e=[e]),(isNaN(n)||n<0)&&(n=0),e.length<=n)i&&i(!0);else{var o=e[n];if(this.resources[o]&&this.resources[o].status==T.LOADED)return void this.loadJs(t,e,i,n+1);this.resources[o]={type:"javascript",status:T.LOADING,src:o,name:o};var s=document.createElement("script");s.onload=function(){r.resources[o].status=T.LOADED,r.loadJs(t,e,i,n+1)},s.onerror=function(){r.resources[o].status=T.LOADFAIL,i&&i(!1)},s.src=o,document.head.appendChild(s)}},t.prototype.loadCss=function(t,e){var i=this;"string"==typeof e&&(e=[e]),e.forEach((function(t){if(!i.resources[t]){i.resources[t]={type:"stylesheet",status:T.LOADED,src:t,name:t};var e=document.createElement("link");e.setAttribute("rel","stylesheet"),e.setAttribute("href",t),document.head&&document.head.appendChild(e)}}))},t.prototype.loadFont=function(t,e,i,n){if(this.resources[i])this.resources[i].status==T.LOADED?n(!0):this.resources[i].status==T.LOADING&&n&&this.resources[i].callbacks.push(n);else{var r=document.createElement("style");r.type="text/css",r.textContent="@font-face {font-family:'"+i+"';src: url("+e+");}",document.head&&document.head.appendChild(r),this.resources[i]={type:"fontface",status:T.LOADING,src:e,name:i,callbacks:[n]},this.createFontTest(i),this.startCheckFont()}},t.prototype.startCheckFont=function(){var t=this;clearInterval(this._idCheckFont),this._idCheckFont=setInterval((function(){var e=t._testFontDiv.childNodes;0==e.length&&clearInterval(t._idCheckFont),e.length>0&&Array.from(e).forEach((function(e){if(e.offsetWidth+""!=e.getAttribute("oldWidth")){var i=e.getAttribute("family"),n=t.resources[i].callbacks;n&&n.forEach((function(t){t.call(!0)})),e.parentNode.removeChild(e)}}))}),200)},t.prototype.createFontTest=function(t){var e=document.createElement("span");e.textContent="giItT1WMmQy@!-/#",e.style.position="absolute",e.style.left="-1000px",e.style.top="-1000px",e.style.fontSize="50px",e.style.fontFamily="sans-serif",e.style.fontVariant="normal",e.style.fontStyle="normal",e.style.fontWeight="normal",e.style.letterSpacing="0",e.setAttribute("family",t),this._testFontDiv.appendChild(e);var i=Math.floor(e.offsetWidth);e.setAttribute("oldWidth",i+""),e.style.fontFamily=t},t}();window.NoteGlobal||(window.NoteGlobal=new R);var j,F=function(t){function e(e){var i=t.call(this)||this;return i._isTouchCapable=!1,i._isMobile=!1,i._isWebview=!1,i._history=[],i._indexHis=-1,i._isStarted=!1,i.init(),console.log("Initing Note Version "+e.version),e.coreUrl?i.loadCore(e.coreUrl+"?ver="+e.version,(function(){i.initNote(e)})):i.initNote(e),i}return H(e,t),e.prototype.defaultCheckTouchCapable=function(t){return null!=this._isTouchCapable&&null!=this._isTouchCapable||(this._isTouchCapable="ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch||navigator.maxTouchPoints>0||window.navigator.msMaxTouchPoints>0),this._isTouchCapable},e.prototype.defaultCheckIsMobile=function(t){return null!=this._isMobile&&null!=this._isMobile&&this._isMobile},e.prototype.defaultCheckIsWebview=function(t){return null!=this._isWebview&&null!=this._isWebview&&this._isWebview},e.prototype.loadCore=function(t,e){console.log("load module note core "+t);var i=document.createElement("script");i.onload=function(){window.nCore;window.NoteBinder&&window.NoteBinder.doBind("nCore"),e()},i.onerror=function(){console.log("Load module core error !")},i.src=t,document.head.appendChild(i)},e.prototype.initNote=function(t){var e=this;for(var i in this._config={version:"0.1",backgroundColor:"#CCCCCC",backgroundContentColor:"#FFFFFF",trustDomain:["localhost","youtube"],configUrl:"",parent:document.body,width:960,height:640,zoom:1,stepZoom:.2,maxZoom:5,minZoom:.2,enableLog:!0,maxHis:50,keywordMobile:["android","ios","iphone","ipad"],keywordWebview:["webview","zalo","fb","facebook","messenger","whatapp","viber","tele","telegram"]},this._modules=[],this._nodeSelected=[],this._pages=[],this._pageSelected=null,this._clipboard={},this._registerNodes={},this._registerCmds={},this._registerHandlers={},this._registerInstance={},this._registerClassType={},this._history=[],this._indexHis=-1,this._registerInstance[this.getId()]=this,this._config.logger||(this._config.logger=new k),t)a.notNull(t[i])&&(this._config[i]=t[i]);this._initUI(),this._config.configUrl?"string"==typeof this._config.configUrl?fetch(this._config.configUrl+"?ver="+this._config.version).then((function(t){return t.text()})).then((function(t){try{var i=JSON.parse(t),n=i.modules;delete i.modules,a.merge(e._config,i),Array.isArray(n)&&e._parseModuleConfig(n)}catch(t){e.log("get module config error "+e._config.modules)}})).catch((function(t){e.log(t)})):"object"==typeof this._config.modules&&this._parseModuleConfig(this._config.modules):this._start()},e.prototype._parseModuleConfig=function(t){if(t&&Array.isArray(t)&&0!=t.length){for(var e=0;e<t.length;e++){var i={};this._mergeModuleData(i,t[e]),i.json&&i.id&&(i.status=T.NOTLOAD,this._modules.push(i))}this._findAndLoadModule()}else this._start()},e.prototype._mergeModuleData=function(t,e){var i=this._config.configUrl.toString().replace("config.json","");e.json&&"string"==typeof e.json&&!t.json&&(t.json=i+e.json),e.js&&"string"==typeof e.js&&!t.js&&(t.js=i+e.js),e.id&&"string"==typeof e.id&&!t.id&&(t.id=e.id),e.ver&&"string"==typeof e.ver&&!t.ver&&(t.ver=e.ver),e.description&&"string"==typeof e.description&&!t.description&&(t.description=e.description),e.registerNodes&&Array.isArray(e.registerNodes)&&!t.registerNodes&&(t.registerNodes=e.registerNodes),e.registerCmds&&Array.isArray(e.registerCmds)&&!t.registerCmds&&(t.registerCmds=e.registerCmds),e.registerHandlers&&Array.isArray(e.registerHandlers)&&!t.registerHandlers&&(t.registerHandlers=e.registerHandlers),e.registerClassTypes&&Array.isArray(e.registerClassTypes)&&!t.registerClassTypes&&(t.registerClassTypes=e.registerClassTypes),e.dependencies&&Array.isArray(e.dependencies)&&!t.dependencies&&(t.dependencies=e.dependencies),e.config&&"object"==typeof e.config&&!t.config&&(t.config=e.config),e.loadlater&&"boolean"==typeof e.loadlater&&!t.loadlater?t.loadlater=e.loadlater:t.loadlater=!1},e.prototype.addModule=function(t){if(!t.json||!t.id)return this.log("load module not valid . Missing json or id "+JSON.stringify(t)),!1;var e=!1;if(this._modules.forEach((function(i){i.id==t.id&&(e=!0)})),e)return this.log("add module not success . Already has module id "),!1;this._findAndLoadModule()},e.prototype.loadModule=function(t){var e;this._modules.forEach((function(i){i.id==t&&(e=i)})),e&&e.status==T.NOTLOAD&&(e.loadlater=!1,e.status=T.NOTLOAD,this._findAndLoadModule())},e.prototype.getModuleData=function(t){for(var e=0;e<this._modules.length;e++)if(this._modules[e].id==t)return a.deepClone(this._modules[e]);return null},e.prototype.getStatusModule=function(t){for(var e=0;e<this._modules.length;e++)if(this._modules[e].id==t)return this._modules[e].status;return T.NOTLOAD},e.prototype.checkDependenciesModuleLoaded=function(t){if(!t.dependencies||!Array.isArray(t.dependencies)||0==t.dependencies.length)return"";for(var e=0;e<t.dependencies.length;e++){for(var i=!1,n=0;n<this._modules.length;n++)if(this._modules[n].id==t.dependencies[e]&&this._modules[n].status==T.LOADED){i=!0;break}if(!i)return t.dependencies[e]}return""},e.prototype._findAndLoadModule=function(){for(var t,e=this,i=0;i<this._modules.length;i++)if(this._modules[i].status==T.NOTLOAD&&0==this._modules[i].loadlater){t=this._modules[i];break}if(!t)return this.log("All module need load is loaded !"),void(this._isStarted||this._start());t.status=T.LOADING;var n=this.checkDependenciesModuleLoaded(t);""==n?fetch(t.json+"?ver="+t.ver).then((function(t){return t.text()})).then((function(i){try{var n=JSON.parse(i);e._mergeModuleData(t,n),e._loadJs(t)}catch(n){e._onLoadModuleFinish(t,!1,"Load module "+t.id+" error .Parse json error "+i)}})).catch((function(i){e._onLoadModuleFinish(t,!1,"Load module "+t.id+" error . Error get json "+t.json)})):this._onLoadModuleFinish(t,!1,"Load module "+t.id+" error . Dependencies not load : "+n)},e.prototype._loadJs=function(t){var e=this;t.status=T.LOADING;var i=document.createElement("script");i.onload=function(){if(window[t.id])e._onLoadModuleFinish(t,!0,"");else{var i="load module fail because not found object module id in window "+JSON.stringify(t);e.log(i),e._onLoadModuleFinish(t,!1,i)}},i.onerror=function(){var i="load module fail because , js file load fail ! "+JSON.stringify(t);e.log(i),e._onLoadModuleFinish(t,!1,i)},i.src=t.js+"?ver="+t.ver,document.head.appendChild(i)},e.prototype._onLoadModuleFinish=function(t,e,i){e?(t.status=T.LOADED,this._doBindModule(t),this.emit(x.MODULE_LOADED,t),this.log("module loaded : "+t.id)):(t.status=T.LOADFAIL,this.emit(x.MODULE_LOADFAIL,t,i),this.log("module fail : "+t.id)),this._findAndLoadModule()},e.prototype._doBindModule=function(t){var e=window[t.id];if(e){if(window.NoteBinder&&window.NoteBinder.doBind(t.id),t.registerClassTypes){var i=[];t.registerClassTypes.forEach((function(n){if(e[n]){var r=t.config[n]||{};i.push({classtype:e[n],config:r})}})),this.registerClassTypes(i)}if(t.registerNodes){var n=[];t.registerNodes.forEach((function(i){if(e[i]){var r=t.config[i]||{};n.push({node:e[i],config:r})}})),this.registerNodes(n)}if(t.registerCmds){var r=[];t.registerCmds.forEach((function(i){if(e[i]){var n=t.config[i]||{};r.push({cmd:e[i],config:n})}})),this.registerCmds(r)}if(t.registerHandlers){var o=[];t.registerHandlers.forEach((function(i){if(e[i]){var n=t.config[i]||{};o.push({handler:e[i],config:n})}})),this.registerHandlers(o)}}},Object.defineProperty(e.prototype,"version",{get:function(){return this._config.version},enumerable:!1,configurable:!0}),e.prototype._start=function(){var t=this;this.log(this._config),this._isStarted=!0,this._browserData={},this._isTouchCapable=this._config.checkTouchCapable?this._config.checkTouchCapable(this):this.defaultCheckTouchCapable(this),this._isMobile=this._config.checkIsMobile?this._config.checkIsMobile(this):this.defaultCheckIsMobile(this),this._isWebview=this._config.checkIsWebview?this._config.checkIsWebview(this):this.defaultCheckIsWebview(this),this._applyConfig(),this._initKeyboard(),this.on(x.PAGE_CHANGE,(function(e){t.onPageChange(e)}));var e="ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch||navigator.maxTouchPoints>0||window.navigator.msMaxTouchPoints>0;this._config.actionMode=e?M.TOUCH:M.MOUSE,this.log("action mode : "+this._config.actionMode),setTimeout((function(){t.emit(x.READY),t._config.onready&&"function"==typeof t._config.onready&&t._config.onready()}),100)},e.prototype._initUI=function(){this._render=document.createElement("div"),this._render.style.position="absolute",this._render.classList.add(this.classType),this._render.style.width=this._config.width+"px",this._render.style.height=this._config.height+"px",this._render.style.overflow="hidden",this._config.parent.appendChild(this._render),a.inserClassCss({boxSizing:"content-box"},".Note *"),a.inserClassCss({margin:"0px",padding:"0px"},".Note p"),a.inserClassCss({pointerEvents:"none"},".Note img"),a.inserClassCss({minWidth:"20px",minHeight:"20px"},".Note span"),a.inserClassCss({margin:"0px",listStyleType:"initial"},".Note ul"),a.inserClassCss({margin:"0px"},".Note li"),a.inserClassCss({outline:"none"},"div:focus")},Object.defineProperty(e.prototype,"render",{get:function(){return this._render},enumerable:!1,configurable:!0}),e.prototype.appendHandlerRender=function(t){t&&t instanceof HTMLElement&&(this._render.appendChild(t),this.emit(x.NOTE_HANDLER_RENDER_CHANGE))},e.prototype.removeHandlerRender=function(t){t&&t instanceof HTMLElement&&t.parentNode==this._render&&(this._render.removeChild(t),this.emit(x.NOTE_HANDLER_RENDER_CHANGE))},e.prototype.setTextFocus=function(t){this._textFocus=t,t?this.emit(x.TEXT_INPUT_FOCUS,t):this.emit(x.TEXT_INPUT_BLUR,t)},e.prototype.getTextFocus=function(){return this._textFocus},e.prototype.load=function(t){t&&t.pages&&Array.isArray(t.pages)?(this.addPage(t.pages),this.saveHistory(this)):this.log("Load data not valid !")},e.prototype.export=function(){var t={};return t.version=this._config.version,t.pages=[],this._pages.forEach((function(e){t.pages.push(e.export())})),t},e.prototype.reset=function(){for(var t in this._nodeSelected=[],this._pages=[],this._pageSelected=null,this._clipboard={},this._registerInstance={},this._history=[],this._indexHis=-1,this.emit(x.NOTE_PAGE_CHANGE),this._registerHandlers)this._registerHandlers[t].stop()},e.prototype.setClipboardData=function(t,e){this._clipboard[t]=e},e.prototype.getClipboardData=function(t){var e=this._clipboard[t];return e&&delete this._clipboard[t],e},e.prototype.getHis=function(){var t=[];return this._pages.forEach((function(e){t.push(e.getHis())})),t},e.prototype.setHis=function(t){if(t)try{var e=t;if(this.log("setNote His "),this.log(t),!Array.isArray(e))return;for(var i=0;i<e.length;i++)i<this._pages.length&&this._pages[i].setHis(e[i])}catch(t){return}},e.prototype.onPageChange=function(t){1!=t.hisSetting&&this.saveHistory(t)},e.prototype.saveHistory=function(t){var e=t.getHis();""!=e&&(this._indexHis==this._history.length-1||this._history.splice(this._indexHis+1,this._history.length),this._history.push({instId:t.getId(),data:e}),this._indexHis=this._history.length-1)},e.prototype.undo=function(){if(!(this._history.length<=0||this._indexHis<=0)){this.setNodeSelected(null),this._indexHis--;var t=this._history[this._indexHis];this.doSetHisData(t)}},e.prototype.redo=function(){if(!(this._history.length<=0||this._indexHis>=this._history.length-1)){this.setNodeSelected(null),this._indexHis++;var t=this._history[this._indexHis];this.doSetHisData(t)}},e.prototype.doSetHisData=function(t){t.instId==this.getId()?this.setHis(t.data):this._registerInstance[t.instId]&&this._registerInstance[t.instId].setHis(t.data)},e.prototype.getRegisterInstance=function(){return this._registerInstance},e.prototype.setConfig=function(t){isNaN(Number(t.width))&&delete t.width,isNaN(Number(t.height))&&delete t.height,a.mergePartial(this._config,t),this.log("set config : "+this._config.width+":"+this._config.height),this._applyConfig()},e.prototype.getConfig=function(){return this._config},Object.defineProperty(e.prototype,"config",{get:function(){return this._config},enumerable:!1,configurable:!0}),e.prototype._applyConfig=function(){var t=parseInt(this._render.style.width),e=parseInt(this._render.style.height),i=Math.abs(this._config.width-t)>3||Math.abs(this._config.height-e)>3;this._config.width&&(this._render.style.width=this._config.width+"px"),this._config.height&&(this._render.style.height=this._config.height+"px"),this._render.style.backgroundColor=this._config.backgroundColor,i&&this.emit(x.NOTE_PAGE_CHANGE),this._config.parent&&this.render.parentNode!=this._config.parent&&this._config.parent.appendChild(this._render)},Object.defineProperty(e.prototype,"zoom",{get:function(){return this._config.zoom},set:function(t){!t||isNaN(t)||t<0||t>this._config.maxZoom||t<this._config.minZoom||(this._config.zoom=t,this.emit(x.NOTE_ZOOM_CHANGE))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._config.width},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._config.height},enumerable:!1,configurable:!0}),e.prototype.isTouchCapable=function(){return this._isTouchCapable},e.prototype.isMobile=function(){return this._isMobile},e.prototype.isWebview=function(){return this._isWebview},e.prototype.enableLog=function(){this._config.enableLog=!0},e.prototype.disableLog=function(){this._config.enableLog=!1},e.prototype.setLogger=function(t){this._config.logger=t},e.prototype.log=function(){for(var t,e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];this._config.logger&&this._config.enableLog?(t=this._config.logger).log.apply(t,e):console.log.apply(console,e)},e.prototype.registerCmd=function(t,e){if(!t)return!1;var i=t.prototype.className;return!(!i||"string"!=typeof i)&&(i=i.trim(),this._registerCmds[i]?(this.log("RegisterCmd fail , cmd name aldready register ! "+i),!1):(this.log("register cmd : "+i),this._registerCmds[i]={cmd:t,config:e},this.emit(x.NOTE_CMD_CHANGE),!0))},e.prototype.unregisterCmd=function(t){return!!t&&(this._registerCmds[t]?(delete this._registerCmds[t],!0):(this.log("UnregisterCmd fail , cmd name not register !"+t),!1))},e.prototype.registerCmds=function(t){if(!t||!Array.isArray(t))return[!1];for(var e=[],i=0;i<t.length;i++)e.push(this.registerCmd(t[i].cmd,t[i].config));return e},e.prototype.unregisterCmds=function(t){if(!t||!Array.isArray(t))return[!1];for(var e=[],i=0;i<t.length;i++)e.push(this.unregisterCmd(t[i]));return e},e.prototype.getAllRegisterCmdName=function(){var t=[];for(var e in this._registerCmds)t.push(e);return t},e.prototype.getRegisterCmd=function(){var t=[];for(var e in this._registerCmds)t.push(this._registerCmds[e].cmd);return t},e.prototype.doCmd=function(t,e){if(this._registerCmds[t]){var i=new this._registerCmds[t].cmd;i.setNote(this);var n=a.deepClone(this._registerCmds[t].config);return n=n?a.deepMerge(n,e):e,i.do(e)}},e.prototype.registerHandler=function(t,e){if(t){var i=t.prototype.className;if(i&&"string"==typeof i){i=i.trim(),this._registerHandlers[i]&&this.log("RegisterHandler fail , handler name aldready register ! "+i),this.log("register handler : "+i);var n=new t;n.setNote(this),e||(e={}),a.isNull(e.autoStart)&&(e.autoStart=!0),n.setData(e),e&&1==e.autoStart&&n.start(),this._registerHandlers[i]=n,this._registerInstance[n.getId()]=n}}},e.prototype.unregisterHandler=function(t){var e=this;t&&(this._registerHandlers[t]||this.log("UnregisterHandler fail , handler name not register !"+t),this._registerHandlers[t].stop((function(i){i&&delete e._registerHandlers[t]})))},e.prototype.registerHandlers=function(t){if(t&&Array.isArray(t))for(var e=0;e<t.length;e++)this.registerHandler(t[e].handler,t[e].config)},e.prototype.unregisterHandlers=function(t){if(!t||!Array.isArray(t))for(var e=0;e<t.length;e++)this.unregisterHandler(t[e])},e.prototype.getHandlerByName=function(t){return t&&this._registerHandlers[t]?this._registerHandlers[t]:null},e.prototype.getAllHandler=function(){var t=[];for(var e in this._registerHandlers)t.push(this._registerHandlers[e]);return t},e.prototype.getAllRegisterHandlerName=function(){var t=[];for(var e in this._registerHandlers)t.push(e);return t},e.prototype.registerNode=function(t,e){if(!t)return!1;var i=t.prototype.className;return!(!i||"string"!=typeof i)&&(i=i.trim(),this._registerNodes[i]?(this.log("RegisterNode fail , node name aldready register ! "+i),!1):(this.log("registerNode : "+i),this._registerNodes[i]={node:t,config:e},!0))},e.prototype.unregisterNode=function(t){return!!t&&(this._registerNodes[t]?(delete this._registerNodes[t],!0):(this.log("UnregisterNode fail , node name not register !"+t),!1))},e.prototype.registerNodes=function(t){if(!t||!Array.isArray(t))return[!1];for(var e=[],i=0;i<t.length;i++)e.push(this.registerNode(t[i].node,t[i].config));return e},e.prototype.unregisterNodes=function(t){if(!t||!Array.isArray(t))return[!1];for(var e=[],i=0;i<t.length;i++)e.push(this.unregisterNode(t[i]));return e},e.prototype.getAllRegisterNodeName=function(){var t=[];for(var e in this._registerCmds)t.push(e);return t},e.prototype.addNode=function(t,e){var i=this;if(!t)return null;if(a.isNull(e)&&(e=this._pages.indexOf(this.getPageSelected())),!(e<0||e>=this._pages.length)){var n=[];if("string"==typeof t)n=[{className:t}];else if(Array.isArray(t))n=t;else{if("object"!=typeof t)return null;n.push(t)}var r=[];return n.forEach((function(t){var n=i.createNode(t);if(n){var o=i._pages[e];if(o.addChild(n),!0,r.push(n),!n.x&&!n.y){n.x=o.width/2-n.width/2;var s=a.pointToPage({x:0,y:window.innerHeight/2},o);n.y=s.y-n.height/2}}})),this.emit(x.PAGE_CHANGE,this._pages[e]),1==r.length?r[0]:r}},e.prototype.getNodeSelected=function(){return this._nodeSelected.concat([])},e.prototype.setNodeSelected=function(t){t&&Array.isArray(t)||(t=[],this.emit(x.NOTE_NODE_SELECTED)),this.compareListNode(t,this._nodeSelected)||(this._nodeSelected=t.concat([]),this.emit(x.NOTE_NODE_SELECTED))},e.prototype.createNode=function(t){if(!t.className)return this.log("node data don't has className ",t),null;if(!this._registerNodes[t.className])return this.log("can't find className node register ",t),null;var e=new this._registerNodes[t.className].node;e.setNote(this);var i=a.deepClone(this._registerNodes[t.className].config);return i=i?a.deepMerge(i,t):t,e.setData(i,!1),this._registerInstance[e.getId()]=e,e},e.prototype.getIdsOfListNode=function(t){if(!t)return"";var e="";return t.forEach((function(t){e+=t.getId()+","})),e},e.prototype.compareListNode=function(t,e){return this.getIdsOfListNode(t)==this.getIdsOfListNode(e)},e.prototype.addPage=function(t,e){var i=this;if(!t)return!1;var n=[];if("string"==typeof t)n=[{className:t}];else if(Array.isArray(t))n=t;else{if("object"!=typeof t)return;n.push(t)}var r=e=!e||e<0||e>=this._pages.length||isNaN(e)?this._pages.length:e,o=[];return n.forEach((function(t){a.isNull(t.className)&&(t.className="UIPage");var e=i.createNode(t);e&&(i._pages.splice(r,0,e),o.push(e),r++)})),r>e&&(this.emit(x.NOTE_PAGE_CHANGE),this.emit(x.NOTE_PAGE_ADD,o),this.saveHistory(this)),r!=e},e.prototype.removePage=function(t){if(t<0||t>=this._pages.length)return null;var e=this._pages.splice(t,1)[0];return this.emit(x.NOTE_PAGE_CHANGE),this.emit(x.NOTE_PAGE_REMOVE,e),e},e.prototype.removeAllPage=function(){return 0!=this._pages.length&&(this._pages=[],this.emit(x.NOTE_PAGE_CHANGE),!0)},e.prototype.getIndexPage=function(t){return this._pages.indexOf(t)},e.prototype.swapIndexPage=function(t,e){return this._pages.swap(t,e)},e.prototype.getPageSelected=function(){if(0==this._pages.length)return null;var t=-1,e=this._pages[0];return this._pages.forEach((function(i){var n=i.render.getBoundingClientRect(),r=0;n.top<0?n.top+n.height>0&&(r=n.top+n.height>window.innerHeight?window.innerHeight:n.top+n.height):n.top<window.innerHeight&&(r=n.top+n.height<window.innerHeight?n.height:window.innerHeight-n.top),r>t&&(e=i,t=r)})),e},e.prototype.setPageSelected=function(t){var e=this._pageSelected;this._pageSelected=t,t!=e&&this.emit(x.NOTE_PAGE_SELECTED)},e.prototype.getPages=function(){return this._pages},e.prototype.registerClassType=function(t,e){var i=t.prototype.classType,n=t.prototype.className;if(this._registerClassType[i]||(this._registerClassType[i]={}),this._registerClassType[i][n])return this.log("RegisterClassType fail , classtype name aldready register ! "+n),!1;this.log("register classType : "+i+":"+n),this._registerClassType[i][n]={classtype:t,config:e}},e.prototype.unregisterClassType=function(t,e){return!(!t||!e)&&(!this._registerClassType[t]||(this._registerClassType[t][e]&&delete this._registerClassType[t][e],!0))},e.prototype.registerClassTypes=function(t){var e=this;t.forEach((function(t){e.registerClassType(t.classtype,t.config)}))},e.prototype.unregisterClassTypes=function(t){var e=this;t.forEach((function(t){e.unregisterClassType(t.classtype,t.classname)}))},e.prototype.getClassType=function(t,e){if(!this._registerClassType[t])return null;if(!this._registerClassType[t][e])return null;var i=this._registerClassType[t][e],n=new i.classtype;return i.config&&n.setData(i.config),n},e.prototype.getAllNameClassType=function(t){if(!this._registerClassType[t])return[];var e=[];for(var i in this._registerClassType[t])e.push(i);return e},e.prototype.loadJs=function(t,e,i){window.NoteGlobal.loadJs(this,t,e,i)},e.prototype.loadCss=function(t){window.NoteGlobal.loadJs(this,t)},e.prototype.loadFont=function(t,e,i){window.NoteGlobal.loadFont(this,t,e,i)},e.prototype._initKeyboard=function(){this._keyDown={},this._codeDown={},this._arKeydown=[],this._onkeyup=this._onkeyup.bind(this),this._onkeydown=this._onkeydown.bind(this),this._onkeypress=this._onkeypress.bind(this),window.removeEventListener("keyup",this._onkeyup),window.removeEventListener("keydown",this._onkeydown),window.addEventListener("keyup",this._onkeyup),window.addEventListener("keydown",this._onkeydown)},e.prototype._onkeypress=function(t){},e.prototype._onkeydown=function(t){this._keyDown[t.key]=!0,this._codeDown[t.code]=!0,this._arKeydown.addFilter(t.key.toLowerCase()),this.emit(x.NOTE_KEYDOWN,t)},e.prototype._onkeyup=function(t){delete this._keyDown[t.key],delete this._codeDown[t.code],t.key.toLowerCase()==A.META?this._arKeydown=[]:this._arKeydown.removeFilter(t.key.toLowerCase()),this.emit(x.NOTE_KEYUP,t)},Object.defineProperty(e.prototype,"keydowns",{get:function(){return this._arKeydown.toString()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_shift",{get:function(){return!!this._keyDown.Shift},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_meta",{get:function(){return!!this._keyDown.Meta},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_ctrl",{get:function(){return!!this._keyDown.Control},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key_alt",{get:function(){return!!this._keyDown.Alt},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Note"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){return"Note"},enumerable:!1,configurable:!0}),e}(I),U=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),B=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return U(e,t),Object.defineProperty(e.prototype,"className",{get:function(){return"Cmd"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){return"Cmd"},enumerable:!1,configurable:!0}),e}(I),G=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),z=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._isRunning=!1,e._autoStart=!0,e}return G(e,t),e.prototype.start=function(){this.note||this.log("Handler must start in note class !"+this.className),this._isRunning||(this.startHandler(),this._isRunning=!0)},e.prototype.stop=function(){this._isRunning&&(this.stopHandler(),this._isRunning=!1)},e.prototype.isRunning=function(){return this._isRunning},Object.defineProperty(e.prototype,"autoStart",{get:function(){return this._autoStart},set:function(t){this._autoStart=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"Handler"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){return"Handler"},enumerable:!1,configurable:!0}),e}(I),W=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),X=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return W(e,t),e.prototype.init=function(){var t=this;this.onBtCancel=this.onBtCancel.bind(this),this.onBtDone=this.onBtDone.bind(this),this.iframeMessages=this.iframeMessages.bind(this),this._lbDone="Xong",this._lbCancel="Huỷ",this.render=document.createElement("div"),this.render.style.position="absolute",this.render.classList.add(this.className),this.note.appendHandlerRender(this.render),this.render.style.zIndex=this.note.render.childNodes.length+"",this._frameWidth=200,this._frameHeight=150,this._frameBarHeight=50,this._backgroundColor="#FFFFFF",this._frame=document.createElement("div"),this._frame.style.position="fixed",this._frame.style.width=this._frameWidth+"px",this._frame.style.height=this._frameHeight+this._frameBarHeight+"px",this._frame.style.backgroundColor=this._backgroundColor,this._frame.style.display="none",this._frame.style.zIndex="99999999",this._frame.style.borderRadius="10px",this._frame.style.boxShadow="4px 8px 16px 4px #00000022",this._frameBar=document.createElement("div"),this._frameBar.style.width="100%",this._frameBar.style.height=this._frameBarHeight+"px",this._frameBar.style.position="absolute",this._frameBar.style.top="0px",this._frameBar.style.left="0px",this._frameBar.style.display="flex",this._frameBar.style.flexDirection="row",this._frameBar.style.alignItems="center",this._frameBar.style.justifyContent="start",this._frameBar.style.paddingLeft="10px",this._frameBar.style.gap="10px",this._frame.appendChild(this._frameBar);var e=this.createBt(this._lbDone,'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M4.53 11.9 9 16.38 19.44 5.97a.75.75 0 0 1 1.06 1.06L9.53 17.97c-.3.29-.77.29-1.06 0l-5-5c-.7-.71.35-1.77 1.06-1.07z"></path></svg>');this._frameBar.appendChild(e),e.addEventListener("click",this.onBtDone);var i=this.createBt(this._lbCancel,'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="m13.06 12.15 5.02-5.03a.75.75 0 1 0-1.06-1.06L12 11.1 6.62 5.7a.75.75 0 1 0-1.06 1.06l5.38 5.38-5.23 5.23a.75.75 0 1 0 1.06 1.06L12 13.2l4.88 4.87a.75.75 0 1 0 1.06-1.06l-4.88-4.87z"></path></svg>');this._frameBar.appendChild(i),i.addEventListener("click",this.onBtCancel),a.makeDragable(this._frame),this._frame.addEventListener("mousedown",(function(e){t._iframePlugin&&(t._iframePlugin.style.pointerEvents="none"),e.stopImmediatePropagation(),e.preventDefault()})),this._frame.addEventListener("mouseup",(function(){t._iframePlugin&&(t._iframePlugin.style.pointerEvents="all")}))},e.prototype.startHandler=function(){this.log("startHandler "+this.className)},e.prototype.stopHandler=function(){this.log("stopHandler "+this.className),this._iframePlugin&&(window.removeEventListener("message",this.iframeMessages),this._frame.removeChild(this._iframePlugin),document.body.removeChild(this._frame),this._iframePlugin=null)},e.prototype.createBt=function(t,e){return a.makeIconButtom(t,e,{borderRadius:"5px",padding:"5px",display:"flex",flexDirection:"row",justifyItems:"center",alignItems:"center",fontFamily:"Arial",fontSize:"16px",color:"#333333",width:"fit-content",gap:"10px"},"#CCCCCC55")},e.prototype.showFrame=function(){this._iframePlugin||(this._iframePlugin=document.createElement("iframe"),this._iframePlugin.style.border="1px solid gray",this._iframePlugin.style.backgroundColor="white",this._iframePlugin.width=this._frameWidth+"px",this._iframePlugin.height=this._frameHeight+"px",this._iframePlugin.style.position="absolute",this._iframePlugin.style.top="50px",this._iframePlugin.setAttribute("anonymous",""),this._iframePluginAllow&&this._iframePlugin.setAttribute("allow",this._iframePluginAllow),window.addEventListener("message",this.iframeMessages),this._frame.appendChild(this._iframePlugin),this._iframePlugin.src=this._iframePluginUrl,document.body.appendChild(this._frame)),this._frame.style.width=this._frameWidth+"px",this._frame.style.height=this._frameHeight+this._frameBarHeight+"px";var t=this.note.render.getBoundingClientRect();this._frame.style.left=t.left+10+"px",this._frame.style.top=window.innerHeight-this._frameHeight-this._frameBarHeight-20+"px",this._frame.style.display="block"},e.prototype.hideFrame=function(){this._frame.style.display="none"},e.prototype.iframeMessages=function(t){},e.prototype.onBtCancel=function(){this.hideFrame()},e.prototype.onBtDone=function(){},Object.defineProperty(e.prototype,"iframePluginUrl",{get:function(){return this._iframePluginUrl},set:function(t){t&&t!=this._iframePluginUrl&&(this._iframePluginUrl=t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"PHandler"},enumerable:!1,configurable:!0}),e}(z);!function(t){t[t.TOP=0]="TOP",t[t.MID_TOP=1]="MID_TOP",t[t.RIGHT=2]="RIGHT",t[t.MID_RIGHT=3]="MID_RIGHT",t[t.BOTTOM=4]="BOTTOM",t[t.MID_BOTTOM=5]="MID_BOTTOM",t[t.LEFT=6]="LEFT",t[t.MID_LEFT=7]="MID_LEFT",t[t.MID_CENTER=8]="MID_CENTER"}(j||(j={}));var Y=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),V=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._childs=[],e}return Y(e,t),e.prototype.init=function(){t.prototype.init.call(this),this._lastMouseDown={clientX:-1,clientY:-1,pageX:-1,pageY:-1,time:-1},this._deltaPos=2,this._deltaTime=200,this._hisSetting=!1,a.isNull(this._childs)&&(this._childs=[]),a.isNull(this._x)&&(this._x=0),a.isNull(this._y)&&(this._y=0),a.isNull(this._width)&&(this._width=0),a.isNull(this._height)&&(this._height=0),a.isNull(this._scale)&&(this._scale=1),a.isNull(this._style)&&(this._style={}),a.isNull(this._originX)&&(this._originX=.5),a.isNull(this._originY)&&(this._originY=.5),a.isNull(this._lock)&&(this._lock=!1),a.isNull(this._cssClass)&&(this._cssClass=[]),a.isNull(this._opacity)&&(this._opacity=1),a.isNull(this._rotate)&&(this._rotate=0),a.isNull(this._zIndex)&&(this._zIndex=0),a.isNull(this._resizable)&&(this._resizable=!0),a.isNull(this._movable)&&(this._movable=!0),a.isNull(this._rotatable)&&(this._rotatable=!0),a.isNull(this._contentWidth)&&(this._contentWidth=0),a.isNull(this._contentHeight)&&(this._contentHeight=0),a.isNull(this._enabled)&&(this._enabled=!0),a.isNull(this._borderWidth)&&(this._borderWidth=0),a.isNull(this._borderStyle)&&(this._borderStyle="solid"),a.isNull(this._borderColor)&&(this._borderColor="#000000"),a.isNull(this._borderRadius)&&(this._borderRadius=0),a.isNull(this._enabled)&&(this._enabled=!1),a.isNull(this._selectable)&&(this._selectable=!0),this._render=document.createElement("div"),this._render.style.position="absolute",this.render.style.transformOrigin="50% 50%",this._renderContent=document.createElement("div"),this._renderContent.style.position="fixed",this._renderContent.style.overflow="hidden",this._renderContent.style.top="0px",this._renderContent.style.left="0px",this._renderContent.nnode=this,this._render.appendChild(this._renderContent),this.cssClass=[this.className],this.initRender&&this.initRender(),this.initEventListener()},e.prototype.renderAll=function(){this.renderTransform(),this.renderCssClass(),this.renderSize(),this.renderStyle(),this.renderTransformOrigin()},e.prototype.getData=function(){var t={};return t.className=this.className,t.name=this.name,t.tags=this.tags.concat([]),t.style=a.deepClone(this._style),t.x=this._x,t.y=this._y,t.scale=this._scale,t.width=this._width,t.height=this._height,t.opacity=this._opacity,t.originX=this._originX,t.originY=this._originY,t.rotate=this._rotate,t.zIndex=this._zIndex,t.resizable=this._resizable,t.moveable=this._movable,t.rotatable=this._rotatable,t.borderWidth=this._borderWidth,t.borderStyle=this._borderStyle,t.borderColor=this._borderColor,t.borderRadius=this._borderRadius,this._cssClass.length>0&&(t.cssClass=this._cssClass.concat([])),t.childIds=this.childIds.concat([]),t},e.prototype._checkNeedSaveHis=function(t){return!!a.isNull(t)||0!=t},e.prototype.setData=function(e,i){t.prototype.setData.call(this,e,i),this._lastHis||(this._lastHis=this.getHis()),1==this._checkNeedSaveHis(i)&&this.note&&this.note.saveHistory(this)},e.prototype.export=function(){var t=this.getData();return delete t.zIndex,0==t.x&&delete t.x,0==t.y&&delete t.y,1==t.scale&&delete t.scale,0==t.width&&delete t.width,0==t.height&&delete t.height,1==t.opacity&&delete t.opacity,.5==t.originX&&delete t.originX,.5==t.originY&&delete t.originY,0==t.rotate&&delete t.rotate,1==t.moveable&&delete t.moveable,1==t.resizable&&delete t.resizable,1==t.rotatable&&delete t.rotatable,t.childData=this.childData,t},e.prototype.getHis=function(){var t=this.getData();t.childDataHis={},this._childs.forEach((function(e){t.childDataHis[e.getId()]=e.getData()}));var e=JSON.stringify(t);return e!=this._lastHis?(this._lastHis=e,e):""},e.prototype.setHis=function(t){if(t)try{this._hisSetting=!0;var e=JSON.parse(t);if(this._childs.concat([]).forEach((function(t){var i=t.getId();e.childDataHis&&a.isNull(e.childDataHis[i])&&t.removeFromParent()})),this._style={},this._renderContent.removeAttribute("style"),e.childDataHis){var i=this.note.getRegisterInstance();for(var n in e.childDataHis)if(i[n]){var r=i[n];r.getParent()!=this&&this.addChild(i[n]),r.setData(e.childDataHis[n],!1)}}this.setData(e,!1),this._hisSetting=!1}catch(t){return}},e.prototype.addChild=function(t){t.addToParent(this)},e.prototype.addToParent=function(t){t&&(t.getChild().indexOf(this)>=0||(this.getParent()&&this.removeFromParent(),t.getChild().push(this),t.renderContent.appendChild(this.render),this._parent=t,this.zIndex=t.getChild().length-1,this.calSize()))},e.prototype.addChilds=function(t){var e=this;t.forEach((function(t){e.addChild(t)}))},e.prototype.getParent=function(){return this._parent},e.prototype.removeFromParent=function(){if(this.getParent()){var t=this.getParent();t.renderContent.removeChild(this.render),this._parent=null,t.getChild().indexOf(this)>=0&&t.removeChild(this)}},e.prototype.removeChild=function(t){var e=this._childs.indexOf(t);e<0||(this._childs.splice(e,1),t.removeFromParent())},e.prototype.removeAllChild=function(){for(;this._childs.length>0;)this.removeChild(this._childs[0])},e.prototype.getChild=function(){return this._childs},e.prototype.clone=function(){return this.note?this.note.createNode(this.getData()):(this.log("node clone must has note context !"),null)},Object.defineProperty(e.prototype,"render",{get:function(){return this._render},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"renderContent",{get:function(){return this._renderContent},enumerable:!1,configurable:!0}),e.prototype.anchorable=function(){return[j.TOP,j.MID_TOP,j.RIGHT,j.MID_RIGHT,j.BOTTOM,j.MID_BOTTOM,j.LEFT,j.MID_LEFT,j.MID_CENTER]},e.prototype.getThumb=function(){return this.render.outerHTML},e.prototype.calSize=function(){this._childs.forEach((function(t){t.calSize()}))},Object.defineProperty(e.prototype,"childData",{get:function(){for(var t=[],e=0;e<this._childs.length;e++)t.push(this._childs[e].export());return t},set:function(t){var e=this;t&&this._note&&t.forEach((function(t){var i=e._note.createNode(t);i&&e.addChild(i)}))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"childIds",{get:function(){for(var t=[],e=0;e<this._childs.length;e++)t.push(this._childs[e].getId());return t},set:function(t){},enumerable:!1,configurable:!0}),e.prototype.css=function(t,e){if(t&&e){t=t.trim(),e=e.trim();var i=this.renderContent.style;null!=i[t]&&null!=i[t]&&(this._style[t]=e,this.renderContent&&(this.renderContent.style[t]=e))}},e.prototype.getCss=function(t){return this.renderContent&&this.renderContent.style&&this.renderContent.style[t]?this.renderContent.style[t.trim()]:null},e.prototype.renderStyle=function(){for(var t in this.style)this.css(t,this.style[t])},e.prototype.renderCssClass=function(){for(var t=this,e=this._render.classList;e.length>0;)e.remove(e.item(0));this.cssClass.forEach((function(e){t._render.classList.add(e)}))},e.prototype.renderSize=function(){if(this.render){var t=!1;parseInt(this.render.style.width)==this._width&&parseInt(this.render.style.height)==this._height||(t=!0),this.render.style.width=this._width+"px",this.render.style.height=this._height+"px",this.renderContent.style.width=this._width-2*this._borderWidth+"px",this.renderContent.style.height=this._height-2*this._borderWidth+"px",this._renderContent.style.borderWidth=this._borderWidth+"px",this._renderContent.style.borderColor=this._borderColor,this._renderContent.style.borderStyle=this._borderStyle,this._renderContent.style.borderRadius=this._borderRadius+"px",t&&this.onResize()}},e.prototype.renderTransform=function(){var t=a.transformToCss(this);this.render&&(this.render.style.transform!=t&&this.onTransform(),this.render.style.transform=a.transformToCss(this))},e.prototype.renderTransformOrigin=function(){this.render&&(this._render.style.transformOrigin=Math.floor(100*this._originX)+"% "+Math.floor(100*this._originY)+"%")},e.prototype.setSize=function(t,e){t<0&&e<0||(t>=0&&(this._width=t),e>=0&&(this._height=e),this.renderSize())},e.prototype.setTransformOriginPoint=function(t,e){var i=Math.PI*this._rotate/180,n=this._x+this._width*this.originX,r=this._y+this._height*this.originY,o=n+((this._x-n)*Math.cos(i)-(this._y-r)*Math.sin(i))*this._scale,s=r+((this._x-n)*Math.sin(i)+(this._y-r)*Math.cos(i))*this._scale,a=(o-t)/this._scale,h=(s-e)/this._scale,l=Math.cos(i)*Math.cos(i)+Math.sin(i)*Math.sin(i),c=t+(a*Math.cos(i)+h*Math.sin(i))/l,u=e+(-a*Math.sin(i)+h*Math.cos(i))/l;this._x=c,this._y=u,this._originX=(t-this._x)/this._width,this._originY=(e-this._y)/this._height,this.renderTransform(),this.renderTransformOrigin()},e.prototype.setTransformOrigin=function(t,e){if(this.log("setTransform origin : "+t+":"+e),this._originX!=t||this._originY!=e){var i=Math.PI*this._rotate/180,n=this._width*this.originX,r=this._height*this.originY,o=this._x+n+(-n*Math.cos(i)+r*Math.sin(i))*this._scale,s=this._y+r+(-n*Math.sin(i)-r*Math.cos(i))*this._scale;this._originX=t,this._originY=e,n=this._width*this.originX,r=this._height*this.originY,this._x=o-n-(-n*Math.cos(i)+r*Math.sin(i))*this._scale,this._y=s-r-(-n*Math.sin(i)-r*Math.cos(i))*this._scale,this.renderTransformOrigin(),this.renderTransform()}},e.prototype.onResize=function(){this.note.emit(x.NODE_CHANGE,this)},e.prototype.onTransform=function(){},e.prototype.getBorderWidth=function(){var t=parseInt(this.renderContent.style.borderWidth);t=!isNaN(Number(t))&&t>0?Number(t):0},Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x=Math.floor(t),this.renderTransform()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y=Math.floor(t),this.renderTransform()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return Math.floor(this._width)},set:function(t){!t||t<0||t==this._width||this.setSize(t,this._height)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return Math.floor(this._height)},set:function(t){!t||t<0||t==this._height||this.setSize(this._width,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originX",{get:function(){return this._originX},set:function(t){this._originX=t,this.renderTransformOrigin()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originY",{get:function(){return this._originY},set:function(t){this._originY=t,this.renderTransformOrigin()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deltaPos",{get:function(){return this._deltaPos},set:function(t){this._deltaPos=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"deltaTime",{get:function(){return this._deltaTime},set:function(t){this._deltaTime=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"resizable",{get:function(){return this._resizable},set:function(t){this._resizable=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"movable",{get:function(){return this._movable},set:function(t){this._movable=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rotatable",{get:function(){return this._rotatable},set:function(t){this._rotatable=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderWidth",{get:function(){return this._borderWidth},set:function(t){if(!(isNaN(t)||t<0)&&t!=this._borderWidth){var e=this._width-2*this._borderWidth,i=this._height-2*this._borderWidth;this._borderWidth=t,this._width=e+2*this._borderWidth,this._height=i+2*this._borderWidth,this.renderSize()}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderRadius",{get:function(){return this._borderRadius},set:function(t){isNaN(t)||t<0||t!=this._borderRadius&&(this._borderRadius=t,this.css("borderRadius",this._borderRadius+"px"))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderStyle",{get:function(){return this._borderStyle},set:function(t){t&&"string"==typeof t&&this._borderStyle!=t&&(this._borderStyle=t,this.css("borderStyle",t))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"borderColor",{get:function(){return this._borderColor},set:function(t){t&&"string"==typeof t&&this._borderColor!=t&&(this._borderColor=t,this.css("borderColor",t))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"enabled",{get:function(){return this._enabled},set:function(t){this._enabled!=t&&(this._enabled=t,this._render.style.pointerEvents=1==this._enabled?"all":"none")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selectable",{get:function(){return this._selectable},set:function(t){this._selectable=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"hisSetting",{get:function(){return this._hisSetting},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"scale",{get:function(){return this._scale},set:function(t){this._scale=t,this.renderTransform()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rotate",{get:function(){return this._rotate},set:function(t){t=(t%=360)>180?t-360:t,this._rotate=t,this.renderTransform()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"opacity",{get:function(){return this._opacity},set:function(t){this._opacity=t,this.render&&(this.render.style.opacity=t.toString())},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return 1==this.opacity},set:function(t){this.opacity=t?1:0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"zIndex",{get:function(){return this._zIndex},set:function(t){t<0&&(t=0),this._zIndex=t,this.render.style.zIndex=this._zIndex+""},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lock",{get:function(){return this._lock},set:function(t){this._lock=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"style",{get:function(){return a.deepClone(this._style)},set:function(t){for(var e in t)this.css(e,t[e])},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cssClass",{get:function(){return this._cssClass},set:function(t){this._cssClass=t,this.renderCssClass()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentWidth",{get:function(){return this._contentWidth},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentHeight",{get:function(){return this._contentHeight},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rWidth",{get:function(){return this._width*this._scale},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rHeight",{get:function(){return this._height*this._scale},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originPoint",{get:function(){return{x:this._x+this._width*this._originX,y:this._y+this._height*this._originY}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"centerPoint",{get:function(){var t=Math.PI*this._rotate/180,e=this._x+this._width*this._originX,i=this._y+this._height*this._originY;return{x:e+((this._x+this._width/2-e)*Math.cos(t)-(this._y+this._height/2-i)*Math.sin(t))*this.scale,y:i+((this._x+this._width/2-e)*Math.sin(t)+(this._y+this._height/2-i)*Math.cos(t))*this.scale}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"topPoint",{get:function(){var t=Math.PI*this._rotate/180,e=this._x+this._width*this._originX,i=this._y+this._height*this._originY;return{x:e+((this._x-e)*Math.cos(t)-(this._y-i)*Math.sin(t))*this.scale,y:i+((this._x-e)*Math.sin(t)+(this._y-i)*Math.cos(t))*this.scale}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rightPoint",{get:function(){var t=Math.PI*this._rotate/180,e=this._x+this._width*this._originX,i=this._y+this._height*this._originY;return{x:e+((this._x+this._width-e)*Math.cos(t)-(this._y-i)*Math.sin(t))*this.scale,y:i+((this._x+this._width-e)*Math.sin(t)+(this._y-i)*Math.cos(t))*this.scale}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"bottomPoint",{get:function(){var t=Math.PI*this._rotate/180,e=this._x+this._width*this._originX,i=this._y+this._height*this._originY;return{x:e+((this._x+this._width-e)*Math.cos(t)-(this._y+this._height-i)*Math.sin(t))*this.scale,y:i+((this._x+this._width-e)*Math.sin(t)+(this._y+this._height-i)*Math.cos(t))*this.scale}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"leftPoint",{get:function(){var t=Math.PI*this._rotate/180,e=this._x+this._width*this._originX,i=this._y+this._height*this._originY;return{x:e+((this._x-e)*Math.cos(t)-(this._y+this._height-i)*Math.sin(t))*this.scale,y:i+((this._x-e)*Math.sin(t)+(this._y+this._height-i)*Math.cos(t))*this.scale}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"boundingBox",{get:function(){var t=Math.PI*this._rotate/180,e=this._x+this._width*this._originX,i=this._y+this._height*this._originY,n=e+((this._x-e)*Math.cos(t)-(this._y-i)*Math.sin(t))*this.scale,r=i+((this._x-e)*Math.sin(t)+(this._y-i)*Math.cos(t))*this.scale,o=e+((this._x+this._width-e)*Math.cos(t)-(this._y-i)*Math.sin(t))*this.scale,s=i+((this._x+this._width-e)*Math.sin(t)+(this._y-i)*Math.cos(t))*this.scale,a=e+((this._x+this._width-e)*Math.cos(t)-(this._y+this._height-i)*Math.sin(t))*this.scale,h=i+((this._x+this._width-e)*Math.sin(t)+(this._y+this._height-i)*Math.cos(t))*this.scale,l=e+((this._x-e)*Math.cos(t)-(this._y+this._height-i)*Math.sin(t))*this.scale,c=i+((this._x-e)*Math.sin(t)+(this._y+this._height-i)*Math.cos(t))*this.scale,u=Math.min(n,o,a,l),d=Math.min(r,s,h,c);return{x:u,y:d,width:Math.max(n,o,a,l)-u,height:Math.max(r,s,h,c)-d,rotate:0}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastMouseDown",{get:function(){return this._lastMouseDown},enumerable:!1,configurable:!0}),e.prototype.initEventListener=function(){this._mouseover=this._mouseover.bind(this),this._mouseout=this._mouseout.bind(this),this._mousemove=this._mousemove.bind(this),this._mousedown=this._mousedown.bind(this),this._mouseup=this._mouseup.bind(this),this._touchstart=this._touchstart.bind(this),this._touchmove=this._touchmove.bind(this),this._touchend=this._touchcancel.bind(this),this._touchcancel=this._touchcancel.bind(this),this._click=this._click.bind(this),this._dblclick=this._dblclick.bind(this),this.addMouseEvent(),this.addTouchEvent()},e.prototype.addMouseEvent=function(){this._render.addEventListener("mouseover",this._mouseover),this._render.addEventListener("mouseout",this._mouseout),this._render.addEventListener("mousemove",this._mousemove),this._render.addEventListener("mousedown",this._mousedown),this._render.addEventListener("mouseup",this._mouseup),this._render.addEventListener("click",this._click),this._render.addEventListener("dblclick",this._dblclick)},e.prototype.removeMouseEvent=function(){this._render.removeEventListener("mouseover",this._mouseover),this._render.removeEventListener("mouseout",this._mouseout),this._render.removeEventListener("mousemove",this._mousemove),this._render.removeEventListener("mousedown",this._mousedown),this._render.removeEventListener("mouseup",this._mouseup),this._render.removeEventListener("click",this._click),this._render.removeEventListener("dblclick",this._dblclick)},e.prototype.addTouchEvent=function(){this._render.addEventListener("touchstart",this._touchstart),this._render.addEventListener("touchmove",this._touchmove),this._render.addEventListener("touchcancel",this._touchcancel),this._render.addEventListener("touchend",this._touchend)},e.prototype.removeTouchEvent=function(){this._render.removeEventListener("touchstart",this._touchstart),this._render.removeEventListener("touchmove",this._touchmove),this._render.removeEventListener("touchcancel",this._touchcancel),this._render.removeEventListener("touchend",this._touchend)},e.prototype._mouseover=function(t){this.note.emit(x.NODE_MOUSE_OVER,this,t),t.stopImmediatePropagation()},e.prototype._mouseout=function(t){this.note.emit(x.NODE_MOUSE_OUT,this,t),t.stopImmediatePropagation()},e.prototype._mousemove=function(t){this.note.emit(x.NODE_MOUSE_MOVE,this,t)},e.prototype._mousedown=function(t){this.note.config.actionMode==M.MOUSE&&(this._nodeDown(t),t.stopImmediatePropagation())},e.prototype._mouseup=function(t){this.note.config.actionMode==M.MOUSE&&(this._nodeUp(t),t.stopImmediatePropagation())},e.prototype._nodeClick=function(t){var e=a.deepClone(this._lastMouseDown);this.note.emit(x.NODE_CLICK,this,t,e)},e.prototype._nodeDbClick=function(t){var e=a.deepClone(this._lastMouseDown);this.note.emit(x.NODE_DBLCLICK,this,t,e)},e.prototype._nodeMultiClick=function(t){var e=a.deepClone(this._lastMouseDown);this.note.emit(x.NODE_DBLCLICK,this,t,e)},e.prototype._click=function(t){0!=this._enabled&&(this.note.emit(x.NODE_MOUSE_CLICK,this,t),t.stopImmediatePropagation())},e.prototype._dblclick=function(t){0!=this._enabled&&(this.note.emit(x.NODE_MOUSE_DBLCLICK,this,t),t.stopImmediatePropagation())},e.prototype._touchstart=function(t){this.note.config.actionMode==M.TOUCH&&(this._nodeDown(t),t.stopImmediatePropagation())},e.prototype._touchmove=function(t){this.note.config.actionMode==M.TOUCH&&this._lastMouseDown.isPressing&&(this._lastMouseDown.moveX=t.touches[0].clientX,this._lastMouseDown.moveY=t.touches[0].clientY)},e.prototype._touchcancel=function(t){this.note.config.actionMode==M.TOUCH&&(this._nodeUp(t),t.stopImmediatePropagation())},e.prototype._touchend=function(t){this.note.config.actionMode==M.TOUCH&&(this._nodeUp(t),t.stopImmediatePropagation())},e.prototype._nodeDown=function(t){var e="UIPage"==this.className?this:this.getParent();if(e&&!(t instanceof TouchEvent&&0==t.touches.length)){var i=t instanceof MouseEvent?t.clientX:t.touches[0].clientX,n=t instanceof MouseEvent?t.clientY:t.touches[0].clientY,r=a.pointToPage({x:i,y:n},e);this._lastMouseDown.clientX=i,this._lastMouseDown.clientY=n,this._lastMouseDown.pageX=r.x,this._lastMouseDown.pageY=r.y,this._lastMouseDown.moveX=i,this._lastMouseDown.moveY=n,this._lastMouseDown.isPressing=!0,this._lastMouseDown.clickCountContinue=this._lastMouseDown.time<0?0:this._lastMouseDown.clickCountContinue,(new Date).getTime()-this._lastMouseDown.time>2*this._deltaTime&&(this._lastMouseDown.clickCountContinue=0),this._lastMouseDown.time=(new Date).getTime(),this.note.emit(x.NODE_DOWN,this,t,a.deepClone(this._lastMouseDown))}},e.prototype._nodeUp=function(t){var e=t instanceof MouseEvent?t.clientX:this._lastMouseDown.moveX,i=t instanceof MouseEvent?t.clientY:this._lastMouseDown.moveY,n=a.getDistance(this._lastMouseDown.clientX,this._lastMouseDown.clientY,e,i),r=(new Date).getTime()-this._lastMouseDown.time;n<this._deltaPos&&r<this._deltaTime&&(this._lastMouseDown.clickCountContinue++,1==this._lastMouseDown.clickCountContinue?this._nodeClick(t):2==this._lastMouseDown.clickCountContinue?this._nodeDbClick(t):this._nodeMultiClick(t)),this._lastMouseDown.isPressing=!1,this.note.emit(x.NODE_UP,this,t,a.deepClone(this._lastMouseDown))},Object.defineProperty(e.prototype,"className",{get:function(){return"UINode"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classType",{get:function(){return"UINode"},enumerable:!1,configurable:!0}),e}(I),K=i(856),J=i.n(K),q=/^(?:(?:https?|mailto|data|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi,Z=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,$=/([^\#-~ |!])/g,Q=/^#([A-F0-9]{6}|[A-F0-9]{8})$/i,tt=/[^A-Z0-9._/-]/i,et=function(){function t(){}return Object.defineProperty(t.prototype,"className",{get:function(){return"Sanitizer"},enumerable:!1,configurable:!0}),t.num=function(t){return!t||isNaN(t)||"number"!=typeof t?null:Number(t)},t.str=function(e){return e&&"string"==typeof e?t.sanitizeString(e):null},t.str_hexColor=function(t){return t&&"string"==typeof t?(t=String(t)).match(Q)?t:(console.log("Not trust hexColor : "+t),null):null},t.str_style=function(t){return t&&"string"==typeof t?(t=String(t)).match(Q)?t:(console.log("Not trust style : "+t),null):null},t.str_url=function(t,e,i){return t&&"string"==typeof t?(t=String(t)).match(q)&&!t.match(tt)?t:(console.log("Not trust url : "+t),null):null},t.sanitizeString=function(t){return t.replace(/&/g,"&amp;").replace(Z,(function(t){return"&#"+(1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320)+65536)+";"})).replace($,(function(t){return"&#"+t.charCodeAt(0)+";"})).replace(/</g,"&lt;").replace(/>/g,"&gt;")},t.sanitizeHtml=function(t){return J().sanitize(t,{USE_PROFILES:{html:!0}})},t.sanitizeSvg=function(t){return J().sanitize(t,{USE_PROFILES:{svg:!0}})},t.sanitizeMathML=function(t){return J().sanitize(t,{USE_PROFILES:{mathMl:!0}})},t}()})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,