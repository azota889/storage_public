!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.nHandler=e():t.nHandler=e()}(self,(()=>(()=>{var t={486:function(t,e,n){var r;t=n.nmd(t),function(){var o,i="Expected a function",u="__lodash_hash_undefined__",c="__lodash_placeholder__",a=16,s=32,l=64,f=128,h=256,p=1/0,d=9007199254740991,y=NaN,g=4294967295,_=[["ary",f],["bind",1],["bindKey",2],["curry",8],["curryRight",a],["flip",512],["partial",s],["partialRight",l],["rearg",h]],v="[object Arguments]",b="[object Array]",m="[object Boolean]",w="[object Date]",x="[object Error]",O="[object Function]",E="[object GeneratorFunction]",S="[object Map]",C="[object Number]",T="[object Object]",P="[object Promise]",M="[object RegExp]",N="[object Set]",R="[object String]",D="[object Symbol]",A="[object WeakMap]",I="[object ArrayBuffer]",L="[object DataView]",j="[object Float32Array]",k="[object Float64Array]",B="[object Int8Array]",H="[object Int16Array]",U="[object Int32Array]",z="[object Uint8Array]",G="[object Uint8ClampedArray]",W="[object Uint16Array]",F="[object Uint32Array]",V=/\b__p \+= '';/g,K=/\b(__p \+=) '' \+/g,X=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Y=/&(?:amp|lt|gt|quot|#39);/g,$=/[&<>"']/g,Z=RegExp(Y.source),q=RegExp($.source),J=/<%-([\s\S]+?)%>/g,Q=/<%([\s\S]+?)%>/g,tt=/<%=([\s\S]+?)%>/g,et=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,nt=/^\w*$/,rt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ot=/[\\^$.*+?()[\]{}|]/g,it=RegExp(ot.source),ut=/^\s+/,ct=/\s/,at=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,st=/\{\n\/\* \[wrapped with (.+)\] \*/,lt=/,? & /,ft=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ht=/[()=,{}\[\]\/\s]/,pt=/\\(\\)?/g,dt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,yt=/\w*$/,gt=/^[-+]0x[0-9a-f]+$/i,_t=/^0b[01]+$/i,vt=/^\[object .+?Constructor\]$/,bt=/^0o[0-7]+$/i,mt=/^(?:0|[1-9]\d*)$/,wt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,xt=/($^)/,Ot=/['\n\r\u2028\u2029\\]/g,Et="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",St="\\u2700-\\u27bf",Ct="a-z\\xdf-\\xf6\\xf8-\\xff",Tt="A-Z\\xc0-\\xd6\\xd8-\\xde",Pt="\\ufe0e\\ufe0f",Mt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Nt="['’]",Rt="[\\ud800-\\udfff]",Dt="["+Mt+"]",At="["+Et+"]",It="\\d+",Lt="[\\u2700-\\u27bf]",jt="["+Ct+"]",kt="[^\\ud800-\\udfff"+Mt+It+St+Ct+Tt+"]",Bt="\\ud83c[\\udffb-\\udfff]",Ht="[^\\ud800-\\udfff]",Ut="(?:\\ud83c[\\udde6-\\uddff]){2}",zt="[\\ud800-\\udbff][\\udc00-\\udfff]",Gt="["+Tt+"]",Wt="(?:"+jt+"|"+kt+")",Ft="(?:"+Gt+"|"+kt+")",Vt="(?:['’](?:d|ll|m|re|s|t|ve))?",Kt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Xt="(?:"+At+"|"+Bt+")"+"?",Yt="[\\ufe0e\\ufe0f]?",$t=Yt+Xt+("(?:\\u200d(?:"+[Ht,Ut,zt].join("|")+")"+Yt+Xt+")*"),Zt="(?:"+[Lt,Ut,zt].join("|")+")"+$t,qt="(?:"+[Ht+At+"?",At,Ut,zt,Rt].join("|")+")",Jt=RegExp(Nt,"g"),Qt=RegExp(At,"g"),te=RegExp(Bt+"(?="+Bt+")|"+qt+$t,"g"),ee=RegExp([Gt+"?"+jt+"+"+Vt+"(?="+[Dt,Gt,"$"].join("|")+")",Ft+"+"+Kt+"(?="+[Dt,Gt+Wt,"$"].join("|")+")",Gt+"?"+Wt+"+"+Vt,Gt+"+"+Kt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",It,Zt].join("|"),"g"),ne=RegExp("[\\u200d\\ud800-\\udfff"+Et+Pt+"]"),re=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,oe=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ie=-1,ue={};ue[j]=ue[k]=ue[B]=ue[H]=ue[U]=ue[z]=ue[G]=ue[W]=ue[F]=!0,ue[v]=ue[b]=ue[I]=ue[m]=ue[L]=ue[w]=ue[x]=ue[O]=ue[S]=ue[C]=ue[T]=ue[M]=ue[N]=ue[R]=ue[A]=!1;var ce={};ce[v]=ce[b]=ce[I]=ce[L]=ce[m]=ce[w]=ce[j]=ce[k]=ce[B]=ce[H]=ce[U]=ce[S]=ce[C]=ce[T]=ce[M]=ce[N]=ce[R]=ce[D]=ce[z]=ce[G]=ce[W]=ce[F]=!0,ce[x]=ce[O]=ce[A]=!1;var ae={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},se=parseFloat,le=parseInt,fe="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,he="object"==typeof self&&self&&self.Object===Object&&self,pe=fe||he||Function("return this")(),de=e&&!e.nodeType&&e,ye=de&&t&&!t.nodeType&&t,ge=ye&&ye.exports===de,_e=ge&&fe.process,ve=function(){try{var t=ye&&ye.require&&ye.require("util").types;return t||_e&&_e.binding&&_e.binding("util")}catch(t){}}(),be=ve&&ve.isArrayBuffer,me=ve&&ve.isDate,we=ve&&ve.isMap,xe=ve&&ve.isRegExp,Oe=ve&&ve.isSet,Ee=ve&&ve.isTypedArray;function Se(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Ce(t,e,n,r){for(var o=-1,i=null==t?0:t.length;++o<i;){var u=t[o];e(r,u,n(u),t)}return r}function Te(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Pe(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Me(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Ne(t,e){for(var n=-1,r=null==t?0:t.length,o=0,i=[];++n<r;){var u=t[n];e(u,n,t)&&(i[o++]=u)}return i}function Re(t,e){return!!(null==t?0:t.length)&&ze(t,e,0)>-1}function De(t,e,n){for(var r=-1,o=null==t?0:t.length;++r<o;)if(n(e,t[r]))return!0;return!1}function Ae(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}function Ie(t,e){for(var n=-1,r=e.length,o=t.length;++n<r;)t[o+n]=e[n];return t}function Le(t,e,n,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(n=t[++o]);++o<i;)n=e(n,t[o],o,t);return n}function je(t,e,n,r){var o=null==t?0:t.length;for(r&&o&&(n=t[--o]);o--;)n=e(n,t[o],o,t);return n}function ke(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var Be=Ve("length");function He(t,e,n){var r;return n(t,(function(t,n,o){if(e(t,n,o))return r=n,!1})),r}function Ue(t,e,n,r){for(var o=t.length,i=n+(r?1:-1);r?i--:++i<o;)if(e(t[i],i,t))return i;return-1}function ze(t,e,n){return e==e?function(t,e,n){var r=n-1,o=t.length;for(;++r<o;)if(t[r]===e)return r;return-1}(t,e,n):Ue(t,We,n)}function Ge(t,e,n,r){for(var o=n-1,i=t.length;++o<i;)if(r(t[o],e))return o;return-1}function We(t){return t!=t}function Fe(t,e){var n=null==t?0:t.length;return n?Ye(t,e)/n:y}function Ve(t){return function(e){return null==e?o:e[t]}}function Ke(t){return function(e){return null==t?o:t[e]}}function Xe(t,e,n,r,o){return o(t,(function(t,o,i){n=r?(r=!1,t):e(n,t,o,i)})),n}function Ye(t,e){for(var n,r=-1,i=t.length;++r<i;){var u=e(t[r]);u!==o&&(n=n===o?u:n+u)}return n}function $e(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function Ze(t){return t?t.slice(0,yn(t)+1).replace(ut,""):t}function qe(t){return function(e){return t(e)}}function Je(t,e){return Ae(e,(function(e){return t[e]}))}function Qe(t,e){return t.has(e)}function tn(t,e){for(var n=-1,r=t.length;++n<r&&ze(e,t[n],0)>-1;);return n}function en(t,e){for(var n=t.length;n--&&ze(e,t[n],0)>-1;);return n}function nn(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var rn=Ke({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),on=Ke({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function un(t){return"\\"+ae[t]}function cn(t){return ne.test(t)}function an(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function sn(t,e){return function(n){return t(e(n))}}function ln(t,e){for(var n=-1,r=t.length,o=0,i=[];++n<r;){var u=t[n];u!==e&&u!==c||(t[n]=c,i[o++]=n)}return i}function fn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function hn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function pn(t){return cn(t)?function(t){var e=te.lastIndex=0;for(;te.test(t);)++e;return e}(t):Be(t)}function dn(t){return cn(t)?function(t){return t.match(te)||[]}(t):function(t){return t.split("")}(t)}function yn(t){for(var e=t.length;e--&&ct.test(t.charAt(e)););return e}var gn=Ke({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var _n=function t(e){var n,r=(e=null==e?pe:_n.defaults(pe.Object(),e,_n.pick(pe,oe))).Array,ct=e.Date,Et=e.Error,St=e.Function,Ct=e.Math,Tt=e.Object,Pt=e.RegExp,Mt=e.String,Nt=e.TypeError,Rt=r.prototype,Dt=St.prototype,At=Tt.prototype,It=e["__core-js_shared__"],Lt=Dt.toString,jt=At.hasOwnProperty,kt=0,Bt=(n=/[^.]+$/.exec(It&&It.keys&&It.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Ht=At.toString,Ut=Lt.call(Tt),zt=pe._,Gt=Pt("^"+Lt.call(jt).replace(ot,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Wt=ge?e.Buffer:o,Ft=e.Symbol,Vt=e.Uint8Array,Kt=Wt?Wt.allocUnsafe:o,Xt=sn(Tt.getPrototypeOf,Tt),Yt=Tt.create,$t=At.propertyIsEnumerable,Zt=Rt.splice,qt=Ft?Ft.isConcatSpreadable:o,te=Ft?Ft.iterator:o,ne=Ft?Ft.toStringTag:o,ae=function(){try{var t=di(Tt,"defineProperty");return t({},"",{}),t}catch(t){}}(),fe=e.clearTimeout!==pe.clearTimeout&&e.clearTimeout,he=ct&&ct.now!==pe.Date.now&&ct.now,de=e.setTimeout!==pe.setTimeout&&e.setTimeout,ye=Ct.ceil,_e=Ct.floor,ve=Tt.getOwnPropertySymbols,Be=Wt?Wt.isBuffer:o,Ke=e.isFinite,vn=Rt.join,bn=sn(Tt.keys,Tt),mn=Ct.max,wn=Ct.min,xn=ct.now,On=e.parseInt,En=Ct.random,Sn=Rt.reverse,Cn=di(e,"DataView"),Tn=di(e,"Map"),Pn=di(e,"Promise"),Mn=di(e,"Set"),Nn=di(e,"WeakMap"),Rn=di(Tt,"create"),Dn=Nn&&new Nn,An={},In=zi(Cn),Ln=zi(Tn),jn=zi(Pn),kn=zi(Mn),Bn=zi(Nn),Hn=Ft?Ft.prototype:o,Un=Hn?Hn.valueOf:o,zn=Hn?Hn.toString:o;function Gn(t){if(oc(t)&&!Xu(t)&&!(t instanceof Kn)){if(t instanceof Vn)return t;if(jt.call(t,"__wrapped__"))return Gi(t)}return new Vn(t)}var Wn=function(){function t(){}return function(e){if(!rc(e))return{};if(Yt)return Yt(e);t.prototype=e;var n=new t;return t.prototype=o,n}}();function Fn(){}function Vn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function Kn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=g,this.__views__=[]}function Xn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Yn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function $n(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Zn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new $n;++e<n;)this.add(t[e])}function qn(t){var e=this.__data__=new Yn(t);this.size=e.size}function Jn(t,e){var n=Xu(t),r=!n&&Ku(t),o=!n&&!r&&qu(t),i=!n&&!r&&!o&&hc(t),u=n||r||o||i,c=u?$e(t.length,Mt):[],a=c.length;for(var s in t)!e&&!jt.call(t,s)||u&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||wi(s,a))||c.push(s);return c}function Qn(t){var e=t.length;return e?t[Zr(0,e-1)]:o}function tr(t,e){return Bi(Do(t),sr(e,0,t.length))}function er(t){return Bi(Do(t))}function nr(t,e,n){(n!==o&&!Wu(t[e],n)||n===o&&!(e in t))&&cr(t,e,n)}function rr(t,e,n){var r=t[e];jt.call(t,e)&&Wu(r,n)&&(n!==o||e in t)||cr(t,e,n)}function or(t,e){for(var n=t.length;n--;)if(Wu(t[n][0],e))return n;return-1}function ir(t,e,n,r){return dr(t,(function(t,o,i){e(r,t,n(t),i)})),r}function ur(t,e){return t&&Ao(e,Ic(e),t)}function cr(t,e,n){"__proto__"==e&&ae?ae(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function ar(t,e){for(var n=-1,i=e.length,u=r(i),c=null==t;++n<i;)u[n]=c?o:Mc(t,e[n]);return u}function sr(t,e,n){return t==t&&(n!==o&&(t=t<=n?t:n),e!==o&&(t=t>=e?t:e)),t}function lr(t,e,n,r,i,u){var c,a=1&e,s=2&e,l=4&e;if(n&&(c=i?n(t,r,i,u):n(t)),c!==o)return c;if(!rc(t))return t;var f=Xu(t);if(f){if(c=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&jt.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!a)return Do(t,c)}else{var h=_i(t),p=h==O||h==E;if(qu(t))return Co(t,a);if(h==T||h==v||p&&!i){if(c=s||p?{}:bi(t),!a)return s?function(t,e){return Ao(t,gi(t),e)}(t,function(t,e){return t&&Ao(e,Lc(e),t)}(c,t)):function(t,e){return Ao(t,yi(t),e)}(t,ur(c,t))}else{if(!ce[h])return i?t:{};c=function(t,e,n){var r=t.constructor;switch(e){case I:return To(t);case m:case w:return new r(+t);case L:return function(t,e){var n=e?To(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case j:case k:case B:case H:case U:case z:case G:case W:case F:return Po(t,n);case S:return new r;case C:case R:return new r(t);case M:return function(t){var e=new t.constructor(t.source,yt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case N:return new r;case D:return o=t,Un?Tt(Un.call(o)):{}}var o}(t,h,a)}}u||(u=new qn);var d=u.get(t);if(d)return d;u.set(t,c),sc(t)?t.forEach((function(r){c.add(lr(r,e,n,r,t,u))})):ic(t)&&t.forEach((function(r,o){c.set(o,lr(r,e,n,o,t,u))}));var y=f?o:(l?s?ci:ui:s?Lc:Ic)(t);return Te(y||t,(function(r,o){y&&(r=t[o=r]),rr(c,o,lr(r,e,n,o,t,u))})),c}function fr(t,e,n){var r=n.length;if(null==t)return!r;for(t=Tt(t);r--;){var i=n[r],u=e[i],c=t[i];if(c===o&&!(i in t)||!u(c))return!1}return!0}function hr(t,e,n){if("function"!=typeof t)throw new Nt(i);return Ii((function(){t.apply(o,n)}),e)}function pr(t,e,n,r){var o=-1,i=Re,u=!0,c=t.length,a=[],s=e.length;if(!c)return a;n&&(e=Ae(e,qe(n))),r?(i=De,u=!1):e.length>=200&&(i=Qe,u=!1,e=new Zn(e));t:for(;++o<c;){var l=t[o],f=null==n?l:n(l);if(l=r||0!==l?l:0,u&&f==f){for(var h=s;h--;)if(e[h]===f)continue t;a.push(l)}else i(e,f,r)||a.push(l)}return a}Gn.templateSettings={escape:J,evaluate:Q,interpolate:tt,variable:"",imports:{_:Gn}},Gn.prototype=Fn.prototype,Gn.prototype.constructor=Gn,Vn.prototype=Wn(Fn.prototype),Vn.prototype.constructor=Vn,Kn.prototype=Wn(Fn.prototype),Kn.prototype.constructor=Kn,Xn.prototype.clear=function(){this.__data__=Rn?Rn(null):{},this.size=0},Xn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Xn.prototype.get=function(t){var e=this.__data__;if(Rn){var n=e[t];return n===u?o:n}return jt.call(e,t)?e[t]:o},Xn.prototype.has=function(t){var e=this.__data__;return Rn?e[t]!==o:jt.call(e,t)},Xn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Rn&&e===o?u:e,this},Yn.prototype.clear=function(){this.__data__=[],this.size=0},Yn.prototype.delete=function(t){var e=this.__data__,n=or(e,t);return!(n<0)&&(n==e.length-1?e.pop():Zt.call(e,n,1),--this.size,!0)},Yn.prototype.get=function(t){var e=this.__data__,n=or(e,t);return n<0?o:e[n][1]},Yn.prototype.has=function(t){return or(this.__data__,t)>-1},Yn.prototype.set=function(t,e){var n=this.__data__,r=or(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},$n.prototype.clear=function(){this.size=0,this.__data__={hash:new Xn,map:new(Tn||Yn),string:new Xn}},$n.prototype.delete=function(t){var e=hi(this,t).delete(t);return this.size-=e?1:0,e},$n.prototype.get=function(t){return hi(this,t).get(t)},$n.prototype.has=function(t){return hi(this,t).has(t)},$n.prototype.set=function(t,e){var n=hi(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Zn.prototype.add=Zn.prototype.push=function(t){return this.__data__.set(t,u),this},Zn.prototype.has=function(t){return this.__data__.has(t)},qn.prototype.clear=function(){this.__data__=new Yn,this.size=0},qn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},qn.prototype.get=function(t){return this.__data__.get(t)},qn.prototype.has=function(t){return this.__data__.has(t)},qn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Yn){var r=n.__data__;if(!Tn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new $n(r)}return n.set(t,e),this.size=n.size,this};var dr=jo(xr),yr=jo(Or,!0);function gr(t,e){var n=!0;return dr(t,(function(t,r,o){return n=!!e(t,r,o)})),n}function _r(t,e,n){for(var r=-1,i=t.length;++r<i;){var u=t[r],c=e(u);if(null!=c&&(a===o?c==c&&!fc(c):n(c,a)))var a=c,s=u}return s}function vr(t,e){var n=[];return dr(t,(function(t,r,o){e(t,r,o)&&n.push(t)})),n}function br(t,e,n,r,o){var i=-1,u=t.length;for(n||(n=mi),o||(o=[]);++i<u;){var c=t[i];e>0&&n(c)?e>1?br(c,e-1,n,r,o):Ie(o,c):r||(o[o.length]=c)}return o}var mr=ko(),wr=ko(!0);function xr(t,e){return t&&mr(t,e,Ic)}function Or(t,e){return t&&wr(t,e,Ic)}function Er(t,e){return Ne(e,(function(e){return tc(t[e])}))}function Sr(t,e){for(var n=0,r=(e=xo(e,t)).length;null!=t&&n<r;)t=t[Ui(e[n++])];return n&&n==r?t:o}function Cr(t,e,n){var r=e(t);return Xu(t)?r:Ie(r,n(t))}function Tr(t){return null==t?t===o?"[object Undefined]":"[object Null]":ne&&ne in Tt(t)?function(t){var e=jt.call(t,ne),n=t[ne];try{t[ne]=o;var r=!0}catch(t){}var i=Ht.call(t);r&&(e?t[ne]=n:delete t[ne]);return i}(t):function(t){return Ht.call(t)}(t)}function Pr(t,e){return t>e}function Mr(t,e){return null!=t&&jt.call(t,e)}function Nr(t,e){return null!=t&&e in Tt(t)}function Rr(t,e,n){for(var i=n?De:Re,u=t[0].length,c=t.length,a=c,s=r(c),l=1/0,f=[];a--;){var h=t[a];a&&e&&(h=Ae(h,qe(e))),l=wn(h.length,l),s[a]=!n&&(e||u>=120&&h.length>=120)?new Zn(a&&h):o}h=t[0];var p=-1,d=s[0];t:for(;++p<u&&f.length<l;){var y=h[p],g=e?e(y):y;if(y=n||0!==y?y:0,!(d?Qe(d,g):i(f,g,n))){for(a=c;--a;){var _=s[a];if(!(_?Qe(_,g):i(t[a],g,n)))continue t}d&&d.push(g),f.push(y)}}return f}function Dr(t,e,n){var r=null==(t=Ni(t,e=xo(e,t)))?t:t[Ui(Qi(e))];return null==r?o:Se(r,t,n)}function Ar(t){return oc(t)&&Tr(t)==v}function Ir(t,e,n,r,i){return t===e||(null==t||null==e||!oc(t)&&!oc(e)?t!=t&&e!=e:function(t,e,n,r,i,u){var c=Xu(t),a=Xu(e),s=c?b:_i(t),l=a?b:_i(e),f=(s=s==v?T:s)==T,h=(l=l==v?T:l)==T,p=s==l;if(p&&qu(t)){if(!qu(e))return!1;c=!0,f=!1}if(p&&!f)return u||(u=new qn),c||hc(t)?oi(t,e,n,r,i,u):function(t,e,n,r,o,i,u){switch(n){case L:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case I:return!(t.byteLength!=e.byteLength||!i(new Vt(t),new Vt(e)));case m:case w:case C:return Wu(+t,+e);case x:return t.name==e.name&&t.message==e.message;case M:case R:return t==e+"";case S:var c=an;case N:var a=1&r;if(c||(c=fn),t.size!=e.size&&!a)return!1;var s=u.get(t);if(s)return s==e;r|=2,u.set(t,e);var l=oi(c(t),c(e),r,o,i,u);return u.delete(t),l;case D:if(Un)return Un.call(t)==Un.call(e)}return!1}(t,e,s,n,r,i,u);if(!(1&n)){var d=f&&jt.call(t,"__wrapped__"),y=h&&jt.call(e,"__wrapped__");if(d||y){var g=d?t.value():t,_=y?e.value():e;return u||(u=new qn),i(g,_,n,r,u)}}if(!p)return!1;return u||(u=new qn),function(t,e,n,r,i,u){var c=1&n,a=ui(t),s=a.length,l=ui(e).length;if(s!=l&&!c)return!1;var f=s;for(;f--;){var h=a[f];if(!(c?h in e:jt.call(e,h)))return!1}var p=u.get(t),d=u.get(e);if(p&&d)return p==e&&d==t;var y=!0;u.set(t,e),u.set(e,t);var g=c;for(;++f<s;){var _=t[h=a[f]],v=e[h];if(r)var b=c?r(v,_,h,e,t,u):r(_,v,h,t,e,u);if(!(b===o?_===v||i(_,v,n,r,u):b)){y=!1;break}g||(g="constructor"==h)}if(y&&!g){var m=t.constructor,w=e.constructor;m==w||!("constructor"in t)||!("constructor"in e)||"function"==typeof m&&m instanceof m&&"function"==typeof w&&w instanceof w||(y=!1)}return u.delete(t),u.delete(e),y}(t,e,n,r,i,u)}(t,e,n,r,Ir,i))}function Lr(t,e,n,r){var i=n.length,u=i,c=!r;if(null==t)return!u;for(t=Tt(t);i--;){var a=n[i];if(c&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<u;){var s=(a=n[i])[0],l=t[s],f=a[1];if(c&&a[2]){if(l===o&&!(s in t))return!1}else{var h=new qn;if(r)var p=r(l,f,s,t,e,h);if(!(p===o?Ir(f,l,3,r,h):p))return!1}}return!0}function jr(t){return!(!rc(t)||(e=t,Bt&&Bt in e))&&(tc(t)?Gt:vt).test(zi(t));var e}function kr(t){return"function"==typeof t?t:null==t?ua:"object"==typeof t?Xu(t)?Wr(t[0],t[1]):Gr(t):ya(t)}function Br(t){if(!Ci(t))return bn(t);var e=[];for(var n in Tt(t))jt.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Hr(t){if(!rc(t))return function(t){var e=[];if(null!=t)for(var n in Tt(t))e.push(n);return e}(t);var e=Ci(t),n=[];for(var r in t)("constructor"!=r||!e&&jt.call(t,r))&&n.push(r);return n}function Ur(t,e){return t<e}function zr(t,e){var n=-1,o=$u(t)?r(t.length):[];return dr(t,(function(t,r,i){o[++n]=e(t,r,i)})),o}function Gr(t){var e=pi(t);return 1==e.length&&e[0][2]?Pi(e[0][0],e[0][1]):function(n){return n===t||Lr(n,t,e)}}function Wr(t,e){return Oi(t)&&Ti(e)?Pi(Ui(t),e):function(n){var r=Mc(n,t);return r===o&&r===e?Nc(n,t):Ir(e,r,3)}}function Fr(t,e,n,r,i){t!==e&&mr(e,(function(u,c){if(i||(i=new qn),rc(u))!function(t,e,n,r,i,u,c){var a=Di(t,n),s=Di(e,n),l=c.get(s);if(l)return void nr(t,n,l);var f=u?u(a,s,n+"",t,e,c):o,h=f===o;if(h){var p=Xu(s),d=!p&&qu(s),y=!p&&!d&&hc(s);f=s,p||d||y?Xu(a)?f=a:Zu(a)?f=Do(a):d?(h=!1,f=Co(s,!0)):y?(h=!1,f=Po(s,!0)):f=[]:cc(s)||Ku(s)?(f=a,Ku(a)?f=mc(a):rc(a)&&!tc(a)||(f=bi(s))):h=!1}h&&(c.set(s,f),i(f,s,r,u,c),c.delete(s));nr(t,n,f)}(t,e,c,n,Fr,r,i);else{var a=r?r(Di(t,c),u,c+"",t,e,i):o;a===o&&(a=u),nr(t,c,a)}}),Lc)}function Vr(t,e){var n=t.length;if(n)return wi(e+=e<0?n:0,n)?t[e]:o}function Kr(t,e,n){e=e.length?Ae(e,(function(t){return Xu(t)?function(e){return Sr(e,1===t.length?t[0]:t)}:t})):[ua];var r=-1;e=Ae(e,qe(fi()));var o=zr(t,(function(t,n,o){var i=Ae(e,(function(e){return e(t)}));return{criteria:i,index:++r,value:t}}));return function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(o,(function(t,e){return function(t,e,n){var r=-1,o=t.criteria,i=e.criteria,u=o.length,c=n.length;for(;++r<u;){var a=Mo(o[r],i[r]);if(a)return r>=c?a:a*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)}))}function Xr(t,e,n){for(var r=-1,o=e.length,i={};++r<o;){var u=e[r],c=Sr(t,u);n(c,u)&&eo(i,xo(u,t),c)}return i}function Yr(t,e,n,r){var o=r?Ge:ze,i=-1,u=e.length,c=t;for(t===e&&(e=Do(e)),n&&(c=Ae(t,qe(n)));++i<u;)for(var a=0,s=e[i],l=n?n(s):s;(a=o(c,l,a,r))>-1;)c!==t&&Zt.call(c,a,1),Zt.call(t,a,1);return t}function $r(t,e){for(var n=t?e.length:0,r=n-1;n--;){var o=e[n];if(n==r||o!==i){var i=o;wi(o)?Zt.call(t,o,1):po(t,o)}}return t}function Zr(t,e){return t+_e(En()*(e-t+1))}function qr(t,e){var n="";if(!t||e<1||e>d)return n;do{e%2&&(n+=t),(e=_e(e/2))&&(t+=t)}while(e);return n}function Jr(t,e){return Li(Mi(t,e,ua),t+"")}function Qr(t){return Qn(Wc(t))}function to(t,e){var n=Wc(t);return Bi(n,sr(e,0,n.length))}function eo(t,e,n,r){if(!rc(t))return t;for(var i=-1,u=(e=xo(e,t)).length,c=u-1,a=t;null!=a&&++i<u;){var s=Ui(e[i]),l=n;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(i!=c){var f=a[s];(l=r?r(f,s,a):o)===o&&(l=rc(f)?f:wi(e[i+1])?[]:{})}rr(a,s,l),a=a[s]}return t}var no=Dn?function(t,e){return Dn.set(t,e),t}:ua,ro=ae?function(t,e){return ae(t,"toString",{configurable:!0,enumerable:!1,value:ra(e),writable:!0})}:ua;function oo(t){return Bi(Wc(t))}function io(t,e,n){var o=-1,i=t.length;e<0&&(e=-e>i?0:i+e),(n=n>i?i:n)<0&&(n+=i),i=e>n?0:n-e>>>0,e>>>=0;for(var u=r(i);++o<i;)u[o]=t[o+e];return u}function uo(t,e){var n;return dr(t,(function(t,r,o){return!(n=e(t,r,o))})),!!n}function co(t,e,n){var r=0,o=null==t?r:t.length;if("number"==typeof e&&e==e&&o<=2147483647){for(;r<o;){var i=r+o>>>1,u=t[i];null!==u&&!fc(u)&&(n?u<=e:u<e)?r=i+1:o=i}return o}return ao(t,e,ua,n)}function ao(t,e,n,r){var i=0,u=null==t?0:t.length;if(0===u)return 0;for(var c=(e=n(e))!=e,a=null===e,s=fc(e),l=e===o;i<u;){var f=_e((i+u)/2),h=n(t[f]),p=h!==o,d=null===h,y=h==h,g=fc(h);if(c)var _=r||y;else _=l?y&&(r||p):a?y&&p&&(r||!d):s?y&&p&&!d&&(r||!g):!d&&!g&&(r?h<=e:h<e);_?i=f+1:u=f}return wn(u,4294967294)}function so(t,e){for(var n=-1,r=t.length,o=0,i=[];++n<r;){var u=t[n],c=e?e(u):u;if(!n||!Wu(c,a)){var a=c;i[o++]=0===u?0:u}}return i}function lo(t){return"number"==typeof t?t:fc(t)?y:+t}function fo(t){if("string"==typeof t)return t;if(Xu(t))return Ae(t,fo)+"";if(fc(t))return zn?zn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function ho(t,e,n){var r=-1,o=Re,i=t.length,u=!0,c=[],a=c;if(n)u=!1,o=De;else if(i>=200){var s=e?null:Jo(t);if(s)return fn(s);u=!1,o=Qe,a=new Zn}else a=e?[]:c;t:for(;++r<i;){var l=t[r],f=e?e(l):l;if(l=n||0!==l?l:0,u&&f==f){for(var h=a.length;h--;)if(a[h]===f)continue t;e&&a.push(f),c.push(l)}else o(a,f,n)||(a!==c&&a.push(f),c.push(l))}return c}function po(t,e){return null==(t=Ni(t,e=xo(e,t)))||delete t[Ui(Qi(e))]}function yo(t,e,n,r){return eo(t,e,n(Sr(t,e)),r)}function go(t,e,n,r){for(var o=t.length,i=r?o:-1;(r?i--:++i<o)&&e(t[i],i,t););return n?io(t,r?0:i,r?i+1:o):io(t,r?i+1:0,r?o:i)}function _o(t,e){var n=t;return n instanceof Kn&&(n=n.value()),Le(e,(function(t,e){return e.func.apply(e.thisArg,Ie([t],e.args))}),n)}function vo(t,e,n){var o=t.length;if(o<2)return o?ho(t[0]):[];for(var i=-1,u=r(o);++i<o;)for(var c=t[i],a=-1;++a<o;)a!=i&&(u[i]=pr(u[i]||c,t[a],e,n));return ho(br(u,1),e,n)}function bo(t,e,n){for(var r=-1,i=t.length,u=e.length,c={};++r<i;){var a=r<u?e[r]:o;n(c,t[r],a)}return c}function mo(t){return Zu(t)?t:[]}function wo(t){return"function"==typeof t?t:ua}function xo(t,e){return Xu(t)?t:Oi(t,e)?[t]:Hi(wc(t))}var Oo=Jr;function Eo(t,e,n){var r=t.length;return n=n===o?r:n,!e&&n>=r?t:io(t,e,n)}var So=fe||function(t){return pe.clearTimeout(t)};function Co(t,e){if(e)return t.slice();var n=t.length,r=Kt?Kt(n):new t.constructor(n);return t.copy(r),r}function To(t){var e=new t.constructor(t.byteLength);return new Vt(e).set(new Vt(t)),e}function Po(t,e){var n=e?To(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Mo(t,e){if(t!==e){var n=t!==o,r=null===t,i=t==t,u=fc(t),c=e!==o,a=null===e,s=e==e,l=fc(e);if(!a&&!l&&!u&&t>e||u&&c&&s&&!a&&!l||r&&c&&s||!n&&s||!i)return 1;if(!r&&!u&&!l&&t<e||l&&n&&i&&!r&&!u||a&&n&&i||!c&&i||!s)return-1}return 0}function No(t,e,n,o){for(var i=-1,u=t.length,c=n.length,a=-1,s=e.length,l=mn(u-c,0),f=r(s+l),h=!o;++a<s;)f[a]=e[a];for(;++i<c;)(h||i<u)&&(f[n[i]]=t[i]);for(;l--;)f[a++]=t[i++];return f}function Ro(t,e,n,o){for(var i=-1,u=t.length,c=-1,a=n.length,s=-1,l=e.length,f=mn(u-a,0),h=r(f+l),p=!o;++i<f;)h[i]=t[i];for(var d=i;++s<l;)h[d+s]=e[s];for(;++c<a;)(p||i<u)&&(h[d+n[c]]=t[i++]);return h}function Do(t,e){var n=-1,o=t.length;for(e||(e=r(o));++n<o;)e[n]=t[n];return e}function Ao(t,e,n,r){var i=!n;n||(n={});for(var u=-1,c=e.length;++u<c;){var a=e[u],s=r?r(n[a],t[a],a,n,t):o;s===o&&(s=t[a]),i?cr(n,a,s):rr(n,a,s)}return n}function Io(t,e){return function(n,r){var o=Xu(n)?Ce:ir,i=e?e():{};return o(n,t,fi(r,2),i)}}function Lo(t){return Jr((function(e,n){var r=-1,i=n.length,u=i>1?n[i-1]:o,c=i>2?n[2]:o;for(u=t.length>3&&"function"==typeof u?(i--,u):o,c&&xi(n[0],n[1],c)&&(u=i<3?o:u,i=1),e=Tt(e);++r<i;){var a=n[r];a&&t(e,a,r,u)}return e}))}function jo(t,e){return function(n,r){if(null==n)return n;if(!$u(n))return t(n,r);for(var o=n.length,i=e?o:-1,u=Tt(n);(e?i--:++i<o)&&!1!==r(u[i],i,u););return n}}function ko(t){return function(e,n,r){for(var o=-1,i=Tt(e),u=r(e),c=u.length;c--;){var a=u[t?c:++o];if(!1===n(i[a],a,i))break}return e}}function Bo(t){return function(e){var n=cn(e=wc(e))?dn(e):o,r=n?n[0]:e.charAt(0),i=n?Eo(n,1).join(""):e.slice(1);return r[t]()+i}}function Ho(t){return function(e){return Le(ta(Kc(e).replace(Jt,"")),t,"")}}function Uo(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Wn(t.prototype),r=t.apply(n,e);return rc(r)?r:n}}function zo(t){return function(e,n,r){var i=Tt(e);if(!$u(e)){var u=fi(n,3);e=Ic(e),n=function(t){return u(i[t],t,i)}}var c=t(e,n,r);return c>-1?i[u?e[c]:c]:o}}function Go(t){return ii((function(e){var n=e.length,r=n,u=Vn.prototype.thru;for(t&&e.reverse();r--;){var c=e[r];if("function"!=typeof c)throw new Nt(i);if(u&&!a&&"wrapper"==si(c))var a=new Vn([],!0)}for(r=a?r:n;++r<n;){var s=si(c=e[r]),l="wrapper"==s?ai(c):o;a=l&&Ei(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?a[si(l[0])].apply(a,l[3]):1==c.length&&Ei(c)?a[s]():a.thru(c)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&Xu(r))return a.plant(r).value();for(var o=0,i=n?e[o].apply(this,t):r;++o<n;)i=e[o].call(this,i);return i}}))}function Wo(t,e,n,i,u,c,a,s,l,h){var p=e&f,d=1&e,y=2&e,g=24&e,_=512&e,v=y?o:Uo(t);return function o(){for(var f=arguments.length,b=r(f),m=f;m--;)b[m]=arguments[m];if(g)var w=li(o),x=nn(b,w);if(i&&(b=No(b,i,u,g)),c&&(b=Ro(b,c,a,g)),f-=x,g&&f<h){var O=ln(b,w);return Zo(t,e,Wo,o.placeholder,n,b,O,s,l,h-f)}var E=d?n:this,S=y?E[t]:t;return f=b.length,s?b=Ri(b,s):_&&f>1&&b.reverse(),p&&l<f&&(b.length=l),this&&this!==pe&&this instanceof o&&(S=v||Uo(S)),S.apply(E,b)}}function Fo(t,e){return function(n,r){return function(t,e,n,r){return xr(t,(function(t,o,i){e(r,n(t),o,i)})),r}(n,t,e(r),{})}}function Vo(t,e){return function(n,r){var i;if(n===o&&r===o)return e;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=fo(n),r=fo(r)):(n=lo(n),r=lo(r)),i=t(n,r)}return i}}function Ko(t){return ii((function(e){return e=Ae(e,qe(fi())),Jr((function(n){var r=this;return t(e,(function(t){return Se(t,r,n)}))}))}))}function Xo(t,e){var n=(e=e===o?" ":fo(e)).length;if(n<2)return n?qr(e,t):e;var r=qr(e,ye(t/pn(e)));return cn(e)?Eo(dn(r),0,t).join(""):r.slice(0,t)}function Yo(t){return function(e,n,i){return i&&"number"!=typeof i&&xi(e,n,i)&&(n=i=o),e=gc(e),n===o?(n=e,e=0):n=gc(n),function(t,e,n,o){for(var i=-1,u=mn(ye((e-t)/(n||1)),0),c=r(u);u--;)c[o?u:++i]=t,t+=n;return c}(e,n,i=i===o?e<n?1:-1:gc(i),t)}}function $o(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=bc(e),n=bc(n)),t(e,n)}}function Zo(t,e,n,r,i,u,c,a,f,h){var p=8&e;e|=p?s:l,4&(e&=~(p?l:s))||(e&=-4);var d=[t,e,i,p?u:o,p?c:o,p?o:u,p?o:c,a,f,h],y=n.apply(o,d);return Ei(t)&&Ai(y,d),y.placeholder=r,ji(y,t,e)}function qo(t){var e=Ct[t];return function(t,n){if(t=bc(t),(n=null==n?0:wn(_c(n),292))&&Ke(t)){var r=(wc(t)+"e").split("e");return+((r=(wc(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Jo=Mn&&1/fn(new Mn([,-0]))[1]==p?function(t){return new Mn(t)}:fa;function Qo(t){return function(e){var n=_i(e);return n==S?an(e):n==N?hn(e):function(t,e){return Ae(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function ti(t,e,n,u,p,d,y,g){var _=2&e;if(!_&&"function"!=typeof t)throw new Nt(i);var v=u?u.length:0;if(v||(e&=-97,u=p=o),y=y===o?y:mn(_c(y),0),g=g===o?g:_c(g),v-=p?p.length:0,e&l){var b=u,m=p;u=p=o}var w=_?o:ai(t),x=[t,e,n,u,p,b,m,d,y,g];if(w&&function(t,e){var n=t[1],r=e[1],o=n|r,i=o<131,u=r==f&&8==n||r==f&&n==h&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!i&&!u)return t;1&r&&(t[2]=e[2],o|=1&n?0:4);var a=e[3];if(a){var s=t[3];t[3]=s?No(s,a,e[4]):a,t[4]=s?ln(t[3],c):e[4]}(a=e[5])&&(s=t[5],t[5]=s?Ro(s,a,e[6]):a,t[6]=s?ln(t[5],c):e[6]);(a=e[7])&&(t[7]=a);r&f&&(t[8]=null==t[8]?e[8]:wn(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=o}(x,w),t=x[0],e=x[1],n=x[2],u=x[3],p=x[4],!(g=x[9]=x[9]===o?_?0:t.length:mn(x[9]-v,0))&&24&e&&(e&=-25),e&&1!=e)O=8==e||e==a?function(t,e,n){var i=Uo(t);return function u(){for(var c=arguments.length,a=r(c),s=c,l=li(u);s--;)a[s]=arguments[s];var f=c<3&&a[0]!==l&&a[c-1]!==l?[]:ln(a,l);return(c-=f.length)<n?Zo(t,e,Wo,u.placeholder,o,a,f,o,o,n-c):Se(this&&this!==pe&&this instanceof u?i:t,this,a)}}(t,e,g):e!=s&&33!=e||p.length?Wo.apply(o,x):function(t,e,n,o){var i=1&e,u=Uo(t);return function e(){for(var c=-1,a=arguments.length,s=-1,l=o.length,f=r(l+a),h=this&&this!==pe&&this instanceof e?u:t;++s<l;)f[s]=o[s];for(;a--;)f[s++]=arguments[++c];return Se(h,i?n:this,f)}}(t,e,n,u);else var O=function(t,e,n){var r=1&e,o=Uo(t);return function e(){return(this&&this!==pe&&this instanceof e?o:t).apply(r?n:this,arguments)}}(t,e,n);return ji((w?no:Ai)(O,x),t,e)}function ei(t,e,n,r){return t===o||Wu(t,At[n])&&!jt.call(r,n)?e:t}function ni(t,e,n,r,i,u){return rc(t)&&rc(e)&&(u.set(e,t),Fr(t,e,o,ni,u),u.delete(e)),t}function ri(t){return cc(t)?o:t}function oi(t,e,n,r,i,u){var c=1&n,a=t.length,s=e.length;if(a!=s&&!(c&&s>a))return!1;var l=u.get(t),f=u.get(e);if(l&&f)return l==e&&f==t;var h=-1,p=!0,d=2&n?new Zn:o;for(u.set(t,e),u.set(e,t);++h<a;){var y=t[h],g=e[h];if(r)var _=c?r(g,y,h,e,t,u):r(y,g,h,t,e,u);if(_!==o){if(_)continue;p=!1;break}if(d){if(!ke(e,(function(t,e){if(!Qe(d,e)&&(y===t||i(y,t,n,r,u)))return d.push(e)}))){p=!1;break}}else if(y!==g&&!i(y,g,n,r,u)){p=!1;break}}return u.delete(t),u.delete(e),p}function ii(t){return Li(Mi(t,o,Yi),t+"")}function ui(t){return Cr(t,Ic,yi)}function ci(t){return Cr(t,Lc,gi)}var ai=Dn?function(t){return Dn.get(t)}:fa;function si(t){for(var e=t.name+"",n=An[e],r=jt.call(An,e)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==t)return o.name}return e}function li(t){return(jt.call(Gn,"placeholder")?Gn:t).placeholder}function fi(){var t=Gn.iteratee||ca;return t=t===ca?kr:t,arguments.length?t(arguments[0],arguments[1]):t}function hi(t,e){var n,r,o=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof e?"string":"hash"]:o.map}function pi(t){for(var e=Ic(t),n=e.length;n--;){var r=e[n],o=t[r];e[n]=[r,o,Ti(o)]}return e}function di(t,e){var n=function(t,e){return null==t?o:t[e]}(t,e);return jr(n)?n:o}var yi=ve?function(t){return null==t?[]:(t=Tt(t),Ne(ve(t),(function(e){return $t.call(t,e)})))}:va,gi=ve?function(t){for(var e=[];t;)Ie(e,yi(t)),t=Xt(t);return e}:va,_i=Tr;function vi(t,e,n){for(var r=-1,o=(e=xo(e,t)).length,i=!1;++r<o;){var u=Ui(e[r]);if(!(i=null!=t&&n(t,u)))break;t=t[u]}return i||++r!=o?i:!!(o=null==t?0:t.length)&&nc(o)&&wi(u,o)&&(Xu(t)||Ku(t))}function bi(t){return"function"!=typeof t.constructor||Ci(t)?{}:Wn(Xt(t))}function mi(t){return Xu(t)||Ku(t)||!!(qt&&t&&t[qt])}function wi(t,e){var n=typeof t;return!!(e=null==e?d:e)&&("number"==n||"symbol"!=n&&mt.test(t))&&t>-1&&t%1==0&&t<e}function xi(t,e,n){if(!rc(n))return!1;var r=typeof e;return!!("number"==r?$u(n)&&wi(e,n.length):"string"==r&&e in n)&&Wu(n[e],t)}function Oi(t,e){if(Xu(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!fc(t))||(nt.test(t)||!et.test(t)||null!=e&&t in Tt(e))}function Ei(t){var e=si(t),n=Gn[e];if("function"!=typeof n||!(e in Kn.prototype))return!1;if(t===n)return!0;var r=ai(n);return!!r&&t===r[0]}(Cn&&_i(new Cn(new ArrayBuffer(1)))!=L||Tn&&_i(new Tn)!=S||Pn&&_i(Pn.resolve())!=P||Mn&&_i(new Mn)!=N||Nn&&_i(new Nn)!=A)&&(_i=function(t){var e=Tr(t),n=e==T?t.constructor:o,r=n?zi(n):"";if(r)switch(r){case In:return L;case Ln:return S;case jn:return P;case kn:return N;case Bn:return A}return e});var Si=It?tc:ba;function Ci(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||At)}function Ti(t){return t==t&&!rc(t)}function Pi(t,e){return function(n){return null!=n&&(n[t]===e&&(e!==o||t in Tt(n)))}}function Mi(t,e,n){return e=mn(e===o?t.length-1:e,0),function(){for(var o=arguments,i=-1,u=mn(o.length-e,0),c=r(u);++i<u;)c[i]=o[e+i];i=-1;for(var a=r(e+1);++i<e;)a[i]=o[i];return a[e]=n(c),Se(t,this,a)}}function Ni(t,e){return e.length<2?t:Sr(t,io(e,0,-1))}function Ri(t,e){for(var n=t.length,r=wn(e.length,n),i=Do(t);r--;){var u=e[r];t[r]=wi(u,n)?i[u]:o}return t}function Di(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Ai=ki(no),Ii=de||function(t,e){return pe.setTimeout(t,e)},Li=ki(ro);function ji(t,e,n){var r=e+"";return Li(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(at,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Te(_,(function(n){var r="_."+n[0];e&n[1]&&!Re(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(st);return e?e[1].split(lt):[]}(r),n)))}function ki(t){var e=0,n=0;return function(){var r=xn(),i=16-(r-n);if(n=r,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(o,arguments)}}function Bi(t,e){var n=-1,r=t.length,i=r-1;for(e=e===o?r:e;++n<e;){var u=Zr(n,i),c=t[u];t[u]=t[n],t[n]=c}return t.length=e,t}var Hi=function(t){var e=ku(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(rt,(function(t,n,r,o){e.push(r?o.replace(pt,"$1"):n||t)})),e}));function Ui(t){if("string"==typeof t||fc(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function zi(t){if(null!=t){try{return Lt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Gi(t){if(t instanceof Kn)return t.clone();var e=new Vn(t.__wrapped__,t.__chain__);return e.__actions__=Do(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Wi=Jr((function(t,e){return Zu(t)?pr(t,br(e,1,Zu,!0)):[]})),Fi=Jr((function(t,e){var n=Qi(e);return Zu(n)&&(n=o),Zu(t)?pr(t,br(e,1,Zu,!0),fi(n,2)):[]})),Vi=Jr((function(t,e){var n=Qi(e);return Zu(n)&&(n=o),Zu(t)?pr(t,br(e,1,Zu,!0),o,n):[]}));function Ki(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:_c(n);return o<0&&(o=mn(r+o,0)),Ue(t,fi(e,3),o)}function Xi(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==o&&(i=_c(n),i=n<0?mn(r+i,0):wn(i,r-1)),Ue(t,fi(e,3),i,!0)}function Yi(t){return(null==t?0:t.length)?br(t,1):[]}function $i(t){return t&&t.length?t[0]:o}var Zi=Jr((function(t){var e=Ae(t,mo);return e.length&&e[0]===t[0]?Rr(e):[]})),qi=Jr((function(t){var e=Qi(t),n=Ae(t,mo);return e===Qi(n)?e=o:n.pop(),n.length&&n[0]===t[0]?Rr(n,fi(e,2)):[]})),Ji=Jr((function(t){var e=Qi(t),n=Ae(t,mo);return(e="function"==typeof e?e:o)&&n.pop(),n.length&&n[0]===t[0]?Rr(n,o,e):[]}));function Qi(t){var e=null==t?0:t.length;return e?t[e-1]:o}var tu=Jr(eu);function eu(t,e){return t&&t.length&&e&&e.length?Yr(t,e):t}var nu=ii((function(t,e){var n=null==t?0:t.length,r=ar(t,e);return $r(t,Ae(e,(function(t){return wi(t,n)?+t:t})).sort(Mo)),r}));function ru(t){return null==t?t:Sn.call(t)}var ou=Jr((function(t){return ho(br(t,1,Zu,!0))})),iu=Jr((function(t){var e=Qi(t);return Zu(e)&&(e=o),ho(br(t,1,Zu,!0),fi(e,2))})),uu=Jr((function(t){var e=Qi(t);return e="function"==typeof e?e:o,ho(br(t,1,Zu,!0),o,e)}));function cu(t){if(!t||!t.length)return[];var e=0;return t=Ne(t,(function(t){if(Zu(t))return e=mn(t.length,e),!0})),$e(e,(function(e){return Ae(t,Ve(e))}))}function au(t,e){if(!t||!t.length)return[];var n=cu(t);return null==e?n:Ae(n,(function(t){return Se(e,o,t)}))}var su=Jr((function(t,e){return Zu(t)?pr(t,e):[]})),lu=Jr((function(t){return vo(Ne(t,Zu))})),fu=Jr((function(t){var e=Qi(t);return Zu(e)&&(e=o),vo(Ne(t,Zu),fi(e,2))})),hu=Jr((function(t){var e=Qi(t);return e="function"==typeof e?e:o,vo(Ne(t,Zu),o,e)})),pu=Jr(cu);var du=Jr((function(t){var e=t.length,n=e>1?t[e-1]:o;return n="function"==typeof n?(t.pop(),n):o,au(t,n)}));function yu(t){var e=Gn(t);return e.__chain__=!0,e}function gu(t,e){return e(t)}var _u=ii((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return ar(e,t)};return!(e>1||this.__actions__.length)&&r instanceof Kn&&wi(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:gu,args:[i],thisArg:o}),new Vn(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(o),t}))):this.thru(i)}));var vu=Io((function(t,e,n){jt.call(t,n)?++t[n]:cr(t,n,1)}));var bu=zo(Ki),mu=zo(Xi);function wu(t,e){return(Xu(t)?Te:dr)(t,fi(e,3))}function xu(t,e){return(Xu(t)?Pe:yr)(t,fi(e,3))}var Ou=Io((function(t,e,n){jt.call(t,n)?t[n].push(e):cr(t,n,[e])}));var Eu=Jr((function(t,e,n){var o=-1,i="function"==typeof e,u=$u(t)?r(t.length):[];return dr(t,(function(t){u[++o]=i?Se(e,t,n):Dr(t,e,n)})),u})),Su=Io((function(t,e,n){cr(t,n,e)}));function Cu(t,e){return(Xu(t)?Ae:zr)(t,fi(e,3))}var Tu=Io((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var Pu=Jr((function(t,e){if(null==t)return[];var n=e.length;return n>1&&xi(t,e[0],e[1])?e=[]:n>2&&xi(e[0],e[1],e[2])&&(e=[e[0]]),Kr(t,br(e,1),[])})),Mu=he||function(){return pe.Date.now()};function Nu(t,e,n){return e=n?o:e,e=t&&null==e?t.length:e,ti(t,f,o,o,o,o,e)}function Ru(t,e){var n;if("function"!=typeof e)throw new Nt(i);return t=_c(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=o),n}}var Du=Jr((function(t,e,n){var r=1;if(n.length){var o=ln(n,li(Du));r|=s}return ti(t,r,e,n,o)})),Au=Jr((function(t,e,n){var r=3;if(n.length){var o=ln(n,li(Au));r|=s}return ti(e,r,t,n,o)}));function Iu(t,e,n){var r,u,c,a,s,l,f=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new Nt(i);function y(e){var n=r,i=u;return r=u=o,f=e,a=t.apply(i,n)}function g(t){return f=t,s=Ii(v,e),h?y(t):a}function _(t){var n=t-l;return l===o||n>=e||n<0||p&&t-f>=c}function v(){var t=Mu();if(_(t))return b(t);s=Ii(v,function(t){var n=e-(t-l);return p?wn(n,c-(t-f)):n}(t))}function b(t){return s=o,d&&r?y(t):(r=u=o,a)}function m(){var t=Mu(),n=_(t);if(r=arguments,u=this,l=t,n){if(s===o)return g(l);if(p)return So(s),s=Ii(v,e),y(l)}return s===o&&(s=Ii(v,e)),a}return e=bc(e)||0,rc(n)&&(h=!!n.leading,c=(p="maxWait"in n)?mn(bc(n.maxWait)||0,e):c,d="trailing"in n?!!n.trailing:d),m.cancel=function(){s!==o&&So(s),f=0,r=l=u=s=o},m.flush=function(){return s===o?a:b(Mu())},m}var Lu=Jr((function(t,e){return hr(t,1,e)})),ju=Jr((function(t,e,n){return hr(t,bc(e)||0,n)}));function ku(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Nt(i);var n=function(){var r=arguments,o=e?e.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var u=t.apply(this,r);return n.cache=i.set(o,u)||i,u};return n.cache=new(ku.Cache||$n),n}function Bu(t){if("function"!=typeof t)throw new Nt(i);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}ku.Cache=$n;var Hu=Oo((function(t,e){var n=(e=1==e.length&&Xu(e[0])?Ae(e[0],qe(fi())):Ae(br(e,1),qe(fi()))).length;return Jr((function(r){for(var o=-1,i=wn(r.length,n);++o<i;)r[o]=e[o].call(this,r[o]);return Se(t,this,r)}))})),Uu=Jr((function(t,e){var n=ln(e,li(Uu));return ti(t,s,o,e,n)})),zu=Jr((function(t,e){var n=ln(e,li(zu));return ti(t,l,o,e,n)})),Gu=ii((function(t,e){return ti(t,h,o,o,o,e)}));function Wu(t,e){return t===e||t!=t&&e!=e}var Fu=$o(Pr),Vu=$o((function(t,e){return t>=e})),Ku=Ar(function(){return arguments}())?Ar:function(t){return oc(t)&&jt.call(t,"callee")&&!$t.call(t,"callee")},Xu=r.isArray,Yu=be?qe(be):function(t){return oc(t)&&Tr(t)==I};function $u(t){return null!=t&&nc(t.length)&&!tc(t)}function Zu(t){return oc(t)&&$u(t)}var qu=Be||ba,Ju=me?qe(me):function(t){return oc(t)&&Tr(t)==w};function Qu(t){if(!oc(t))return!1;var e=Tr(t);return e==x||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!cc(t)}function tc(t){if(!rc(t))return!1;var e=Tr(t);return e==O||e==E||"[object AsyncFunction]"==e||"[object Proxy]"==e}function ec(t){return"number"==typeof t&&t==_c(t)}function nc(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=d}function rc(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function oc(t){return null!=t&&"object"==typeof t}var ic=we?qe(we):function(t){return oc(t)&&_i(t)==S};function uc(t){return"number"==typeof t||oc(t)&&Tr(t)==C}function cc(t){if(!oc(t)||Tr(t)!=T)return!1;var e=Xt(t);if(null===e)return!0;var n=jt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Lt.call(n)==Ut}var ac=xe?qe(xe):function(t){return oc(t)&&Tr(t)==M};var sc=Oe?qe(Oe):function(t){return oc(t)&&_i(t)==N};function lc(t){return"string"==typeof t||!Xu(t)&&oc(t)&&Tr(t)==R}function fc(t){return"symbol"==typeof t||oc(t)&&Tr(t)==D}var hc=Ee?qe(Ee):function(t){return oc(t)&&nc(t.length)&&!!ue[Tr(t)]};var pc=$o(Ur),dc=$o((function(t,e){return t<=e}));function yc(t){if(!t)return[];if($u(t))return lc(t)?dn(t):Do(t);if(te&&t[te])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[te]());var e=_i(t);return(e==S?an:e==N?fn:Wc)(t)}function gc(t){return t?(t=bc(t))===p||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function _c(t){var e=gc(t),n=e%1;return e==e?n?e-n:e:0}function vc(t){return t?sr(_c(t),0,g):0}function bc(t){if("number"==typeof t)return t;if(fc(t))return y;if(rc(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=rc(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Ze(t);var n=_t.test(t);return n||bt.test(t)?le(t.slice(2),n?2:8):gt.test(t)?y:+t}function mc(t){return Ao(t,Lc(t))}function wc(t){return null==t?"":fo(t)}var xc=Lo((function(t,e){if(Ci(e)||$u(e))Ao(e,Ic(e),t);else for(var n in e)jt.call(e,n)&&rr(t,n,e[n])})),Oc=Lo((function(t,e){Ao(e,Lc(e),t)})),Ec=Lo((function(t,e,n,r){Ao(e,Lc(e),t,r)})),Sc=Lo((function(t,e,n,r){Ao(e,Ic(e),t,r)})),Cc=ii(ar);var Tc=Jr((function(t,e){t=Tt(t);var n=-1,r=e.length,i=r>2?e[2]:o;for(i&&xi(e[0],e[1],i)&&(r=1);++n<r;)for(var u=e[n],c=Lc(u),a=-1,s=c.length;++a<s;){var l=c[a],f=t[l];(f===o||Wu(f,At[l])&&!jt.call(t,l))&&(t[l]=u[l])}return t})),Pc=Jr((function(t){return t.push(o,ni),Se(kc,o,t)}));function Mc(t,e,n){var r=null==t?o:Sr(t,e);return r===o?n:r}function Nc(t,e){return null!=t&&vi(t,e,Nr)}var Rc=Fo((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Ht.call(e)),t[e]=n}),ra(ua)),Dc=Fo((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Ht.call(e)),jt.call(t,e)?t[e].push(n):t[e]=[n]}),fi),Ac=Jr(Dr);function Ic(t){return $u(t)?Jn(t):Br(t)}function Lc(t){return $u(t)?Jn(t,!0):Hr(t)}var jc=Lo((function(t,e,n){Fr(t,e,n)})),kc=Lo((function(t,e,n,r){Fr(t,e,n,r)})),Bc=ii((function(t,e){var n={};if(null==t)return n;var r=!1;e=Ae(e,(function(e){return e=xo(e,t),r||(r=e.length>1),e})),Ao(t,ci(t),n),r&&(n=lr(n,7,ri));for(var o=e.length;o--;)po(n,e[o]);return n}));var Hc=ii((function(t,e){return null==t?{}:function(t,e){return Xr(t,e,(function(e,n){return Nc(t,n)}))}(t,e)}));function Uc(t,e){if(null==t)return{};var n=Ae(ci(t),(function(t){return[t]}));return e=fi(e),Xr(t,n,(function(t,n){return e(t,n[0])}))}var zc=Qo(Ic),Gc=Qo(Lc);function Wc(t){return null==t?[]:Je(t,Ic(t))}var Fc=Ho((function(t,e,n){return e=e.toLowerCase(),t+(n?Vc(e):e)}));function Vc(t){return Qc(wc(t).toLowerCase())}function Kc(t){return(t=wc(t))&&t.replace(wt,rn).replace(Qt,"")}var Xc=Ho((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Yc=Ho((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),$c=Bo("toLowerCase");var Zc=Ho((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var qc=Ho((function(t,e,n){return t+(n?" ":"")+Qc(e)}));var Jc=Ho((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Qc=Bo("toUpperCase");function ta(t,e,n){return t=wc(t),(e=n?o:e)===o?function(t){return re.test(t)}(t)?function(t){return t.match(ee)||[]}(t):function(t){return t.match(ft)||[]}(t):t.match(e)||[]}var ea=Jr((function(t,e){try{return Se(t,o,e)}catch(t){return Qu(t)?t:new Et(t)}})),na=ii((function(t,e){return Te(e,(function(e){e=Ui(e),cr(t,e,Du(t[e],t))})),t}));function ra(t){return function(){return t}}var oa=Go(),ia=Go(!0);function ua(t){return t}function ca(t){return kr("function"==typeof t?t:lr(t,1))}var aa=Jr((function(t,e){return function(n){return Dr(n,t,e)}})),sa=Jr((function(t,e){return function(n){return Dr(t,n,e)}}));function la(t,e,n){var r=Ic(e),o=Er(e,r);null!=n||rc(e)&&(o.length||!r.length)||(n=e,e=t,t=this,o=Er(e,Ic(e)));var i=!(rc(n)&&"chain"in n&&!n.chain),u=tc(t);return Te(o,(function(n){var r=e[n];t[n]=r,u&&(t.prototype[n]=function(){var e=this.__chain__;if(i||e){var n=t(this.__wrapped__),o=n.__actions__=Do(this.__actions__);return o.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,Ie([this.value()],arguments))})})),t}function fa(){}var ha=Ko(Ae),pa=Ko(Me),da=Ko(ke);function ya(t){return Oi(t)?Ve(Ui(t)):function(t){return function(e){return Sr(e,t)}}(t)}var ga=Yo(),_a=Yo(!0);function va(){return[]}function ba(){return!1}var ma=Vo((function(t,e){return t+e}),0),wa=qo("ceil"),xa=Vo((function(t,e){return t/e}),1),Oa=qo("floor");var Ea,Sa=Vo((function(t,e){return t*e}),1),Ca=qo("round"),Ta=Vo((function(t,e){return t-e}),0);return Gn.after=function(t,e){if("function"!=typeof e)throw new Nt(i);return t=_c(t),function(){if(--t<1)return e.apply(this,arguments)}},Gn.ary=Nu,Gn.assign=xc,Gn.assignIn=Oc,Gn.assignInWith=Ec,Gn.assignWith=Sc,Gn.at=Cc,Gn.before=Ru,Gn.bind=Du,Gn.bindAll=na,Gn.bindKey=Au,Gn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Xu(t)?t:[t]},Gn.chain=yu,Gn.chunk=function(t,e,n){e=(n?xi(t,e,n):e===o)?1:mn(_c(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var u=0,c=0,a=r(ye(i/e));u<i;)a[c++]=io(t,u,u+=e);return a},Gn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,o=[];++e<n;){var i=t[e];i&&(o[r++]=i)}return o},Gn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],o=t;o--;)e[o-1]=arguments[o];return Ie(Xu(n)?Do(n):[n],br(e,1))},Gn.cond=function(t){var e=null==t?0:t.length,n=fi();return t=e?Ae(t,(function(t){if("function"!=typeof t[1])throw new Nt(i);return[n(t[0]),t[1]]})):[],Jr((function(n){for(var r=-1;++r<e;){var o=t[r];if(Se(o[0],this,n))return Se(o[1],this,n)}}))},Gn.conforms=function(t){return function(t){var e=Ic(t);return function(n){return fr(n,t,e)}}(lr(t,1))},Gn.constant=ra,Gn.countBy=vu,Gn.create=function(t,e){var n=Wn(t);return null==e?n:ur(n,e)},Gn.curry=function t(e,n,r){var i=ti(e,8,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},Gn.curryRight=function t(e,n,r){var i=ti(e,a,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},Gn.debounce=Iu,Gn.defaults=Tc,Gn.defaultsDeep=Pc,Gn.defer=Lu,Gn.delay=ju,Gn.difference=Wi,Gn.differenceBy=Fi,Gn.differenceWith=Vi,Gn.drop=function(t,e,n){var r=null==t?0:t.length;return r?io(t,(e=n||e===o?1:_c(e))<0?0:e,r):[]},Gn.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?io(t,0,(e=r-(e=n||e===o?1:_c(e)))<0?0:e):[]},Gn.dropRightWhile=function(t,e){return t&&t.length?go(t,fi(e,3),!0,!0):[]},Gn.dropWhile=function(t,e){return t&&t.length?go(t,fi(e,3),!0):[]},Gn.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&xi(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=_c(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:_c(r))<0&&(r+=i),r=n>r?0:vc(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Gn.filter=function(t,e){return(Xu(t)?Ne:vr)(t,fi(e,3))},Gn.flatMap=function(t,e){return br(Cu(t,e),1)},Gn.flatMapDeep=function(t,e){return br(Cu(t,e),p)},Gn.flatMapDepth=function(t,e,n){return n=n===o?1:_c(n),br(Cu(t,e),n)},Gn.flatten=Yi,Gn.flattenDeep=function(t){return(null==t?0:t.length)?br(t,p):[]},Gn.flattenDepth=function(t,e){return(null==t?0:t.length)?br(t,e=e===o?1:_c(e)):[]},Gn.flip=function(t){return ti(t,512)},Gn.flow=oa,Gn.flowRight=ia,Gn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var o=t[e];r[o[0]]=o[1]}return r},Gn.functions=function(t){return null==t?[]:Er(t,Ic(t))},Gn.functionsIn=function(t){return null==t?[]:Er(t,Lc(t))},Gn.groupBy=Ou,Gn.initial=function(t){return(null==t?0:t.length)?io(t,0,-1):[]},Gn.intersection=Zi,Gn.intersectionBy=qi,Gn.intersectionWith=Ji,Gn.invert=Rc,Gn.invertBy=Dc,Gn.invokeMap=Eu,Gn.iteratee=ca,Gn.keyBy=Su,Gn.keys=Ic,Gn.keysIn=Lc,Gn.map=Cu,Gn.mapKeys=function(t,e){var n={};return e=fi(e,3),xr(t,(function(t,r,o){cr(n,e(t,r,o),t)})),n},Gn.mapValues=function(t,e){var n={};return e=fi(e,3),xr(t,(function(t,r,o){cr(n,r,e(t,r,o))})),n},Gn.matches=function(t){return Gr(lr(t,1))},Gn.matchesProperty=function(t,e){return Wr(t,lr(e,1))},Gn.memoize=ku,Gn.merge=jc,Gn.mergeWith=kc,Gn.method=aa,Gn.methodOf=sa,Gn.mixin=la,Gn.negate=Bu,Gn.nthArg=function(t){return t=_c(t),Jr((function(e){return Vr(e,t)}))},Gn.omit=Bc,Gn.omitBy=function(t,e){return Uc(t,Bu(fi(e)))},Gn.once=function(t){return Ru(2,t)},Gn.orderBy=function(t,e,n,r){return null==t?[]:(Xu(e)||(e=null==e?[]:[e]),Xu(n=r?o:n)||(n=null==n?[]:[n]),Kr(t,e,n))},Gn.over=ha,Gn.overArgs=Hu,Gn.overEvery=pa,Gn.overSome=da,Gn.partial=Uu,Gn.partialRight=zu,Gn.partition=Tu,Gn.pick=Hc,Gn.pickBy=Uc,Gn.property=ya,Gn.propertyOf=function(t){return function(e){return null==t?o:Sr(t,e)}},Gn.pull=tu,Gn.pullAll=eu,Gn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Yr(t,e,fi(n,2)):t},Gn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Yr(t,e,o,n):t},Gn.pullAt=nu,Gn.range=ga,Gn.rangeRight=_a,Gn.rearg=Gu,Gn.reject=function(t,e){return(Xu(t)?Ne:vr)(t,Bu(fi(e,3)))},Gn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,o=[],i=t.length;for(e=fi(e,3);++r<i;){var u=t[r];e(u,r,t)&&(n.push(u),o.push(r))}return $r(t,o),n},Gn.rest=function(t,e){if("function"!=typeof t)throw new Nt(i);return Jr(t,e=e===o?e:_c(e))},Gn.reverse=ru,Gn.sampleSize=function(t,e,n){return e=(n?xi(t,e,n):e===o)?1:_c(e),(Xu(t)?tr:to)(t,e)},Gn.set=function(t,e,n){return null==t?t:eo(t,e,n)},Gn.setWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:eo(t,e,n,r)},Gn.shuffle=function(t){return(Xu(t)?er:oo)(t)},Gn.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&xi(t,e,n)?(e=0,n=r):(e=null==e?0:_c(e),n=n===o?r:_c(n)),io(t,e,n)):[]},Gn.sortBy=Pu,Gn.sortedUniq=function(t){return t&&t.length?so(t):[]},Gn.sortedUniqBy=function(t,e){return t&&t.length?so(t,fi(e,2)):[]},Gn.split=function(t,e,n){return n&&"number"!=typeof n&&xi(t,e,n)&&(e=n=o),(n=n===o?g:n>>>0)?(t=wc(t))&&("string"==typeof e||null!=e&&!ac(e))&&!(e=fo(e))&&cn(t)?Eo(dn(t),0,n):t.split(e,n):[]},Gn.spread=function(t,e){if("function"!=typeof t)throw new Nt(i);return e=null==e?0:mn(_c(e),0),Jr((function(n){var r=n[e],o=Eo(n,0,e);return r&&Ie(o,r),Se(t,this,o)}))},Gn.tail=function(t){var e=null==t?0:t.length;return e?io(t,1,e):[]},Gn.take=function(t,e,n){return t&&t.length?io(t,0,(e=n||e===o?1:_c(e))<0?0:e):[]},Gn.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?io(t,(e=r-(e=n||e===o?1:_c(e)))<0?0:e,r):[]},Gn.takeRightWhile=function(t,e){return t&&t.length?go(t,fi(e,3),!1,!0):[]},Gn.takeWhile=function(t,e){return t&&t.length?go(t,fi(e,3)):[]},Gn.tap=function(t,e){return e(t),t},Gn.throttle=function(t,e,n){var r=!0,o=!0;if("function"!=typeof t)throw new Nt(i);return rc(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),Iu(t,e,{leading:r,maxWait:e,trailing:o})},Gn.thru=gu,Gn.toArray=yc,Gn.toPairs=zc,Gn.toPairsIn=Gc,Gn.toPath=function(t){return Xu(t)?Ae(t,Ui):fc(t)?[t]:Do(Hi(wc(t)))},Gn.toPlainObject=mc,Gn.transform=function(t,e,n){var r=Xu(t),o=r||qu(t)||hc(t);if(e=fi(e,4),null==n){var i=t&&t.constructor;n=o?r?new i:[]:rc(t)&&tc(i)?Wn(Xt(t)):{}}return(o?Te:xr)(t,(function(t,r,o){return e(n,t,r,o)})),n},Gn.unary=function(t){return Nu(t,1)},Gn.union=ou,Gn.unionBy=iu,Gn.unionWith=uu,Gn.uniq=function(t){return t&&t.length?ho(t):[]},Gn.uniqBy=function(t,e){return t&&t.length?ho(t,fi(e,2)):[]},Gn.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?ho(t,o,e):[]},Gn.unset=function(t,e){return null==t||po(t,e)},Gn.unzip=cu,Gn.unzipWith=au,Gn.update=function(t,e,n){return null==t?t:yo(t,e,wo(n))},Gn.updateWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:yo(t,e,wo(n),r)},Gn.values=Wc,Gn.valuesIn=function(t){return null==t?[]:Je(t,Lc(t))},Gn.without=su,Gn.words=ta,Gn.wrap=function(t,e){return Uu(wo(e),t)},Gn.xor=lu,Gn.xorBy=fu,Gn.xorWith=hu,Gn.zip=pu,Gn.zipObject=function(t,e){return bo(t||[],e||[],rr)},Gn.zipObjectDeep=function(t,e){return bo(t||[],e||[],eo)},Gn.zipWith=du,Gn.entries=zc,Gn.entriesIn=Gc,Gn.extend=Oc,Gn.extendWith=Ec,la(Gn,Gn),Gn.add=ma,Gn.attempt=ea,Gn.camelCase=Fc,Gn.capitalize=Vc,Gn.ceil=wa,Gn.clamp=function(t,e,n){return n===o&&(n=e,e=o),n!==o&&(n=(n=bc(n))==n?n:0),e!==o&&(e=(e=bc(e))==e?e:0),sr(bc(t),e,n)},Gn.clone=function(t){return lr(t,4)},Gn.cloneDeep=function(t){return lr(t,5)},Gn.cloneDeepWith=function(t,e){return lr(t,5,e="function"==typeof e?e:o)},Gn.cloneWith=function(t,e){return lr(t,4,e="function"==typeof e?e:o)},Gn.conformsTo=function(t,e){return null==e||fr(t,e,Ic(e))},Gn.deburr=Kc,Gn.defaultTo=function(t,e){return null==t||t!=t?e:t},Gn.divide=xa,Gn.endsWith=function(t,e,n){t=wc(t),e=fo(e);var r=t.length,i=n=n===o?r:sr(_c(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},Gn.eq=Wu,Gn.escape=function(t){return(t=wc(t))&&q.test(t)?t.replace($,on):t},Gn.escapeRegExp=function(t){return(t=wc(t))&&it.test(t)?t.replace(ot,"\\$&"):t},Gn.every=function(t,e,n){var r=Xu(t)?Me:gr;return n&&xi(t,e,n)&&(e=o),r(t,fi(e,3))},Gn.find=bu,Gn.findIndex=Ki,Gn.findKey=function(t,e){return He(t,fi(e,3),xr)},Gn.findLast=mu,Gn.findLastIndex=Xi,Gn.findLastKey=function(t,e){return He(t,fi(e,3),Or)},Gn.floor=Oa,Gn.forEach=wu,Gn.forEachRight=xu,Gn.forIn=function(t,e){return null==t?t:mr(t,fi(e,3),Lc)},Gn.forInRight=function(t,e){return null==t?t:wr(t,fi(e,3),Lc)},Gn.forOwn=function(t,e){return t&&xr(t,fi(e,3))},Gn.forOwnRight=function(t,e){return t&&Or(t,fi(e,3))},Gn.get=Mc,Gn.gt=Fu,Gn.gte=Vu,Gn.has=function(t,e){return null!=t&&vi(t,e,Mr)},Gn.hasIn=Nc,Gn.head=$i,Gn.identity=ua,Gn.includes=function(t,e,n,r){t=$u(t)?t:Wc(t),n=n&&!r?_c(n):0;var o=t.length;return n<0&&(n=mn(o+n,0)),lc(t)?n<=o&&t.indexOf(e,n)>-1:!!o&&ze(t,e,n)>-1},Gn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:_c(n);return o<0&&(o=mn(r+o,0)),ze(t,e,o)},Gn.inRange=function(t,e,n){return e=gc(e),n===o?(n=e,e=0):n=gc(n),function(t,e,n){return t>=wn(e,n)&&t<mn(e,n)}(t=bc(t),e,n)},Gn.invoke=Ac,Gn.isArguments=Ku,Gn.isArray=Xu,Gn.isArrayBuffer=Yu,Gn.isArrayLike=$u,Gn.isArrayLikeObject=Zu,Gn.isBoolean=function(t){return!0===t||!1===t||oc(t)&&Tr(t)==m},Gn.isBuffer=qu,Gn.isDate=Ju,Gn.isElement=function(t){return oc(t)&&1===t.nodeType&&!cc(t)},Gn.isEmpty=function(t){if(null==t)return!0;if($u(t)&&(Xu(t)||"string"==typeof t||"function"==typeof t.splice||qu(t)||hc(t)||Ku(t)))return!t.length;var e=_i(t);if(e==S||e==N)return!t.size;if(Ci(t))return!Br(t).length;for(var n in t)if(jt.call(t,n))return!1;return!0},Gn.isEqual=function(t,e){return Ir(t,e)},Gn.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:o)?n(t,e):o;return r===o?Ir(t,e,o,n):!!r},Gn.isError=Qu,Gn.isFinite=function(t){return"number"==typeof t&&Ke(t)},Gn.isFunction=tc,Gn.isInteger=ec,Gn.isLength=nc,Gn.isMap=ic,Gn.isMatch=function(t,e){return t===e||Lr(t,e,pi(e))},Gn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:o,Lr(t,e,pi(e),n)},Gn.isNaN=function(t){return uc(t)&&t!=+t},Gn.isNative=function(t){if(Si(t))throw new Et("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return jr(t)},Gn.isNil=function(t){return null==t},Gn.isNull=function(t){return null===t},Gn.isNumber=uc,Gn.isObject=rc,Gn.isObjectLike=oc,Gn.isPlainObject=cc,Gn.isRegExp=ac,Gn.isSafeInteger=function(t){return ec(t)&&t>=-9007199254740991&&t<=d},Gn.isSet=sc,Gn.isString=lc,Gn.isSymbol=fc,Gn.isTypedArray=hc,Gn.isUndefined=function(t){return t===o},Gn.isWeakMap=function(t){return oc(t)&&_i(t)==A},Gn.isWeakSet=function(t){return oc(t)&&"[object WeakSet]"==Tr(t)},Gn.join=function(t,e){return null==t?"":vn.call(t,e)},Gn.kebabCase=Xc,Gn.last=Qi,Gn.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=_c(n))<0?mn(r+i,0):wn(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):Ue(t,We,i,!0)},Gn.lowerCase=Yc,Gn.lowerFirst=$c,Gn.lt=pc,Gn.lte=dc,Gn.max=function(t){return t&&t.length?_r(t,ua,Pr):o},Gn.maxBy=function(t,e){return t&&t.length?_r(t,fi(e,2),Pr):o},Gn.mean=function(t){return Fe(t,ua)},Gn.meanBy=function(t,e){return Fe(t,fi(e,2))},Gn.min=function(t){return t&&t.length?_r(t,ua,Ur):o},Gn.minBy=function(t,e){return t&&t.length?_r(t,fi(e,2),Ur):o},Gn.stubArray=va,Gn.stubFalse=ba,Gn.stubObject=function(){return{}},Gn.stubString=function(){return""},Gn.stubTrue=function(){return!0},Gn.multiply=Sa,Gn.nth=function(t,e){return t&&t.length?Vr(t,_c(e)):o},Gn.noConflict=function(){return pe._===this&&(pe._=zt),this},Gn.noop=fa,Gn.now=Mu,Gn.pad=function(t,e,n){t=wc(t);var r=(e=_c(e))?pn(t):0;if(!e||r>=e)return t;var o=(e-r)/2;return Xo(_e(o),n)+t+Xo(ye(o),n)},Gn.padEnd=function(t,e,n){t=wc(t);var r=(e=_c(e))?pn(t):0;return e&&r<e?t+Xo(e-r,n):t},Gn.padStart=function(t,e,n){t=wc(t);var r=(e=_c(e))?pn(t):0;return e&&r<e?Xo(e-r,n)+t:t},Gn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),On(wc(t).replace(ut,""),e||0)},Gn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&xi(t,e,n)&&(e=n=o),n===o&&("boolean"==typeof e?(n=e,e=o):"boolean"==typeof t&&(n=t,t=o)),t===o&&e===o?(t=0,e=1):(t=gc(t),e===o?(e=t,t=0):e=gc(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=En();return wn(t+i*(e-t+se("1e-"+((i+"").length-1))),e)}return Zr(t,e)},Gn.reduce=function(t,e,n){var r=Xu(t)?Le:Xe,o=arguments.length<3;return r(t,fi(e,4),n,o,dr)},Gn.reduceRight=function(t,e,n){var r=Xu(t)?je:Xe,o=arguments.length<3;return r(t,fi(e,4),n,o,yr)},Gn.repeat=function(t,e,n){return e=(n?xi(t,e,n):e===o)?1:_c(e),qr(wc(t),e)},Gn.replace=function(){var t=arguments,e=wc(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Gn.result=function(t,e,n){var r=-1,i=(e=xo(e,t)).length;for(i||(i=1,t=o);++r<i;){var u=null==t?o:t[Ui(e[r])];u===o&&(r=i,u=n),t=tc(u)?u.call(t):u}return t},Gn.round=Ca,Gn.runInContext=t,Gn.sample=function(t){return(Xu(t)?Qn:Qr)(t)},Gn.size=function(t){if(null==t)return 0;if($u(t))return lc(t)?pn(t):t.length;var e=_i(t);return e==S||e==N?t.size:Br(t).length},Gn.snakeCase=Zc,Gn.some=function(t,e,n){var r=Xu(t)?ke:uo;return n&&xi(t,e,n)&&(e=o),r(t,fi(e,3))},Gn.sortedIndex=function(t,e){return co(t,e)},Gn.sortedIndexBy=function(t,e,n){return ao(t,e,fi(n,2))},Gn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=co(t,e);if(r<n&&Wu(t[r],e))return r}return-1},Gn.sortedLastIndex=function(t,e){return co(t,e,!0)},Gn.sortedLastIndexBy=function(t,e,n){return ao(t,e,fi(n,2),!0)},Gn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=co(t,e,!0)-1;if(Wu(t[n],e))return n}return-1},Gn.startCase=qc,Gn.startsWith=function(t,e,n){return t=wc(t),n=null==n?0:sr(_c(n),0,t.length),e=fo(e),t.slice(n,n+e.length)==e},Gn.subtract=Ta,Gn.sum=function(t){return t&&t.length?Ye(t,ua):0},Gn.sumBy=function(t,e){return t&&t.length?Ye(t,fi(e,2)):0},Gn.template=function(t,e,n){var r=Gn.templateSettings;n&&xi(t,e,n)&&(e=o),t=wc(t),e=Ec({},e,r,ei);var i,u,c=Ec({},e.imports,r.imports,ei),a=Ic(c),s=Je(c,a),l=0,f=e.interpolate||xt,h="__p += '",p=Pt((e.escape||xt).source+"|"+f.source+"|"+(f===tt?dt:xt).source+"|"+(e.evaluate||xt).source+"|$","g"),d="//# sourceURL="+(jt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ie+"]")+"\n";t.replace(p,(function(e,n,r,o,c,a){return r||(r=o),h+=t.slice(l,a).replace(Ot,un),n&&(i=!0,h+="' +\n__e("+n+") +\n'"),c&&(u=!0,h+="';\n"+c+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=a+e.length,e})),h+="';\n";var y=jt.call(e,"variable")&&e.variable;if(y){if(ht.test(y))throw new Et("Invalid `variable` option passed into `_.template`")}else h="with (obj) {\n"+h+"\n}\n";h=(u?h.replace(V,""):h).replace(K,"$1").replace(X,"$1;"),h="function("+(y||"obj")+") {\n"+(y?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=ea((function(){return St(a,d+"return "+h).apply(o,s)}));if(g.source=h,Qu(g))throw g;return g},Gn.times=function(t,e){if((t=_c(t))<1||t>d)return[];var n=g,r=wn(t,g);e=fi(e),t-=g;for(var o=$e(r,e);++n<t;)e(n);return o},Gn.toFinite=gc,Gn.toInteger=_c,Gn.toLength=vc,Gn.toLower=function(t){return wc(t).toLowerCase()},Gn.toNumber=bc,Gn.toSafeInteger=function(t){return t?sr(_c(t),-9007199254740991,d):0===t?t:0},Gn.toString=wc,Gn.toUpper=function(t){return wc(t).toUpperCase()},Gn.trim=function(t,e,n){if((t=wc(t))&&(n||e===o))return Ze(t);if(!t||!(e=fo(e)))return t;var r=dn(t),i=dn(e);return Eo(r,tn(r,i),en(r,i)+1).join("")},Gn.trimEnd=function(t,e,n){if((t=wc(t))&&(n||e===o))return t.slice(0,yn(t)+1);if(!t||!(e=fo(e)))return t;var r=dn(t);return Eo(r,0,en(r,dn(e))+1).join("")},Gn.trimStart=function(t,e,n){if((t=wc(t))&&(n||e===o))return t.replace(ut,"");if(!t||!(e=fo(e)))return t;var r=dn(t);return Eo(r,tn(r,dn(e))).join("")},Gn.truncate=function(t,e){var n=30,r="...";if(rc(e)){var i="separator"in e?e.separator:i;n="length"in e?_c(e.length):n,r="omission"in e?fo(e.omission):r}var u=(t=wc(t)).length;if(cn(t)){var c=dn(t);u=c.length}if(n>=u)return t;var a=n-pn(r);if(a<1)return r;var s=c?Eo(c,0,a).join(""):t.slice(0,a);if(i===o)return s+r;if(c&&(a+=s.length-a),ac(i)){if(t.slice(a).search(i)){var l,f=s;for(i.global||(i=Pt(i.source,wc(yt.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var h=l.index;s=s.slice(0,h===o?a:h)}}else if(t.indexOf(fo(i),a)!=a){var p=s.lastIndexOf(i);p>-1&&(s=s.slice(0,p))}return s+r},Gn.unescape=function(t){return(t=wc(t))&&Z.test(t)?t.replace(Y,gn):t},Gn.uniqueId=function(t){var e=++kt;return wc(t)+e},Gn.upperCase=Jc,Gn.upperFirst=Qc,Gn.each=wu,Gn.eachRight=xu,Gn.first=$i,la(Gn,(Ea={},xr(Gn,(function(t,e){jt.call(Gn.prototype,e)||(Ea[e]=t)})),Ea),{chain:!1}),Gn.VERSION="4.17.21",Te(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Gn[t].placeholder=Gn})),Te(["drop","take"],(function(t,e){Kn.prototype[t]=function(n){n=n===o?1:mn(_c(n),0);var r=this.__filtered__&&!e?new Kn(this):this.clone();return r.__filtered__?r.__takeCount__=wn(n,r.__takeCount__):r.__views__.push({size:wn(n,g),type:t+(r.__dir__<0?"Right":"")}),r},Kn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Te(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Kn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:fi(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),Te(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Kn.prototype[t]=function(){return this[n](1).value()[0]}})),Te(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Kn.prototype[t]=function(){return this.__filtered__?new Kn(this):this[n](1)}})),Kn.prototype.compact=function(){return this.filter(ua)},Kn.prototype.find=function(t){return this.filter(t).head()},Kn.prototype.findLast=function(t){return this.reverse().find(t)},Kn.prototype.invokeMap=Jr((function(t,e){return"function"==typeof t?new Kn(this):this.map((function(n){return Dr(n,t,e)}))})),Kn.prototype.reject=function(t){return this.filter(Bu(fi(t)))},Kn.prototype.slice=function(t,e){t=_c(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Kn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==o&&(n=(e=_c(e))<0?n.dropRight(-e):n.take(e-t)),n)},Kn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Kn.prototype.toArray=function(){return this.take(g)},xr(Kn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=Gn[r?"take"+("last"==e?"Right":""):e],u=r||/^find/.test(e);i&&(Gn.prototype[e]=function(){var e=this.__wrapped__,c=r?[1]:arguments,a=e instanceof Kn,s=c[0],l=a||Xu(e),f=function(t){var e=i.apply(Gn,Ie([t],c));return r&&h?e[0]:e};l&&n&&"function"==typeof s&&1!=s.length&&(a=l=!1);var h=this.__chain__,p=!!this.__actions__.length,d=u&&!h,y=a&&!p;if(!u&&l){e=y?e:new Kn(this);var g=t.apply(e,c);return g.__actions__.push({func:gu,args:[f],thisArg:o}),new Vn(g,h)}return d&&y?t.apply(this,c):(g=this.thru(f),d?r?g.value()[0]:g.value():g)})})),Te(["pop","push","shift","sort","splice","unshift"],(function(t){var e=Rt[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Gn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var o=this.value();return e.apply(Xu(o)?o:[],t)}return this[n]((function(n){return e.apply(Xu(n)?n:[],t)}))}})),xr(Kn.prototype,(function(t,e){var n=Gn[e];if(n){var r=n.name+"";jt.call(An,r)||(An[r]=[]),An[r].push({name:e,func:n})}})),An[Wo(o,2).name]=[{name:"wrapper",func:o}],Kn.prototype.clone=function(){var t=new Kn(this.__wrapped__);return t.__actions__=Do(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Do(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Do(this.__views__),t},Kn.prototype.reverse=function(){if(this.__filtered__){var t=new Kn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Kn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Xu(t),r=e<0,o=n?t.length:0,i=function(t,e,n){var r=-1,o=n.length;for(;++r<o;){var i=n[r],u=i.size;switch(i.type){case"drop":t+=u;break;case"dropRight":e-=u;break;case"take":e=wn(e,t+u);break;case"takeRight":t=mn(t,e-u)}}return{start:t,end:e}}(0,o,this.__views__),u=i.start,c=i.end,a=c-u,s=r?c:u-1,l=this.__iteratees__,f=l.length,h=0,p=wn(a,this.__takeCount__);if(!n||!r&&o==a&&p==a)return _o(t,this.__actions__);var d=[];t:for(;a--&&h<p;){for(var y=-1,g=t[s+=e];++y<f;){var _=l[y],v=_.iteratee,b=_.type,m=v(g);if(2==b)g=m;else if(!m){if(1==b)continue t;break t}}d[h++]=g}return d},Gn.prototype.at=_u,Gn.prototype.chain=function(){return yu(this)},Gn.prototype.commit=function(){return new Vn(this.value(),this.__chain__)},Gn.prototype.next=function(){this.__values__===o&&(this.__values__=yc(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},Gn.prototype.plant=function(t){for(var e,n=this;n instanceof Fn;){var r=Gi(n);r.__index__=0,r.__values__=o,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},Gn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Kn){var e=t;return this.__actions__.length&&(e=new Kn(this)),(e=e.reverse()).__actions__.push({func:gu,args:[ru],thisArg:o}),new Vn(e,this.__chain__)}return this.thru(ru)},Gn.prototype.toJSON=Gn.prototype.valueOf=Gn.prototype.value=function(){return _o(this.__wrapped__,this.__actions__)},Gn.prototype.first=Gn.prototype.head,te&&(Gn.prototype[te]=function(){return this}),Gn}();pe._=_n,(r=function(){return _n}.call(e,n,e,t))===o||(t.exports=r)}.call(this)}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var r={};return(()=>{"use strict";n.r(r),n.d(r,{CmdHandler:()=>N,PageViewHandler:()=>A,PressingType:()=>C,SelectionHandler:()=>j});var t,e=(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),o=function(t,e,n,r){var o,i=arguments.length,u=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,e,n,r);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(u=(i<3?o(u):i>3?o(e,n,u):o(e,n))||u);return i>3&&u&&Object.defineProperty(e,n,u),u},i=function(){function t(){this._cBind={}}return t.prototype.pushBind=function(t,e){this._cBind[t]||(this._cBind[t]=[]);var n=e.prototype.className;n&&(this._cBind[t].push({c:e,name:n}),window[t]&&this.doBind(t))},t.prototype.doBind=function(t){if(this._cBind[t]&&Array.isArray(this._cBind[t])&&window[t])for(var e=this._cBind[t];e.length>0;){var n=e.pop(),r=window[t][n.name];if(r){var o=Object.getOwnPropertyDescriptors(r.prototype);for(var i in o)"function"==typeof o[i].set&&Object.defineProperty(n.c.prototype,i,{set:o[i].set,enumerable:!0,configurable:!0}),"function"==typeof o[i].get&&Object.defineProperty(n.c.prototype,i,{get:o[i].get,enumerable:!0,configurable:!0}),o[i].value&&"function"==typeof o[i].value&&(n.c.prototype[i]=r.prototype[i]);for(var i in r)n.c[i]=r[i]}}},t}();function u(t,e){return function(e,n){e.prototype.className&&window.NoteBinder.pushBind(t,e)}}window.NoteBinder||(window.NoteBinder=new i);var c,a,s,l,f="nCore",h=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.getClassName=function(){},n.getClassType=function(){},n.prototype.init=function(){},n.prototype.getData=function(){},n.prototype.setData=function(t,e){},n.prototype.export=function(){},n.prototype.setHis=function(t){},n.prototype.getHis=function(){},n.prototype.getDescriptor=function(){},n.prototype.setNote=function(t){},n.prototype.getNote=function(){},n.prototype.getConfig=function(){},n.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},n.prototype.renderName=function(){},n.prototype.renderTags=function(){},n.prototype.setTag=function(t){},n.prototype.removeTag=function(t){},n.prototype.hasTag=function(t){},Object.defineProperty(n.prototype,"name",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"tags",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"lastHis",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"className",{get:function(){return"ClassNote"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"note",{get:function(){},enumerable:!1,configurable:!0}),n=o([u(f)],n)}(function(){function t(){this._id=e.genId(this.classType),this._events={}}var e;return e=t,t.genId=function(t){for(var n="",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",o=r.length,i=0;i<6;i++)n+=r.charAt(Math.floor(Math.random()*o));return e._count=e._count>=Number.MAX_VALUE?0:e._count+1,n=t+"_"+e._count+"_"+n+"_"+(new Date).getTime()},t.prototype.on=function(t,e,n){},t.prototype.removeListener=function(t,e,n){},t.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n]},t.prototype.getId=function(){},Object.defineProperty(t.prototype,"className",{get:function(){return"ClassBase"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),t._count=0,t=e=o([u(f)],t)}());!function(t){function n(){return null!==t&&t.apply(this,arguments)||this}e(n,t),Object.defineProperty(n.prototype,"className",{get:function(){return"Cmd"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),n=o([u(f)],n)}(h);!function(t){t.UNKNOW="unknow",t.NUMBER="number",t.STRING="string",t.BOOLEAN="boolean",t.ARRAY="array",t.BIGINT="bigint",t.OBJECT="object"}(c||(c={})),function(t){t.COLOR="COLOR",t.DATETIME="DATETIME"}(a||(a={})),function(t){t.GET="GET",t.SET="SET",t.EXPO="EXPO",t.LANG="LANG"}(s||(s={})),function(t){t.UI="UI",t.HANDLER="HANDLER",t.RENDER="RENDER",t.SET="SET",t.GET="GET"}(l||(l={}));(function(){function t(){}t=o([u(f)],t)})(),function(){function t(){}t=o([u(f)],t)}(),function(){function t(){}t=o([u(f)],t)}(),function(){function t(){}t.classDes=function(){},t.removeProDes=function(t){},t.number=function(t){},t.string=function(t){},t.stringColor=function(t){},t.stringDateTime=function(t){},t.boolean=function(t){},t.object=function(t){},t.array=function(t){},t.render=function(t){},t.scrColor=function(){},t.srcDateTime=function(){},t.src=function(t){},t.notSet=function(){},t.notExpo=function(){},t.notGet=function(){},t.language=function(){},t.funchandler=function(){},t.funcrender=function(){},t.funcget=function(){},t.funcset=function(){},t=o([u(f)],t)}();var p,d,y,g,_,v,b,m,w,x,O,E,S=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.start=function(){},n.prototype.stop=function(){},n.prototype.isRunning=function(){},Object.defineProperty(n.prototype,"autoStart",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"className",{get:function(){return"Handler"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),n=o([u(f)],n)}(h);!function(t){t[t.TOP=0]="TOP",t[t.MID_TOP=1]="MID_TOP",t[t.RIGHT=2]="RIGHT",t[t.MID_RIGHT=3]="MID_RIGHT",t[t.BOTTOM=4]="BOTTOM",t[t.MID_BOTTOM=5]="MID_BOTTOM",t[t.LEFT=6]="LEFT",t[t.MID_LEFT=7]="MID_LEFT",t[t.MID_CENTER=8]="MID_CENTER"}(p||(p={})),function(t){t.EXPORT="EXPORT",t.LANG="LANG"}(d||(d={})),function(t){t.LEFT="left",t.RIGHT="right",t.CENTER="center"}(y||(y={})),function(t){t.TOP="top",t.BOTTOM="bottom",t.CENTER="center"}(g||(g={})),function(t){t.EDIT="edit",t.VIEW="view",t.COMMENT="comment"}(_||(_={})),function(t){t.FIT_WIDTH="fit_width",t.FIT_HEIGHT="fit_height",t.FIT_CONTENT="fit_content",t.FIT_SIZE="fit_size",t.FIT_AUTO="fit_auto"}(v||(v={})),function(t){t.NOTLOAD="notload",t.LOADING="loading",t.LOADFAIL="loadfail",t.LOADED="loaded"}(b||(b={})),function(t){t.UNKNOW="",t.IMAGE="image",t.VIDEO="video",t.AUDIO="audio",t.PDF="pdf",t.DOCX="docx",t.PPTX="pptx",t.XLSX="xlsx",t.LOTTIEANIM="lottieAnim",t.WEBVIEW="webview"}(m||(m={})),function(t){t.TOUCH="touch",t.MOUSE="mouse"}(w||(w={})),function(t){t.READY="ready",t.LOAD_EVENT="load_event",t.MODULE_CHANGE="module_change",t.MODULE_LOADED="module_loaded",t.MODULE_LOADFAIL="module_loadfail",t.NOTE_SELECTION_START="note_selection_start",t.NOTE_SELECTION_MOVING="note_selection_moving",t.NOTE_SELECTION_END="note_selection_end",t.NOTE_NODE_SELECTED="note_node_selected",t.NOTE_PAGE_SELECTED="note_page_selected",t.NOTE_PAGE_VIEW_CHANGE="note_page_view_change",t.NOTE_PAGE_CHANGE="note_page_change",t.NOTE_PAGE_ADD="note_page_add",t.NOTE_PAGE_REMOVE="note_page_remove",t.PAGE_CHANGE="page_change",t.NOTE_HANDLER_RENDER_CHANGE="note_handler_render_change",t.NOTE_ZOOM_CHANGE="note_zoom_change",t.NOTE_KEYUP="note_keyup",t.NOTE_KEYDOWN="note_keydown",t.TEXT_INPUT_FOCUS="text_input_focus",t.TEXT_INPUT_BLUR="text_input_blur",t.NODE_CHANGE="node_change",t.NODE_SIZE_CHANGE="node_size_change",t.NODE_TRANSFORM_CHANGE="node_transform_change",t.NODE_MOUSE_OVER="node_mouse_over",t.NODE_MOUSE_OUT="node_mouse_out",t.NODE_MOUSE_MOVE="node_mouse_move",t.NODE_MOUSE_DOWN="node_mouse_down",t.NODE_MOUSE_UP="node_mouse_up",t.NODE_OVER="node_over",t.NODE_OUT="node_out",t.NODE_MOVE="node_move",t.NODE_DOWN="node_down",t.NODE_UP="node_up",t.NODE_CLICK="node_click",t.NODE_DBLCLICK="node_dblclick",t.NODE_MULTICLICK="node_multiclick",t.NODE_MOUSE_CLICK="node_mouse_click",t.NODE_MOUSE_DBLCLICK="node_mouse_dblclick",t.NOTE_CMD_CHANGE="note_cmd_change"}(x||(x={})),function(t){t.SHIFT="shift",t.META="meta",t.CONTROL="control",t.ALT="alt"}(O||(O={})),function(t){t.UIPAGE="UIPage",t.UINODE="UINode",t.NOTE="Note",t.CMD="Cmd",t.HANDLER="Handler"}(E||(E={}));var C,T=function(){function t(){}return Object.defineProperty(t.prototype,"className",{get:function(){return"Logger"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"getType",{get:function(){},enumerable:!1,configurable:!0}),t=o([u(f)],t)}(),P=(function(t){function n(e){var n=t.call(this)||this;return console.log("Initing Note Version "+(null==e?void 0:e.version)),(null==e?void 0:e.coreUrl)?n.loadCore((null==e?void 0:e.coreUrl)+"?ver="+(null==e?void 0:e.version),(function(){n.initNote(e)})):n.initNote(e),n}e(n,t),n.prototype.defaultCheckTouchCapable=function(t){},n.prototype.defaultCheckIsMobile=function(t){},n.prototype.defaultCheckIsWebview=function(t){},n.prototype.loadCore=function(t,e){console.log("load module note core "+t);var n=document.createElement("script");n.onload=function(){window.nCore;window.NoteBinder&&window.NoteBinder.doBind("nCore"),e()},n.onerror=function(){console.log("Load module core error !")},n.src=t,document.head.appendChild(n)},n.prototype.initNote=function(t){},n.prototype._parseModuleConfig=function(t){},n.prototype._mergeModuleData=function(t,e){},n.prototype.addModule=function(t){},n.prototype.loadModule=function(t){},n.prototype.getModuleData=function(t){},n.prototype.getStatusModule=function(t){},n.prototype.checkDependenciesModuleLoaded=function(t){},n.prototype._findAndLoadModule=function(){},n.prototype._loadJs=function(t){},n.prototype._onLoadModuleFinish=function(t,e,n){},n.prototype._doBindModule=function(t){},Object.defineProperty(n.prototype,"version",{get:function(){},enumerable:!1,configurable:!0}),n.prototype._start=function(){},n.prototype._initUI=function(){},Object.defineProperty(n.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),n.prototype.appendHandlerRender=function(t){},n.prototype.removeHandlerRender=function(t){},n.prototype.setTextFocus=function(t){},n.prototype.getTextFocus=function(){},n.prototype.load=function(t){},n.prototype.export=function(){},n.prototype.reset=function(){},n.prototype.setClipboardData=function(t,e){},n.prototype.getClipboardData=function(t){},n.prototype.getHis=function(){},n.prototype.setHis=function(t){},n.prototype.onPageChange=function(t){},n.prototype.saveHistory=function(t){},n.prototype.undo=function(){},n.prototype.redo=function(){},n.prototype.doSetHisData=function(t){},n.prototype.getRegisterInstance=function(){},n.prototype.setConfig=function(t){},n.prototype.getConfig=function(){},Object.defineProperty(n.prototype,"config",{get:function(){},enumerable:!1,configurable:!0}),n.prototype._applyConfig=function(){},Object.defineProperty(n.prototype,"zoom",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"width",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"height",{get:function(){},enumerable:!1,configurable:!0}),n.prototype.isTouchCapable=function(){},n.prototype.isMobile=function(){},n.prototype.isWebview=function(){},n.prototype.enableLog=function(){},n.prototype.disableLog=function(){},n.prototype.setLogger=function(t){},n.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},n.prototype.registerCmd=function(t,e){},n.prototype.unregisterCmd=function(t){},n.prototype.registerCmds=function(t){},n.prototype.unregisterCmds=function(t){},n.prototype.getAllRegisterCmdName=function(){},n.prototype.getRegisterCmd=function(){},n.prototype.doCmd=function(t,e){},n.prototype.registerHandler=function(t,e){},n.prototype.unregisterHandler=function(t){},n.prototype.registerHandlers=function(t){},n.prototype.unregisterHandlers=function(t){},n.prototype.getHandlerByName=function(t){},n.prototype.getAllHandler=function(){},n.prototype.getAllRegisterHandlerName=function(){},n.prototype.registerNode=function(t,e){},n.prototype.unregisterNode=function(t){},n.prototype.registerNodes=function(t){},n.prototype.unregisterNodes=function(t){},n.prototype.getAllRegisterNodeName=function(){},n.prototype.addNode=function(t,e){},n.prototype.getNodeSelected=function(){},n.prototype.setNodeSelected=function(t){},n.prototype.createNode=function(t){},n.prototype.getIdsOfListNode=function(t){},n.prototype.compareListNode=function(t,e){},n.prototype.addPage=function(t,e){},n.prototype.removePage=function(t){},n.prototype.removeAllPage=function(){},n.prototype.getIndexPage=function(t){},n.prototype.swapIndexPage=function(t,e){},n.prototype.getPageSelected=function(){},n.prototype.setPageSelected=function(t){},n.prototype.getPages=function(){},n.prototype.registerClassType=function(t,e){},n.prototype.unregisterClassType=function(t,e){},n.prototype.registerClassTypes=function(t){},n.prototype.unregisterClassTypes=function(t){},n.prototype.getClassType=function(t,e){},n.prototype.getAllNameClassType=function(t){},n.prototype.loadJs=function(t,e,n){},n.prototype.loadCss=function(t){},n.prototype.loadFont=function(t,e,n){},n.prototype._initKeyboard=function(){},n.prototype._onkeypress=function(t){},n.prototype._onkeydown=function(t){},n.prototype._onkeyup=function(t){},Object.defineProperty(n.prototype,"keydowns",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"key_shift",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"key_meta",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"key_ctrl",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"key_alt",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"className",{get:function(){return"Note"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),n=o([u(f)],n)}(h),function(t){function n(){return null!==t&&t.apply(this,arguments)||this}e(n,t),n.prototype.init=function(){},n.prototype.startHandler=function(){},n.prototype.stopHandler=function(){},n.prototype.createBt=function(t,e){},n.prototype.showFrame=function(){},n.prototype.hideFrame=function(){},n.prototype.iframeMessages=function(t){},n.prototype.onBtCancel=function(){},n.prototype.onBtDone=function(){},Object.defineProperty(n.prototype,"iframePluginUrl",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"className",{get:function(){return"PHandler"},enumerable:!1,configurable:!0}),n=o([u(f)],n)}(S),function(){function t(){}Object.defineProperty(t.prototype,"className",{get:function(){return"Sanitizer"},enumerable:!1,configurable:!0}),t.num=function(t){},t.str=function(t){},t.str_hexColor=function(t){},t.str_style=function(t){},t.str_url=function(t,e,n){},t.sanitizeString=function(t){},t.sanitizeHtml=function(t){},t.sanitizeSvg=function(t){},t.sanitizeMathML=function(t){},t=o([u(f)],t)}(),function(t){function n(){return null!==t&&t.apply(this,arguments)||this}e(n,t),n.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},Object.defineProperty(n.prototype,"className",{get:function(){return"TimestampLogger"},enumerable:!1,configurable:!0}),n=o([u(f)],n)}(T),function(t){function n(){return null!==t&&t.apply(this,arguments)||this}e(n,t),n.prototype.init=function(){},n.prototype.renderAll=function(){},n.prototype.getData=function(){},n.prototype._checkNeedSaveHis=function(t){},n.prototype.setData=function(t,e){},n.prototype.export=function(){},n.prototype.getHis=function(){},n.prototype.setHis=function(t){},n.prototype.addChild=function(t){},n.prototype.addToParent=function(t){},n.prototype.addChilds=function(t){},n.prototype.getParent=function(){},n.prototype.removeFromParent=function(){},n.prototype.removeChild=function(t){},n.prototype.removeAllChild=function(){},n.prototype.getChild=function(){},n.prototype.clone=function(){},Object.defineProperty(n.prototype,"render",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"renderContent",{get:function(){},enumerable:!1,configurable:!0}),n.prototype.anchorable=function(){},n.prototype.getThumb=function(){},n.prototype.calSize=function(){},Object.defineProperty(n.prototype,"childData",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"childIds",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),n.prototype.css=function(t,e){},n.prototype.getCss=function(t){},n.prototype.renderStyle=function(){},n.prototype.renderCssClass=function(){},n.prototype.renderSize=function(){},n.prototype.renderTransform=function(){},n.prototype.renderTransformOrigin=function(){},n.prototype.setSize=function(t,e){},n.prototype.setTransformOriginPoint=function(t,e){},n.prototype.setTransformOrigin=function(t,e){},n.prototype.onResize=function(){},n.prototype.onTransform=function(){},n.prototype.getBorderWidth=function(){},Object.defineProperty(n.prototype,"x",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"y",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"width",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"height",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"originX",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"originY",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"deltaPos",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"deltaTime",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"resizable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"movable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"rotatable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"borderWidth",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"borderRadius",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"borderStyle",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"borderColor",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"enabled",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"selectable",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"hisSetting",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"scale",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"rotate",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"opacity",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"visible",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"zIndex",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"lock",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"style",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"cssClass",{get:function(){},set:function(t){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"contentWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"contentHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"rWidth",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"rHeight",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"originPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"centerPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"topPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"rightPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"bottomPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"leftPoint",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"boundingBox",{get:function(){},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"lastMouseDown",{get:function(){},enumerable:!1,configurable:!0}),n.prototype.initEventListener=function(){},n.prototype.addMouseEvent=function(){},n.prototype.removeMouseEvent=function(){},n.prototype.addTouchEvent=function(){},n.prototype.removeTouchEvent=function(){},n.prototype._mouseover=function(t){},n.prototype._mouseout=function(t){},n.prototype._mousemove=function(t){},n.prototype._mousedown=function(t){},n.prototype._mouseup=function(t){},n.prototype._nodeClick=function(t){},n.prototype._nodeDbClick=function(t){},n.prototype._nodeMultiClick=function(t){},n.prototype._click=function(t){},n.prototype._dblclick=function(t){},n.prototype._touchstart=function(t){},n.prototype._touchmove=function(t){},n.prototype._touchcancel=function(t){},n.prototype._touchend=function(t){},n.prototype._nodeDown=function(t){},n.prototype._nodeUp=function(t){},Object.defineProperty(n.prototype,"className",{get:function(){return"UINode"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"classType",{get:function(){},enumerable:!1,configurable:!0}),n=o([u(f)],n)}(h),function(){function t(){}return Object.defineProperty(t.prototype,"className",{get:function(){return"Utils"},enumerable:!1,configurable:!0}),t.addArrayPrototype=function(){},t.removeArrayPrototype=function(){},t.notNull=function(t){},t.isNull=function(t){},t.randrom=function(t,e){},t.merge=function(t,e){},t.deepMerge=function(t,e){},t.deepClone=function(t){},t.mergeNotNull=function(t,e){},t.mergePartial=function(t,e){},t.toArr=function(t){},t.getTransformValue=function(t){},t.transformToCss=function(t){},t.inserClassCss=function(t,e){},t.removeAllChildHTMLElement=function(t,e){},t.pointToPage=function(t,e){},t.getDistance=function(t,e,n,r){},t.getBoundingBox=function(t,e){},t.getOriginBoxOfBoundingBox=function(t,e){},t.pointInRect=function(t,e,n){},t.rectInRect=function(t,e){},t.pointRighAngle=function(t,e,n,r,o,i){},t.pointRighAngleRotate=function(t,e,n,r,o){},t.angleTo180=function(t){},t.pointLineInOrder=function(t,e,n,r,o,i){},t.angleOf=function(t,e,n,r){},t.getPointRotate=function(t,e,n,r,o){},t.getRectRotate=function(t,e,n,r){},t.getNodeConner=function(t){},t.createPointTest=function(t,e,n,r,o){},t.makeDragable=function(t){},t.clearDragable=function(t){},t.makeIconButtom=function(t,e,n,r){},t.cropCanvasTransparent=function(t,e){},t=o([u(f)],t)}()),M=(function(){function t(){}t.prototype.getSqDist=function(t,e){},t.prototype.getSqSegDist=function(t,e,n){},t.prototype.simplifyRadialDist=function(t,e){},t.prototype.simplifyDPStep=function(t,e,n,r,o){},t.prototype.simplifyDouglasPeucker=function(t,e){},t.prototype.simplify=function(t,e,n){},Object.defineProperty(t.prototype,"className",{get:function(){return"Simplify"},enumerable:!1,configurable:!0}),t=o([u(f)],t)}(),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),N=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return M(e,t),e.prototype.init=function(){this._cmdKeyDic={},this.setCmdKey=this.setCmdKey.bind(this),this.removeCmdKey=this.removeCmdKey.bind(this),this.setCmdKeyDic=this.setCmdKeyDic.bind(this),this.onkey=this.onkey.bind(this)},e.prototype.startHandler=function(){this.log("startHandler "+this.className),this.note.on(x.NOTE_CMD_CHANGE,this.setCmdKeyDic),this.note.on(x.NOTE_KEYDOWN,this.onkey),this.setCmdKeyDic()},e.prototype.stopHandler=function(){this.log("stopHandler "+this.className),this.note.removeListener(x.NOTE_CMD_CHANGE,this.setCmdKey),this.note.removeListener(x.NOTE_KEYDOWN,this.onkey)},e.prototype.setCmdKey=function(t){var e=this;t.prototype.keyShortcut&&t.prototype.keyShortcut.forEach((function(n){var r=n.toString();e._cmdKeyDic[r]||(e._cmdKeyDic[r]=[]),e._cmdKeyDic[r].addFilter(t.prototype.className)}))},e.prototype.removeCmdKey=function(t){var e=this;t.prototype.keyShortcut&&t.prototype.keyShortcut.forEach((function(t){var n=t.toString();e._cmdKeyDic[n]||delete e._cmdKeyDic[n]}))},e.prototype.setCmdKeyDic=function(){var t=this;this._cmdKeyDic={},this.note.getRegisterCmd().forEach((function(e){t.setCmdKey(e)}))},e.prototype.onkey=function(t){var e=this,n=this.note.keydowns;this.note.getTextFocus()||this._cmdKeyDic[n]&&this._cmdKeyDic[n].forEach((function(t){e.note.doCmd(t)}))},Object.defineProperty(e.prototype,"className",{get:function(){return"CmdHandler"},enumerable:!1,configurable:!0}),e}(S),R=n(486),D=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),A=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return D(e,t),e.prototype.init=function(){this.setPageView=this.setPageView.bind(this),this.setZoomView=this.setZoomView.bind(this),this.onPageScroll=this.onPageScroll.bind(this),this.render=document.createElement("div"),this.render.style.position="absolute",this.render.style.transformOrigin="0% 0%",this.render.classList.add(this.className),this.note.appendHandlerRender(this.render),this._pageContainer=document.createElement("div"),this._pageContainer.style.transformOrigin="0% 0%",this._pageContainer.style.position="absolute",this._pageContainer.style.transform="scale(1)",this.render.appendChild(this._pageContainer),this._pageMarginTop=10},e.prototype.startHandler=function(){this.log("startHandler "+this.className),this.render.addEventListener("scroll",this.onPageScroll),this.note.on(x.NOTE_PAGE_CHANGE,this.setPageView),this.note.on(x.NOTE_ZOOM_CHANGE,this.setZoomView),this.setPageView()},e.prototype.stopHandler=function(){this.log("stopHandler "+this.className),this.render.removeEventListener("scroll",this.onPageScroll),this.note.removeListener(x.NOTE_PAGE_CHANGE,this.setPageView),this.note.removeListener(x.NOTE_ZOOM_CHANGE,this.setZoomView),P.removeAllChildHTMLElement(this._pageContainer)},e.prototype.onPageScroll=function(){this.note.emit(x.NOTE_PAGE_VIEW_CHANGE)},e.prototype.setPageView=function(){var t=this,e=this.note.getPages(),n=this._pageMarginTop,r=0;e.forEach((function(e,o){e.render.parentNode&&e.render.parentNode==t._pageContainer||t._pageContainer.appendChild(e.render),e.y=n,n+=e.height+t._pageMarginTop,r=e.width>r?e.width:r})),e.forEach((function(t,e){t.x=(r-t.width)/2})),this.render.style.width=this.note.config.width+"px",this.render.style.height=this.note.config.height+"px",this.render.style.overflow="scroll",this._pageContainer.style.width=r+"px",this._pageContainer.style.height=n+"px",this.setZoomView()},e.prototype.setZoomView=function(){var t=parseFloat(this._pageContainer.style.transform.replace("scale(","")),e=parseFloat(this.note.zoom.toFixed(2)),n=(0,R.parseInt)(this._pageContainer.style.width),r=(0,R.parseInt)(this._pageContainer.style.height),o=(0,R.parseInt)(this.render.style.width),i=(0,R.parseInt)(this.render.style.height);r=r<=0?1:r;var u=.5,c=.5;(n=n<=0?1:n)*t>o&&(u=(this.render.scrollLeft+o/2)/(n*t)),r*t>i&&(c=(this.render.scrollTop+i/2)/(r*t)),this._pageContainer.style.transform="scale("+e+")",n*e<=o?(this.render.style.overflowX="hidden",this._pageContainer.style.left=(o-n*e)/2+"px"):(this.render.style.overflowX="auto",this._pageContainer.style.left="0px",this.render.scrollLeft=u*n*e-o/2),Math.floor(r*e)<=Math.floor(i)+this._pageMarginTop?(this.render.style.overflowY="hidden",this._pageContainer.style.top="0px"):(this.render.style.overflowY="scroll",this._pageContainer.style.top="0px",this.render.scrollTop=c*r*e-i/2),this.note.emit(x.NOTE_PAGE_VIEW_CHANGE,this,this.note.config.width,(0,R.parseInt)(this._pageContainer.style.height)*e)},Object.defineProperty(e.prototype,"className",{get:function(){return"PageViewHandler"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageMarginTop",{get:function(){return this._pageMarginTop},set:function(t){this._pageMarginTop=t},enumerable:!1,configurable:!0}),e}(S),I=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),L=function(){return L=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},L.apply(this,arguments)};!function(t){t.SELECTION="selection",t.DRAGGING="dragging",t.CONTROL="control",t.NONE="none"}(C||(C={}));var j=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._iconRotate='<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24"><path fill="currentColor" d="M15.25 18.48V15a.75.75 0 1 0-1.5 0v4c0 .97.78 1.75 1.75 1.75h4a.75.75 0 1 0 0-1.5h-2.6a8.75 8.75 0 0 0-2.07-15.53.75.75 0 1 0-.49 1.42 7.25 7.25 0 0 1 .91 13.34zM8.75 5.52V9a.75.75 0 0 0 1.5 0V5c0-.97-.78-1.75-1.75-1.75h-4a.75.75 0 0 0 0 1.5h2.6a8.75 8.75 0 0 0 2.18 15.57.75.75 0 0 0 .47-1.43 7.25 7.25 0 0 1-1-13.37z"></path></svg>',e._iconLock='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12.75 14.33v3.03a.75.75 0 0 1-1.5 0v-3.03c-.6-.3-1.03-.94-1.03-1.69 0-1.02.8-1.85 1.78-1.85s1.78.83 1.78 1.85c0 .75-.42 1.4-1.03 1.69zM6 8h12a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-9c0-1.1.9-2 2-2zm0 1.5a.5.5 0 0 0-.5.5v9c0 .28.22.5.5.5h12a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5H6zM7.5 8H6a6 6 0 1 1 12 0h-1.5a4.5 4.5 0 1 0-9 0z"></path></svg>',e._overBorderCss={borderColor:"#8b3dff",borderWidth:3,borderStyle:"solid"},e._selectedBorderCss={borderColor:"#8b3dff",borderWidth:2,borderStyle:"solid"},e._rectSelectedBorderCss={borderColor:"#ffffff",borderFillColor:"#AAAAAA88",borderWidth:2,borderStyle:"dashed"},e._controlSize=15,e._controlColor="#ffffff",e._controlBorderColor="#999999",e._controlOverColor="#8b3dff",e._controlRadius=50,e._controlMidWidth=20,e._controlMidHeight=6,e._selectionCss={borderColor:"#8b3dff",borderWidth:1,borderStyle:"solid",backgroundColor:"#8b3dff44"},e._mousePressing=!1,e._pressingType=C.NONE,e._posxDown=0,e._posyDown=0,e._posx=0,e._posy=0,e._nodePropDown={},e._boxSelectedAngle=0,e}return I(e,t),e.prototype.init=function(){this.nodeMouseOut=this.nodeMouseOut.bind(this),this.nodeMouseOver=this.nodeMouseOver.bind(this),this.nodeMouseDown=this.nodeMouseDown.bind(this),this.nodeMouseUp=this.nodeMouseUp.bind(this),this.noteMouseDown=this.noteMouseDown.bind(this),this.noteMouseUp=this.noteMouseUp.bind(this),this.windowMouseMove=this.windowMouseMove.bind(this),this.windowMouseUp=this.windowMouseUp.bind(this),this.onPageChange=this.onPageChange.bind(this),this.onNodeChange=this.onNodeChange.bind(this),this.onNoteHandlerRenderChange=this.onNoteHandlerRenderChange.bind(this),this._nodeSelected=[],this.render=document.createElement("div"),this.render.style.position="absolute",this.render.classList.add(this.className),this.note.appendHandlerRender(this.render),this._renderRectSelectedBorder=this.createRender("_renderRectSelectedBorder");var t=this.createRender("dashBorder");t.style.display="block",this._renderRectSelectedBorder.appendChild(t),this._renderSelectedBorder=this.createRender("renderSelectedBorder"),this._renderOverBorder=this.createRender("renderOverBorder"),this._renderControl=this.createRender("renderControl"),this._controlTop=this.createControl("ctrTop"),this._controlRight=this.createControl("ctrRight"),this._controlBottom=this.createControl("ctrBottom"),this._controlLeft=this.createControl("ctrLeft"),this._controlRotate=this.createControl("ctrRotate"),this._controlRotate.innerHTML=this._iconRotate,this._controlMidTop=this.createControl("ctrMidTop"),this._controlMidRight=this.createControl("ctrMidRight"),this._controlMidBottom=this.createControl("ctrMidBottom"),this._controlMidLeft=this.createControl("ctrMidLeft"),this._controlLock=this.createControl("ctrLock"),this._controlLock.innerHTML=this._iconLock,this._renderSelection=this.createRender("renderSelection"),this._renderSelectionSelected=this.createRender("renderSelectionSelected")},e.prototype.createRender=function(t,e){var n=document.createElement("div");return n.style.position="absolute",n.classList.add(t),n.style.display="none",n.style.pointerEvents="none",e||(e=this.render),e.appendChild(n),n},e.prototype.createControl=function(t){var e=this,n=document.createElement("div");return n.classList.add(t),n.style.pointerEvents="all",n.style.cursor="crosshair",n.style.position="absolute",n.addEventListener("mouseover",(function(t){n.style.backgroundColor=e._controlOverColor,n.style.color="white",t.stopImmediatePropagation(),t.preventDefault()})),n.addEventListener("mouseout",(function(t){n.style.backgroundColor=e._controlColor,n.style.color="black",t.stopImmediatePropagation(),t.preventDefault()})),n.addEventListener("mousedown",(function(t){n.style.backgroundColor=e._controlOverColor,e.nodeMouseDown(n,t),t.stopImmediatePropagation(),t.preventDefault()})),n.addEventListener("touchstart",(function(t){n.style.backgroundColor=e._controlOverColor,e.nodeMouseDown(n,t),t.stopImmediatePropagation(),t.preventDefault()})),n.addEventListener("mouseup",(function(t){n.style.backgroundColor=e._controlColor,e.nodeMouseUp(n,t),t.stopImmediatePropagation(),t.preventDefault()})),n.addEventListener("touchend",(function(t){n.style.backgroundColor=e._controlColor,e.nodeMouseUp(n,t),t.stopImmediatePropagation(),t.preventDefault()})),n.addEventListener("touchcancel",(function(t){n.style.backgroundColor=e._controlColor,e.nodeMouseUp(n,t),t.stopImmediatePropagation(),t.preventDefault()})),this._renderControl.appendChild(n),n},e.prototype.createPointTest=function(t,e,n){var r=this.createRender("point",n);return r.style.display="block",r.style.backgroundColor="#ff000044",r.style.borderRadius="50%",r.style.top=e-5+"px",r.style.left=t-5+"px",r.style.width=r.style.height="10px",r},e.prototype.setRenderBaseCss=function(t,e){P.notNull(e.borderWidth)&&(t.style.borderWidth=e.borderWidth+"px"),P.notNull(e.borderStyle)&&(t.style.borderStyle=e.borderStyle),P.notNull(e.borderColor)&&(t.style.borderColor=e.borderColor),P.notNull(e.borderRadius)&&(t.style.borderRadius="number"==typeof e.borderRadius?e.borderRadius+"px":""),P.notNull(e.backgroundColor)&&(t.style.backgroundColor=e.backgroundColor);var n=P.notNull(e.borderWidth)?e.borderWidth:0;P.notNull(e.x)&&(t.style.left=e.x-n+"px"),P.notNull(e.y)&&(t.style.top=e.y-n+"px"),P.notNull(e.width)&&(t.style.width=e.width+"px"),P.notNull(e.height)&&(t.style.height=e.height+"px"),P.notNull(e.rotate)?t.style.transform="rotate("+e.rotate+"deg)":t.style.transform="rotate(0deg)"},e.prototype.startHandler=function(){this.log("startHandler "+this.className),this.note.on(x.NODE_MOUSE_OVER,this.nodeMouseOver),this.note.on(x.NODE_MOUSE_OUT,this.nodeMouseOut),this.note.on(x.NODE_DOWN,this.nodeMouseDown),this.note.on(x.NODE_UP,this.nodeMouseUp),this.note.on(x.NOTE_PAGE_CHANGE,this.onPageChange),this.note.on(x.NOTE_PAGE_VIEW_CHANGE,this.onPageChange),this.note.on(x.NOTE_HANDLER_RENDER_CHANGE,this.onNoteHandlerRenderChange),this.note.on(x.PAGE_CHANGE,this.onPageChange),this.note.on(x.NOTE_NODE_SELECTED,this.onPageChange),this.note.on(x.NODE_CHANGE,this.onNodeChange),this.note.on(x.NOTE_ZOOM_CHANGE,this.onNodeChange),this.note.render.addEventListener("mousedown",this.noteMouseDown)},e.prototype.stopHandler=function(){this.log("stopHandler "+this.className),this.note.render.removeEventListener("mousedown",this.noteMouseDown),this.note.removeListener(x.NODE_MOUSE_OVER,this.nodeMouseOver),this.note.removeListener(x.NODE_MOUSE_OUT,this.nodeMouseOut),this.note.removeListener(x.NODE_DOWN,this.nodeMouseDown),this.note.removeListener(x.NODE_UP,this.nodeMouseUp),this.note.removeListener(x.NOTE_PAGE_VIEW_CHANGE,this.onPageChange),this.note.removeListener(x.NOTE_HANDLER_RENDER_CHANGE,this.onNoteHandlerRenderChange),this.note.removeListener(x.PAGE_CHANGE,this.onPageChange),this.note.removeListener(x.NODE_CHANGE,this.onNodeChange),this.note.removeListener(x.NOTE_NODE_SELECTED,this.onPageChange),this.note.removeListener(x.NOTE_ZOOM_CHANGE,this.onNodeChange)},e.prototype.onNoteHandlerRenderChange=function(){this.render.style.zIndex=this.render.parentNode.childNodes.length+""},e.prototype.onPageChange=function(){if(this.note.compareListNode(this._nodeSelected,this.note.getNodeSelected())){if(!this._nodeSelected||0==this._nodeSelected.length||null==this._nodeSelected[0].getParent())return;this.renderAll()}else this._rectSelected=null,this._rectSelectedDown=null,this._boxSelectedAngle=0,this._nodeOver=null,this._nodeClickSelected=null,this._nodeSelected=this.note.getNodeSelected(),this.renderAll()},e.prototype.onNodeChange=function(){this._nodeSelected.length>0&&this.renderAll(),this.note.emit(x.NOTE_SELECTION_END,this._renderControl.getBoundingClientRect())},e.prototype.noteMouseDown=function(t){this.log("note selection mouse down ! "),this.nodeMouseDown(this.note,t)},e.prototype.noteMouseUp=function(t){this.nodeMouseUp(this.note,t)},e.prototype.nodeMouseOver=function(t){if(t!=this._nodeOver){if(t.classType==E.UIPAGE);else{for(var e=t;e.getParent().classType!=E.UIPAGE;)e=e.getParent();this._nodeSelected.indexOf(e)<0&&(this._nodeOver=e)}this.renderOverBorder()}},e.prototype.nodeMouseOut=function(t){this._nodeOver=null,this.renderOverBorder()},e.prototype.nodeMouseDown=function(t,e,n){if(1==this._mousePressing)return e.stopImmediatePropagation(),void e.preventDefault();this._mousePressing=!0,e instanceof MouseEvent?(window.addEventListener("mousemove",this.windowMouseMove),window.addEventListener("mouseup",this.windowMouseUp)):(window.addEventListener("touchmove",this.windowMouseMove),window.addEventListener("touchend",this.windowMouseUp),window.addEventListener("touchcancel",this.windowMouseUp)),this._cursorDown=this.note.render.style.cursor,this._cursorDown=this._cursorDown?this._cursorDown:"default";var r=e instanceof MouseEvent?e.clientX:e.touches[0].clientX,o=e instanceof MouseEvent?e.clientY:e.touches[0].clientY,i={x:r,y:o};if(this._posxDown=i.x,this._posyDown=i.y,this._posx=i.x,this._posy=i.y,t instanceof HTMLElement)return this._pressingType=C.CONTROL,this._controlPressing=t,void this.saveProDown();if(this._renderControl.style.display="none",t.classType!=E.NOTE)if(t.classType!=E.UIPAGE){this._pressingType=C.DRAGGING,this._nodeClickSelected=null;for(var u=t;u.getParent().classType!=E.UIPAGE;)u=u.getParent();0==this._nodeSelected.length?(this._nodeSelected.push(u),this._nodeClickSelected=t):this._nodeSelected.indexOf(u)>=0?this._nodeSelected.length>1?this.note.key_shift&&this._nodeSelected.removeFilter(u):this._nodeClickSelected=t:this.note.key_shift?u.getParent()==this._nodeSelected[0].getParent()&&this._nodeSelected.push(u):(this._nodeSelected=[u],this._nodeClickSelected=t),this.renderAll(),this.saveProDown(),this._pressingType==C.SELECTION&&document.activeElement&&document.activeElement.blur(),this.note.emit(x.NOTE_SELECTION_START,this._renderControl.getBoundingClientRect()),this.note.config.actionMode==w.TOUCH&&(document.body.style.overflow="hidden")}else{if(this._nodeSelected.length>1){var c=this._renderRectSelectedBorder.getBoundingClientRect();P.pointInRect(r,o,c)?(this._pressingType=C.DRAGGING,this.saveProDown()):this._pressingType=C.SELECTION}else this._pressingType=C.SELECTION;e instanceof TouchEvent&&(this._pressingType=C.NONE)}else this._pressingType=C.SELECTION},e.prototype.saveProDown=function(){var t=this;this._nodeSelected.length>0&&(this._nodeSelected.forEach((function(e){t._nodePropDown[e.getId()]={x:e.x,y:e.y,width:e.width,height:e.height,scale:e.scale,rotate:e.rotate,originX:e.originX,originY:e.originY},e.selectable=!1})),this._rectSelected?this._rectSelectedDown=JSON.parse(JSON.stringify(this._rectSelected)):this._rectSelectedDown={})},e.prototype.windowMouseMove=function(t){var e=this;if(this._mousePressing){var n={x:t instanceof MouseEvent?t.clientX:t.touches[0].clientX,y:t instanceof MouseEvent?t.clientY:t.touches[0].clientY};Math.abs(n.x-this._posxDown)<1&&Math.abs(n.y-this._posyDown)<1||(this._posx=n.x,this._posy=n.y,this._pressingType==C.DRAGGING?0==this._rectSelected.lock&&1==this._rectSelected.movable&&this._nodeSelected.forEach((function(t){var n=e.scalePageToWorld(t.getParent());if(e._nodePropDown[t.getId()]){var r=e._nodePropDown[t.getId()];t.x=Math.floor(r.x+(e._posx-e._posxDown)*n.scaleX),t.y=Math.floor(r.y+(e._posy-e._posyDown)*n.scaleY)}})):this._pressingType==C.SELECTION?this.findNodeWhenSelection():this._pressingType==C.CONTROL&&this.controlMove(),this._pressingType==C.DRAGGING?this.note.render.style.cursor="move":this._pressingType==C.SELECTION?this.note.render.style.cursor="default":this._pressingType==C.CONTROL&&(this.note.render.style.cursor="crosshair"),this.renderAll(),this._renderControl.style.display="none",this.note.emit(x.NOTE_SELECTION_MOVING,this._renderControl.getBoundingClientRect()))}},e.prototype.windowMouseUp=function(t){this.nodeMouseUp(this.note,t)},e.prototype.nodeMouseUp=function(t,e){if(t instanceof HTMLElement||(t.classType==E.UIPAGE&&(this._pageSelected=t),this._pressingType==C.SELECTION&&(this._nodeSelected=this.findNodeWhenSelection(),this._nodeClickSelected=null)),(this._pressingType==C.DRAGGING||this._pressingType==C.CONTROL)&&this._nodeSelected.length>0){var n=this._nodeSelected[0].getParent();n&&this.note.saveHistory(n)}P.removeAllChildHTMLElement(this._renderSelectionSelected),window.removeEventListener("mousemove",this.windowMouseMove),window.removeEventListener("mouseup",this.windowMouseUp),window.removeEventListener("touchmove",this.windowMouseMove),window.removeEventListener("touchend",this.windowMouseUp),window.removeEventListener("touchcancel",this.windowMouseUp),this._nodePropDown={},this._mousePressing=!1,this._controlPressing=null,this._pressingType=C.NONE,this._posxDown=0,this._posyDown=0,this._posx=0,this._posy=0,this.note.render.style.cursor=this._cursorDown,this._cursorDown="";for(var r=!0;r;){r=!1;for(var o=0;o<this._nodeSelected.length;o++)if(null==this._nodeSelected[o].getParent()){this._nodeSelected.splice(o,1),r=!0;break}}this.renderAll(),this.note.setNodeSelected(this._nodeSelected.concat([])),null!=this._pageSelected&&this.note.setPageSelected(this._pageSelected),this.note.emit(x.NOTE_SELECTION_END,this._renderControl.getBoundingClientRect()),this.note.config.actionMode==w.TOUCH&&(document.body.style.overflow="auto")},e.prototype.findNodeWhenSelection=function(){var t=this;P.removeAllChildHTMLElement(this._renderSelectionSelected);for(var e={x:Math.min(this._posx,this._posxDown),y:Math.min(this._posy,this._posyDown),width:Math.abs(this._posx-this._posxDown),height:Math.abs(this._posy-this._posyDown)},n=null,r=[],o=0;o<this.note.getPages().length;o++){var i=this.note.getPages()[o],u=i.render.getBoundingClientRect();if(P.rectInRect(u,e)){n=i;break}}if(n){if(this._nodeSelected.length>0&&this._nodeSelected[0].getParent()!=n)return r;if(n.getChild().forEach((function(t){var n=t.render.getBoundingClientRect();P.rectInRect(n,e)&&1==t.enabled&&r.addFilter(t)})),this._nodeSelected.length>0){var c=this._renderRectSelectedBorder.getBoundingClientRect();P.rectInRect(c,e)&&this._nodeSelected.forEach((function(t){1==t.enabled&&r.addFilter(t)}))}r.length>0&&r.forEach((function(e){t._renderSelectionSelected.appendChild(t.renderSelectedBorderForNode(e))}))}return this._renderSelectionSelected.style.display="block",r},e.prototype.controlMove=function(){var t=this;if(0!=this._nodeSelected.length){var e={x:(d=this._rectSelectedDown).x+d.width/2,y:d.y+d.height/2},n=P.getPointRotate(d.x,d.y,e.x,e.y,d.rotate),r=P.getPointRotate(d.x+d.width,d.y,e.x,e.y,d.rotate),o=P.getPointRotate(d.x+d.width,d.y+d.height,e.x,e.y,d.rotate),i=P.getPointRotate(d.x,d.y+d.height,e.x,e.y,d.rotate),u=this.pointToSelectionSpace({x:this._posx,y:this._posy});if(this._controlPressing!=this._controlTop)if(this._controlPressing!=this._controlRight)if(this._controlPressing!=this._controlBottom)if(this._controlPressing!=this._controlLeft){if(this._controlPressing==this._controlMidTop){var c=(p=this._nodeSelected[0]).getParent();u=this.pointToPageSpace({x:this._posx,y:this._posy},c),o=this.pointSelectionToPage([o],c)[0],i=this.pointSelectionToPage([i],c)[0];_=P.pointRighAngle(o.x,o.y,i.x,i.y,u.x,u.y);var a=P.getDistance(u.x,u.y,_.x,_.y)/p.scale;p.height=a;var s=Math.PI*p.rotate/180,l=p.width*p.originX,f=p.height*p.originY;p.x=o.x-l-((1-p.originX)*p.width*Math.cos(s)-(1-p.originY)*p.height*Math.sin(s))*p.scale,p.y=o.y-f-((1-p.originX)*p.width*Math.sin(s)+(1-p.originY)*p.height*Math.cos(s))*p.scale}if(this._controlPressing==this._controlMidRight){c=(p=this._nodeSelected[0]).getParent();u=this.pointToPageSpace({x:this._posx,y:this._posy},c),n=this.pointSelectionToPage([n],c)[0],i=this.pointSelectionToPage([i],c)[0];_=P.pointRighAngle(n.x,n.y,i.x,i.y,u.x,u.y);var h=P.getDistance(u.x,u.y,_.x,_.y)/p.scale;p.width=h;s=Math.PI*p.rotate/180,l=p.width*p.originX,f=p.height*p.originY;p.x=n.x-l-(-l*Math.cos(s)+f*Math.sin(s))*p.scale,p.y=n.y-f-(-l*Math.sin(s)-f*Math.cos(s))*p.scale}if(this._controlPressing==this._controlMidBottom){c=(p=this._nodeSelected[0]).getParent();u=this.pointToPageSpace({x:this._posx,y:this._posy},c),n=this.pointSelectionToPage([n],c)[0],r=this.pointSelectionToPage([r],c)[0];_=P.pointRighAngle(n.x,n.y,r.x,r.y,u.x,u.y),a=P.getDistance(u.x,u.y,_.x,_.y)/p.scale;p.height=a;s=Math.PI*p.rotate/180,l=p.width*p.originX,f=p.height*p.originY;p.x=n.x-l-(-l*Math.cos(s)+f*Math.sin(s))*p.scale,p.y=n.y-f-(-l*Math.sin(s)-f*Math.cos(s))*p.scale}if(this._controlPressing==this._controlMidLeft){var p;c=(p=this._nodeSelected[0]).getParent();u=this.pointToPageSpace({x:this._posx,y:this._posy},c),o=this.pointSelectionToPage([o],c)[0],r=this.pointSelectionToPage([r],c)[0];_=P.pointRighAngle(o.x,o.y,r.x,r.y,u.x,u.y),h=P.getDistance(u.x,u.y,_.x,_.y)/p.scale;p.width=h;s=Math.PI*p.rotate/180,l=p.width*p.originX,f=p.height*p.originY;p.x=o.x-l-((1-p.originX)*p.width*Math.cos(s)-(1-p.originY)*p.height*Math.sin(s))*p.scale,p.y=o.y-f-((1-p.originX)*p.width*Math.sin(s)+(1-p.originY)*p.height*Math.cos(s))*p.scale}if(this._controlPressing==this._controlRotate){var d=this._rectSelectedDown,y=(u=this.pointToSelectionSpace({x:this._posx,y:this._posy}),Math.floor(P.angleOf(u.x,u.y,d.x+d.width/2,d.y+d.height/2))-90);if(Math.abs(y)>1){if(y-=d.rotate,this.note.key_shift){this._rectSelected.rotate=this._rectSelectedDown.rotate+y,Math.abs(this._rectSelected.rotate)<10?(this._rectSelected.rotate=0,y=this._rectSelected.rotate-=this._rectSelectedDown.rotate):Math.abs(this._rectSelected.rotate-90)<10?(this._rectSelected.rotate=90,y=this._rectSelected.rotate-=this._rectSelectedDown.rotate):Math.abs(this._rectSelected.rotate- -90)<10?(this._rectSelected.rotate=-90,y=this._rectSelected.rotate-=this._rectSelectedDown.rotate):Math.abs(this._rectSelected.rotate-180)<10&&(this._rectSelected.rotate=this._rectSelected.rotate<0?-180:180,y=this._rectSelected.rotate-=this._rectSelectedDown.rotate)}this._rectSelected.rotate=this._rectSelectedDown.rotate+y;var g=this.pointSelectionToPage([{x:d.x+d.width/2,y:d.y+d.height/2}],this._nodeSelected[0].getParent())[0];this._nodeSelected.length>1&&(this._boxSelectedAngle=this._rectSelected.rotate),this._nodeSelected.forEach((function(e){var n=t._nodePropDown[e.getId()];e.rotate=n.rotate+y;var r={x:n.x+n.width*n.originX,y:n.y+n.height*n.originY},o=P.getPointRotate(r.x,r.y,g.x,g.y,y);e.x=o.x-n.width*n.originX,e.y=o.y-n.height*n.originY}))}}}else{var _=P.pointRighAngle(r.x,r.y,e.x,e.y,u.x,u.y);v=P.getDistance(_.x,_.y,r.x,r.y),b=P.getDistance(i.x,i.y,r.x,r.y);if(P.getDistance(_.x,_.y,r.x,r.y)>15&&!P.pointLineInOrder(_.x,_.y,r.x,r.y,e.x,e.y)){m=v/b;this._nodeSelected.forEach((function(e){var n=t.pointSelectionToPage([r],e.getParent())[0],o=t._nodePropDown[e.getId()];o&&(e.scale=o.scale*m);var i=o.x+o.width*o.originX,u=o.y+o.height*o.originY;e.x=n.x+(i-n.x)*m-o.width*o.originX,e.y=n.y+(u-n.y)*m-o.height*o.originY}))}}else{var _=P.pointRighAngle(n.x,n.y,e.x,e.y,u.x,u.y);v=P.getDistance(_.x,_.y,n.x,n.y),b=P.getDistance(o.x,o.y,n.x,n.y);if(P.getDistance(_.x,_.y,n.x,n.y)>15&&!P.pointLineInOrder(_.x,_.y,n.x,n.y,e.x,e.y)){m=v/b;this._nodeSelected.forEach((function(e){var r=t.pointSelectionToPage([n],e.getParent())[0],o=t._nodePropDown[e.getId()];o&&(e.scale=o.scale*m);var i=o.x+o.width*o.originX,u=o.y+o.height*o.originY;e.x=r.x+(i-r.x)*m-o.width*o.originX,e.y=r.y+(u-r.y)*m-o.height*o.originY}))}}else{var _=P.pointRighAngle(i.x,i.y,e.x,e.y,u.x,u.y),v=P.getDistance(_.x,_.y,i.x,i.y),b=P.getDistance(r.x,r.y,i.x,i.y);if(P.getDistance(_.x,_.y,i.x,i.y)>15&&!P.pointLineInOrder(_.x,_.y,i.x,i.y,e.x,e.y)){var m=v/b;this._nodeSelected.forEach((function(e){var n=t.pointSelectionToPage([i],e.getParent())[0],r=t._nodePropDown[e.getId()];r&&(e.scale=r.scale*m);var o=r.x+r.width*r.originX,u=r.y+r.height*r.originY;e.x=n.x+(o-n.x)*m-r.width*r.originX,e.y=n.y+(u-n.y)*m-r.height*r.originY}))}}else{var _=P.pointRighAngle(o.x,o.y,e.x,e.y,u.x,u.y),v=P.getDistance(_.x,_.y,o.x,o.y),b=P.getDistance(n.x,n.y,o.x,o.y);if(P.getDistance(_.x,_.y,o.x,o.y)>15&&!P.pointLineInOrder(_.x,_.y,o.x,o.y,e.x,e.y)){var m=v/b;this._nodeSelected.forEach((function(e){var n=t.pointSelectionToPage([o],e.getParent())[0],r=t._nodePropDown[e.getId()];r&&(e.scale=r.scale*m);var i=r.x+r.width*r.originX,u=r.y+r.height*r.originY;e.x=n.x+(i-n.x)*m-r.width*r.originX,e.y=n.y+(u-n.y)*m-r.height*r.originY}))}}}},e.prototype.calRectSelected=function(){if(this._nodeSelected||(this._nodeSelected=[]),0==this._nodeSelected.length)return this._rectSelected=null,this._rectSelectedDown=null,void(this._boxSelectedAngle=0);if(null!=this._nodeSelected[0].getParent())if(1==this._nodeSelected.length){var t=this._nodeSelected[0];this._rectSelected=this.rectNodeToSelectionSpace(t),this._boxSelectedAngle=0,this._rectSelected.lock=t.lock,this._rectSelected.movable=t.movable,this._rectSelected.resizable=t.resizable,this._rectSelected.rotatable=t.rotatable}else this._rectSelected=this.findRotateBoundingBoxSelectedNode(this._boxSelectedAngle)},e.prototype.findRotateBoundingBoxSelectedNode=function(t){if(0==this._nodeSelected.length||!this._nodeSelected)return null;var e=[],n=!1,r=!0,o=!0,i=!0;this._nodeSelected.forEach((function(t){e=e.concat([t.topPoint,t.rightPoint,t.bottomPoint,t.leftPoint]),t.lock&&(n=!0),t.movable||(r=!1),t.resizable||(o=!1),t.rotatable||(i=!1)}));var u=(e=this.pointPageToSelection(e,this._nodeSelected[0].getParent()))[0],c=e[0];90==(t=(t%=360)>180?t-360:t)||-90==t?e.forEach((function(t){u=u.x>t.x?t:u,c=c.x<t.x?t:c})):e.forEach((function(n){var r=u.y-Math.tan(Math.PI*t/180)*u.x,o=c.y-Math.tan(Math.PI*t/180)*c.x;e.forEach((function(e){var n=e.y-Math.tan(Math.PI*t/180)*e.x;u=n<r?e:u,c=n>o?e:c}))}));var a=t+90;a=(a%=360)>180?a-360:a;var s=e[0],l=e[0];90==a||-90==a?e.forEach((function(t){s=s.x>t.x?t:s,l=l.x<t.x?t:l})):e.forEach((function(t){var n=s.y-Math.tan(Math.PI*a/180)*s.x,r=l.y-Math.tan(Math.PI*a/180)*l.x;e.forEach((function(t){var e=t.y-Math.tan(Math.PI*a/180)*t.x;s=e<n?t:s,l=e>r?t:l}))}));P.removeAllChildHTMLElement(this.render,"points");var f=P.pointRighAngleRotate(s.x,s.y,a,u.x,u.y),h=P.pointRighAngleRotate(s.x,s.y,a,c.x,c.y),p=P.pointRighAngleRotate(l.x,l.y,a,u.x,u.y),d=P.pointRighAngleRotate(l.x,l.y,a,c.x,c.y),y={x:(h.x+p.x)/2,y:(h.y+p.y)/2};f=P.getPointRotate(f.x,f.y,y.x,y.y,-t),h=P.getPointRotate(h.x,h.y,y.x,y.y,-t),p=P.getPointRotate(p.x,p.y,y.x,y.y,-t),d=P.getPointRotate(d.x,d.y,y.x,y.y,-t);var g=Math.min(f.x,h.x,p.x,d.x),_=Math.min(f.y,h.y,p.y,d.y);return{x:g,y:_,width:Math.max(f.x,h.x,p.x,d.x)-g,height:Math.max(f.y,h.y,p.y,d.y)-_,rotate:t,lock:n,movable:r,resizable:o,rotatable:i}},e.prototype.checkPointInRotateRect=function(t,e){var n=P.getPointRotate(t.x,t.y,e.x+e.width/2,e.y+e.height/2,-e.rotate);return P.pointInRect(n.x,n.y,e)},e.prototype.renderAll=function(){this.calRectSelected(),this.renderOverBorder(),this.renderSelectedBorder(),this.renderGroupSelectedBorder(),this.renderControl(),this.renderSelection()},e.prototype.renderOverBorder=function(){if(this._nodeOver){var t=this.rectNodeToSelectionSpace(this._nodeOver);this.setRenderBaseCss(this._renderOverBorder,L(L({},t),this._overBorderCss)),this._renderOverBorder.style.display="block"}else this._renderOverBorder.style.display="none"},e.prototype.renderSelectedBorder=function(){var t=this;P.removeAllChildHTMLElement(this._renderSelectedBorder),this._renderSelectedBorder.style.display=this._nodeSelected.length>0||null!=this._pageSelected?"block":"none",this._pageSelected,null!=this._nodeClickSelected?this._renderSelectedBorder.appendChild(this.renderSelectedBorderForNode(this._nodeClickSelected)):this._nodeSelected.forEach((function(e){t._renderSelectedBorder.appendChild(t.renderSelectedBorderForNode(e))}))},e.prototype.renderSelectedBorderForNode=function(t){var e=document.createElement("div");e.style.position="absolute",e.style.pointerEvents="none";var n=this.rectNodeToSelectionSpace(t);return this.setRenderBaseCss(e,L(L({},n),this._selectedBorderCss)),e},e.prototype.renderGroupSelectedBorder=function(){if(this._renderRectSelectedBorder.style.display=this._nodeSelected.length>0?"block":"none",0!=this._nodeSelected.length){this._renderRectSelectedBorder.style.opacity="1",1==this._nodeSelected.length&&(this._nodeClickSelected&&this._nodeClickSelected!=this._nodeSelected[0]?this._renderRectSelectedBorder.style.opacity="1":this._renderRectSelectedBorder.style.opacity="0");var t=this._renderRectSelectedBorder.firstChild,e=P.deepClone(this._rectSelected);e.x=-2,e.y=-2,e.width+=4,e.height+=4,delete e.rotate,this.setRenderBaseCss(t,L(L({},e),this._rectSelectedBorderCss)),this.setRenderBaseCss(this._renderRectSelectedBorder,L(L({},this._rectSelected),{borderColor:this._rectSelectedBorderCss.borderFillColor,borderWidth:this._rectSelectedBorderCss.borderWidth+3,borderStyle:"solid"}))}},e.prototype.renderControl=function(){var t=this;if(0!=this._nodeSelected.length&&this._rectSelected){var e=this._rectSelected.width,n=this._rectSelected.height;this._controlSize=this.note.config.actionMode==w.MOUSE?15:20,this.setRenderBaseCss(this._renderControl,this._rectSelected),this._renderControl.style.display="block";var r=[this._controlTop,this._controlRight,this._controlBottom,this._controlLeft,this._controlRotate,this._controlLock];r.forEach((function(e){e.style.width=t._controlSize+"px",e.style.height=t._controlSize+"px",e.style.borderRadius=t._controlRadius+"%",e.style.border="1px solid "+t._controlBorderColor,e.style.backgroundColor=t._controlColor})),this._controlRotate.style.width=Math.round(1.4*this._controlSize)+"px",this._controlRotate.style.height=Math.round(1.4*this._controlSize)+"px";var o=this._controlRotate.firstChild;o.style.width=parseInt(this._controlRotate.style.width)-4+"px",o.style.height=parseInt(this._controlRotate.style.height)-4+"px",o.style.margin="2px",this._controlLock.style.width=Math.round(1.5*this._controlSize)+"px",this._controlLock.style.height=Math.round(1.5*this._controlSize)+"px";var i=this._controlLock.firstChild;i.style.width=parseInt(this._controlLock.style.width)-4+"px",i.style.height=parseInt(this._controlLock.style.height)-4+"px",i.style.margin="2px",this._controlLock.style.display="none",this._controlTop.style.left=-this._controlSize/2+"px",this._controlTop.style.top=-this._controlSize/2+"px",this._controlRight.style.left=e-this._controlSize/2+"px",this._controlRight.style.top=-this._controlSize/2+"px",this._controlBottom.style.left=e-this._controlSize/2+"px",this._controlBottom.style.top=n-this._controlSize/2+"px",this._controlLeft.style.left=-this._controlSize/2+"px",this._controlLeft.style.top=n-this._controlSize/2+"px",this._controlRotate.style.top=n+2*this._controlSize/2+"px",this._controlRotate.style.left=e/2-this._controlSize/2+"px",this._controlLock.style.left=e-1.8*this._controlSize/2+"px",this._controlLock.style.top=n-1.8*this._controlSize/2+"px";var u=[this._controlMidTop,this._controlMidRight,this._controlMidBottom,this._controlMidLeft];if(u.forEach((function(e){e.style.borderRadius="25px",e.style.width=t._controlMidWidth+"px",e.style.height=t._controlMidHeight+"px",e.style.border="1px solid "+t._controlBorderColor,e.style.backgroundColor=t._controlColor})),this._controlMidTop.style.left=e/2-this._controlMidWidth/2+"px",this._controlMidTop.style.top=-this._controlMidHeight/2-this._rectSelectedBorderCss.borderWidth-.5+"px",this._controlMidRight.style.transformOrigin="50% 50%",this._controlMidRight.style.transform="rotate(90deg)",this._controlMidRight.style.left=e-this._controlMidWidth/2+.5+"px",this._controlMidRight.style.top=n/2-this._controlMidHeight/2+"px",this._controlMidBottom.style.left=e/2-this._controlMidWidth/2+"px",this._controlMidBottom.style.top=n-this._controlMidHeight/2+.5+"px",this._controlMidLeft.style.transformOrigin="50% 50%",this._controlMidLeft.style.transform="rotate(90deg)",this._controlMidLeft.style.left=-this._controlMidWidth/2-this._rectSelectedBorderCss.borderWidth-.5+"px",this._controlMidLeft.style.top=n/2-this._controlMidHeight/2+"px",this._controlRotate.style.display=1==this._rectSelected.rotatable?"block":"none",this._nodeSelected.length>1){var c=!(Math.min(e,n)<10);c=!(!this._rectSelected.resizable||1==this._rectSelected.lock)&&c,r.forEach((function(t){t.style.display=c?"block":"none"})),u.forEach((function(t){t.style.display="none"})),this._controlLock.style.display=1==this._rectSelected.lock?"block":"none"}else{var a=this._nodeSelected[0];c=!(Math.min(e,n)<10);c=!(1==a.lock||!a.resizable)&&c;var s=a.anchorable();this._controlTop.style.display=c&&s.indexOf(p.TOP)>=0?"block":"none",this._controlRight.style.display=c&&s.indexOf(p.RIGHT)>=0?"block":"none",this._controlBottom.style.display=c&&s.indexOf(p.BOTTOM)>=0?"block":"none",this._controlLeft.style.display=c&&s.indexOf(p.LEFT)>=0?"block":"none",this._controlRotate.style.display=c?"block":"none";var l=!(e<35),f=!(n<35);l=1!=a.lock&&0!=a.resizable&&l,f=1!=a.lock&&0!=a.resizable&&f,this._controlMidTop.style.display=l&&s.indexOf(p.MID_TOP)>=0?"block":"none",this._controlMidBottom.style.display=l&&s.indexOf(p.MID_BOTTOM)>=0?"block":"none",this._controlMidLeft.style.display=f&&s.indexOf(p.MID_LEFT)>=0?"block":"none",this._controlMidRight.style.display=f&&s.indexOf(p.MID_RIGHT)>=0?"block":"none",this._controlLock.style.display=1==a.lock?"block":"none"}}else this._renderControl.style.display="none"},e.prototype.renderSelection=function(){this._renderSelection.style.display=this._pressingType==C.SELECTION?"block":"none";var t={x:Math.min(this._posx,this._posxDown),y:Math.min(this._posy,this._posyDown),width:Math.abs(this._posx-this._posxDown),height:Math.abs(this._posy-this._posyDown)};t=this.boxToSelectionSpace(t),this.setRenderBaseCss(this._renderSelection,L(L({},t),this._selectionCss))},e.prototype.boxToSelectionSpace=function(t){var e=this._note.render.getBoundingClientRect(),n=0==e.width?1:this._note.width/e.width,r=0==e.height?1:this._note.height/e.height;return{x:Math.floor((t.x-e.x)*n),y:Math.floor((t.y-e.y)*r),width:Math.floor(t.width*n),height:Math.floor(t.height*n),rotate:t.rotate}},e.prototype.boxToPageSpace=function(t,e){var n=e.render.getBoundingClientRect(),r=0==n.width?1:e.width/n.width,o=0==n.height?1:e.height/n.height;return{x:Math.floor((t.x-n.x)*r),y:Math.floor((t.y-n.y)*o),width:Math.floor(t.width*r),height:Math.floor(t.height*r),rotate:t.rotate}},e.prototype.pointToSelectionSpace=function(t){var e=this._note.render.getBoundingClientRect(),n=0==e.width?1:this._note.width/e.width,r=0==e.height?1:this._note.height/e.height;return{x:Math.floor((t.x-e.x)*n),y:Math.floor((t.y-e.y)*r)}},e.prototype.pointToPageSpace=function(t,e){var n=e.render.getBoundingClientRect(),r=0==n.width?1:e.width/n.width,o=0==n.height?1:e.height/n.height;return{x:Math.floor((t.x-n.x)*r),y:Math.floor((t.y-n.y)*o)}},e.prototype.pointToSelection=function(t){for(var e=[],n=this._note.render.getBoundingClientRect(),r=0==n.width?1:this._note.width/n.width,o=0==n.height?1:this._note.height/n.height,i=0;i<t.length;i++)e.push({x:Math.floor((t[i].x-n.x)*r),y:Math.floor((t[i].y-n.y)*o)});return e},e.prototype.pointToPage=function(t,e){for(var n=[],r=e.render.getBoundingClientRect(),o=0==r.width?1:e.width/r.width,i=0==r.height?1:e.height/r.height,u=0;u<t.length;u++)n.push({x:Math.floor((t[u].x-r.x)*o),y:Math.floor((t[u].y-r.y)*i)});return n},e.prototype.pointFromSelection=function(t){for(var e=[],n=this._note.render.getBoundingClientRect(),r=0==n.width?1:this._note.width/n.width,o=0==n.height?1:this._note.height/n.height,i=0;i<t.length;i++)e.push({x:Math.floor(t[i].x/r+n.x),y:Math.floor(t[i].y/o+n.y)});return e},e.prototype.pointFromPage=function(t,e){for(var n=[],r=e.render.getBoundingClientRect(),o=0==r.width?1:e.width/r.width,i=0==r.height?1:e.height/r.height,u=0;u<t.length;u++)n.push({x:Math.floor(t[u].x/o+r.x),y:Math.floor(t[u].y/i+r.y)});return n},e.prototype.pointPageToSelection=function(t,e){for(var n=[],r=e.render.getBoundingClientRect(),o=0==r.width?1:e.width/r.width,i=0==r.height?1:e.height/r.height,u=this._note.render.getBoundingClientRect(),c=0==u.width?1:this._note.width/u.width,a=0==u.height?1:this._note.height/u.height,s=0;s<t.length;s++){var l=Math.floor(t[s].x/o+r.x),f=Math.floor(t[s].y/i+r.y);l=Math.floor((l-u.x)*c),f=Math.floor((f-u.y)*a),n.push({x:l,y:f})}return n},e.prototype.pointSelectionToPage=function(t,e){for(var n=[],r=e.render.getBoundingClientRect(),o=0==r.width?1:e.width/r.width,i=0==r.height?1:e.height/r.height,u=this._note.render.getBoundingClientRect(),c=0==u.width?1:this._note.width/u.width,a=0==u.height?1:this._note.height/u.height,s=0;s<t.length;s++){var l=Math.floor(t[s].x/c+u.x),f=Math.floor(t[s].y/a+u.y);l=Math.floor((l-r.x)*o),f=Math.floor((f-r.y)*i),n.push({x:l,y:f})}return n},e.prototype.scalePageToWorld=function(t){var e=t.render.getBoundingClientRect();return{scaleX:0==e.width?1:t.width/e.width,scaleY:0==e.height?1:t.height/e.height}},e.prototype.rectNodeToSelectionSpace=function(t){var e={x:t.x,y:t.y,width:t.width,height:t.height,rotate:0},n=t;if(null!=n.getParent())for(;null!=n&&n.classType!=E.UIPAGE;)e.width*=n.scale,e.height*=n.scale,e.rotate+=n.rotate,n=n.getParent();var r=n.render.getBoundingClientRect(),o=0==n.width?1:r.width/n.width,i=0==n.height?1:r.height/n.height;e.width*=o,e.height*=i;var u=t.render.getBoundingClientRect();return e.x=u.x+(u.width-e.width)/2,e.y=u.y+(u.height-e.height)/2,e.width=e.width,e.height=e.height,e=this.boxToSelectionSpace(e)},Object.defineProperty(e.prototype,"className",{get:function(){return"SelectionHandler"},enumerable:!1,configurable:!0}),e}(S)})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,