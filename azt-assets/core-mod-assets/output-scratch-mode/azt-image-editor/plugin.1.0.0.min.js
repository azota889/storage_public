!(function () {
	'use strict';
	const a = 'azt-image-editor',
		i = 'azt-dispatch-setup-api';
	var o, n, t;
	((t = o = o || {})[(t.FRAME = 0)] = 'FRAME'),
		(t[(t.DOCUMENT = 1)] = 'DOCUMENT'),
		(t[(t.ALL = 2)] = 'ALL'),
		((t = n = n || {})[(t.AztSigma = 0)] = 'AztSigma'),
		(t[(t.AztImage = 1)] = 'AztImage'),
		(t[(t.AztAdd = 2)] = 'AztAdd'),
		(t[(t.AztBadge = 3)] = 'AztBadge'),
		(t[(t.AztLayoutList = 4)] = 'AztLayoutList'),
		(t[(t.AztBraces = 5)] = 'AztBraces'),
		(t[(t.AztListChecks = 6)] = 'AztListChecks');
	const d = {
			setup: (t, n) => {
				t.addCommand('aztAddSuggestionActionMenu', (t, e) => {
					n.addOneMenu(e);
				});
			},
			call: (t, e) => {
				t.execCommand('aztAddSuggestionActionMenu', !1, e);
			},
			name: 'aztAddSuggestionActionMenu'
		},
		e = {
			setup: (t, n) => {
				t.addCommand('aztHiddenOneSuggestionActionMenu', (t, e) => {
					n.hiddenOneMenu(e);
				});
			},
			call: (t, e) => {
				t.execCommand('aztHiddenOneSuggestionActionMenu', !1, e);
			},
			name: 'aztHiddenOneSuggestionActionMenu'
		},
		r = {
			setup: (t, n) => {
				t.addCommand('aztOpenOneSuggestionActionMenu', (t, e) => {
					n.openOneMenu(e);
				});
			},
			call: (t, e) => {
				t.execCommand('aztOpenOneSuggestionActionMenu', !1, e);
			},
			name: 'aztOpenOneSuggestionActionMenu'
		},
		s = {
			setup: (t, n) => {
				t.addCommand('aztHiddenSuggestionActionMenu', (t, e) => {
					n.hidden(e);
				});
			},
			call: (t, e) => {
				t.execCommand('aztHiddenSuggestionActionMenu', !1, e);
			},
			name: 'aztHiddenSuggestionActionMenu'
		},
		c = {
			setup: (t, n) => {
				t.addCommand('aztLoadScriptSource', (t, e) => {
					n.loadSrcJs(e.name, e.url, e.mode).then(e.callback);
				});
			},
			call: (t, e) => {
				t.execCommand('aztLoadScriptSource', !1, e);
			},
			name: 'aztLoadScriptSource'
		},
		l = {
			setup: (t, n) => {
				t.addCommand('aztLoadMultipleScriptSource', (t, e) => {
					n.loadMultipleSrcJs(e.lst).then(e.callback);
				});
			},
			call: (t, e) => {
				t.execCommand('aztLoadMultipleScriptSource', !1, e);
			},
			name: 'aztLoadMultipleScriptSource'
		},
		g = {
			setup: (t, n) => {
				t.addCommand('aztLoadStyleSource', (t, e) => {
					n.loadStyle(e.name, e.content, e.mode);
				});
			},
			call: (t, e) => {
				t.execCommand('aztLoadStyleSource', !1, e);
			},
			name: 'aztLoadStyleSource'
		},
		m = {
			setup: (t, n) => {
				t.addCommand('aztSetContentPlaceholderActionMenu', (t, e) => {
					n.setContent(e);
				});
			},
			call: (t, e) => {
				t.execCommand('aztSetContentPlaceholderActionMenu', !1, e);
			},
			name: 'aztSetContentPlaceholderActionMenu'
		};
	class u {
		constructor(t) {
			this.editor = t;
		}
		loadScript(e, n, a) {
			return new Promise((t) => {
				c.call(this.editor, { name: e, url: n, mode: a, callback: t });
			});
		}
		loadMultipleScript(e) {
			return new Promise((t) => {
				l.call(this.editor, { lst: e, callback: t });
			});
		}
		loadStyle(t, e, n) {
			return g.call(this.editor, { name: t, content: e, mode: n });
		}
		hiddenSuggestionMenu(t) {
			return s.call(this.editor, t);
		}
		addOneSuggestionMenu(t, e, n, a, i) {
			return d.call(this.editor, { name: t, callback: e, svgIcon: n, hidden: a, hiddenOnExcuse: i });
		}
		openOneSuggestionMenu(t) {
			return r.call(this.editor, t);
		}
		hiddenOneSuggestionMenu(t) {
			return e.call(this.editor, t);
		}
		setContentPlaceholder(t) {
			return m.call(this.editor, t);
		}
		pushJsonContent(t, e) {
			return this.editor.fire('azt-dispatch-push-json-content', { name: t, content: e });
		}
		static replaceTranslateService(t) {
			Object.prototype.hasOwnProperty.call(window, 'aztEditorFnsTranslateService') || (window.aztEditorFnsTranslateService = t);
		}
		translate(t, e) {
			return window.aztEditorFnsTranslateService ? window.aztEditorFnsTranslateService(t, e) : null != e ? e : t;
		}
	}
	class h {
		constructor(t, e) {
			(this.editor = t),
				(this.pluginApi = e),
				this.editor.addCommand('azt-image-editor-start-choose-image', () => {
					this.loadImageAndConvertToBase64();
				}),
				this.pluginApi.loadMultipleScript([{ name: 'mnpaint_bundle.js', url: 'https://239114911.e.cdneverest.net/cdnazota/azt-assets/core-mod-assets/js/mnpaint_bundle.js?v=0.3', mode: o.DOCUMENT }]).then(() => {
					this.pluginApi.addOneSuggestionMenu(this.pluginApi.translate('lang_editor_common_add_new_image', 'Thêm hình ảnh mới'), 'azt-image-editor-start-choose-image', n.AztImage, !1, !0),
						this.editor.on('NewBlock', () => {
							this.detachAll();
						}),
						this.editor.on('Change', () => {
							this.detachAll();
						}),
						this.editor.on('dblclick', (t) => {
							t = t.target.closest('.azt-image-editor-manager-that');
							t && this.onHandleExecuteSuggestion(t);
						});
				});
		}
		loadImageAndConvertToBase64() {
			var t = document.createElement('input');
			(t.type = 'file'),
				(t.accept = 'image/*'),
				t.addEventListener('change', (t) => {
					t = null == (t = t.target.files) ? void 0 : t[0];
					if (t) {
						const n = new FileReader();
						(n.onloadend = () => {
							var t = n.result;
							const e = new Image();
							(e.crossOrigin = 'anonymous'),
								(e.onload = () => {
									(e.width = 0.6 * e.width), (e.height = 0.6 * e.height), this.editor.focus(), this.editor.execCommand('mceInsertContent', !1, e.outerHTML);
								}),
								(e.src = t);
						}),
							n.readAsDataURL(t);
					}
				}),
				t.click();
		}
		onHandleExecuteSuggestion(n) {
			const a = mnpaint.getInstance(),
				t = document.createElement('img'),
				e =
					(this.editor.windowManager.open({
						size: 'large',
						title: this.pluginApi.translate('lang_cms_common_image_editor', 'Trình chỉnh sửa hình ảnh'),
						body: { type: 'panel', items: [{ type: 'htmlpanel', html: '<div id="only-image-editor_image__process"></div>' }] },
						buttons: [
							{ type: 'cancel', text: this.pluginApi.translate('lang_editor_common_close', 'Đóng') },
							{ type: 'submit', text: this.pluginApi.translate('lang_editor_common_complete', 'Hoàn thành'), primary: !0 }
						],
						initialData: { codeBlock: n ? n.getAttribute('content') : '' },
						onSubmit: (t) => {
							var e = a._imgCtx.canvas.toDataURL('image/png', 1);
							return n.setAttribute('width', (0.6 * a._imgCtx.canvas.width).toString()), n.setAttribute('height', (0.6 * a._imgCtx.canvas.height).toString()), n.setAttribute('src', e), this.editor.focus(), t.close();
						}
					}),
					document.getElementById('only-image-editor_image__process'));
			var i = n.getAttribute('src') || '';
			(t.onload = () => {
				a.startSession(t), (a.config.width = e.clientWidth), (a.config.height = e.clientHeight), (a.config.resizable = !1), (a.config.stopWhenClickOutsize = !1), (a.config.stopWhenClickOutside = !1), (a.config.autoUpdateSource = 'change');
			}),
				e.appendChild(t),
				(t.src = i);
		}
		detachAll() {
			this.processImageAztTag(), this.processCommonImageTag();
		}
		processCommonImageTag() {
			this.editor
				.getBody()
				.querySelectorAll('img')
				.forEach((t) => {
					t.classList.add('azt-image-editor-manager-that');
				});
		}
		processImageAztTag() {
			this.editor
				.getBody()
				.querySelectorAll('azt-image')
				.forEach((t) => {
					if (!t.hasAttribute('processing')) {
						t.setAttribute('procession', 'true');
						const n = new Image();
						t.parentNode.insertBefore(n, t);
						var e = t.getAttribute('data-link');
						const a = Number(t.getAttribute('data-x')),
							i = Number(t.getAttribute('data-y')),
							o = Number(t.getAttribute('data-width')),
							d = Number(t.getAttribute('data-height')),
							r = (t.remove(), new Image());
						(r.crossOrigin = 'anonymous'),
							(r.onload = () => {
								var t = document.createElement('canvas'),
									e = t.getContext('2d');
								(t.width = o), (t.height = d), e.drawImage(r, a, i, o, d, 0, 0, o, d), (n.crossOrigin = 'anonymous'), (n.src = t.toDataURL('image/png')), (n.width = 0.6 * o), (n.height = 0.6 * d);
							}),
							(r.src = e);
					}
				});
		}
	}
	const p = `.azt-image-editor-manager-that {
    cursor: pointer;
}

.tox-form__group {
    height: 100% !important;
}

#only-image-editor_image__process {
    width: 100%;
    height: 100%;
}`,
		A = (e) => {
			var n;
			(n = e),
				new Promise((t) => {
					n.on(i, () => {
						t(new u(n));
					});
				}).then((t) => {
					t.loadStyle(a + '__default', p, o.ALL), new h(e, t);
				});
		};
	tinymce.PluginManager.add(a, A);
})();
