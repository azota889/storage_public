!(function () {
	'use strict';
	const n = 'azt-math-editor',
		o = 'azt-dispatch-setup-api';
	var i, a, t;
	((t = i = i || {})[(t.FRAME = 0)] = 'FRAME'),
		(t[(t.DOCUMENT = 1)] = 'DOCUMENT'),
		(t[(t.ALL = 2)] = 'ALL'),
		((t = a = a || {})[(t.AztSigma = 0)] = 'AztSigma'),
		(t[(t.AztImage = 1)] = 'AztImage'),
		(t[(t.AztAdd = 2)] = 'AztAdd'),
		(t[(t.AztBadge = 3)] = 'AztBadge'),
		(t[(t.AztLayoutList = 4)] = 'AztLayoutList'),
		(t[(t.AztBraces = 5)] = 'AztBraces'),
		(t[(t.AztListChecks = 6)] = 'AztListChecks');
	const s = {
			setup: (t, a) => {
				t.addCommand('aztAddSuggestionActionMenu', (t, e) => {
					a.addOneMenu(e);
				});
			},
			call: (t, e) => {
				t.execCommand('aztAddSuggestionActionMenu', !1, e);
			},
			name: 'aztAddSuggestionActionMenu'
		},
		e = {
			setup: (t, a) => {
				t.addCommand('aztHiddenOneSuggestionActionMenu', (t, e) => {
					a.hiddenOneMenu(e);
				});
			},
			call: (t, e) => {
				t.execCommand('aztHiddenOneSuggestionActionMenu', !1, e);
			},
			name: 'aztHiddenOneSuggestionActionMenu'
		},
		l = {
			setup: (t, a) => {
				t.addCommand('aztOpenOneSuggestionActionMenu', (t, e) => {
					a.openOneMenu(e);
				});
			},
			call: (t, e) => {
				t.execCommand('aztOpenOneSuggestionActionMenu', !1, e);
			},
			name: 'aztOpenOneSuggestionActionMenu'
		},
		r = {
			setup: (t, a) => {
				t.addCommand('aztHiddenSuggestionActionMenu', (t, e) => {
					a.hidden(e);
				});
			},
			call: (t, e) => {
				t.execCommand('aztHiddenSuggestionActionMenu', !1, e);
			},
			name: 'aztHiddenSuggestionActionMenu'
		},
		c = {
			setup: (t, a) => {
				t.addCommand('aztLoadScriptSource', (t, e) => {
					a.loadSrcJs(e.name, e.url, e.mode).then(e.callback);
				});
			},
			call: (t, e) => {
				t.execCommand('aztLoadScriptSource', !1, e);
			},
			name: 'aztLoadScriptSource'
		},
		d = {
			setup: (t, a) => {
				t.addCommand('aztLoadMultipleScriptSource', (t, e) => {
					a.loadMultipleSrcJs(e.lst).then(e.callback);
				});
			},
			call: (t, e) => {
				t.execCommand('aztLoadMultipleScriptSource', !1, e);
			},
			name: 'aztLoadMultipleScriptSource'
		},
		m = {
			setup: (t, a) => {
				t.addCommand('aztLoadStyleSource', (t, e) => {
					a.loadStyle(e.name, e.content, e.mode);
				});
			},
			call: (t, e) => {
				t.execCommand('aztLoadStyleSource', !1, e);
			},
			name: 'aztLoadStyleSource'
		},
		u = {
			setup: (t, a) => {
				t.addCommand('aztSetContentPlaceholderActionMenu', (t, e) => {
					a.setContent(e);
				});
			},
			call: (t, e) => {
				t.execCommand('aztSetContentPlaceholderActionMenu', !1, e);
			},
			name: 'aztSetContentPlaceholderActionMenu'
		};
	class h {
		constructor(t) {
			this.editor = t;
		}
		loadScript(e, a, n) {
			return new Promise((t) => {
				c.call(this.editor, { name: e, url: a, mode: n, callback: t });
			});
		}
		loadMultipleScript(e) {
			return new Promise((t) => {
				d.call(this.editor, { lst: e, callback: t });
			});
		}
		loadStyle(t, e, a) {
			return m.call(this.editor, { name: t, content: e, mode: a });
		}
		hiddenSuggestionMenu(t) {
			return r.call(this.editor, t);
		}
		addOneSuggestionMenu(t, e, a, n, o) {
			return s.call(this.editor, { name: t, callback: e, svgIcon: a, hidden: n, hiddenOnExcuse: o });
		}
		openOneSuggestionMenu(t) {
			return l.call(this.editor, t);
		}
		hiddenOneSuggestionMenu(t) {
			return e.call(this.editor, t);
		}
		setContentPlaceholder(t) {
			return u.call(this.editor, t);
		}
		pushJsonContent(t, e) {
			return this.editor.fire('azt-dispatch-push-json-content', { name: t, content: e });
		}
		static replaceTranslateService(t) {
			Object.prototype.hasOwnProperty.call(window, 'aztEditorFnsTranslateService') || (window.aztEditorFnsTranslateService = t);
		}
		translate(t, e) {
			return window.aztEditorFnsTranslateService ? window.aztEditorFnsTranslateService(t, e) : null != e ? e : t;
		}
	}
	class p {
		static castJsonToClassObj(t, e, a) {
			try {
				var n = Object.assign(t, JSON.parse(e));
				return Array.isArray(n) ? (null != a ? a : void 0) : n;
			} catch (t) {
				return null != a ? a : void 0;
			}
		}
		static aztPluginExecCommand(t, e, a) {
			a.execCommand(t, !1, e);
		}
		static pushContentLatexToElement(t, e) {
			e.setAttribute('data-latex', t), (e.innerHTML = `$$${t}$$`), this.changeStatusElementToPending(e);
		}
		static changeStatusElementToPending(t) {
			t.classList.remove('azt-math-processing', 'azt-math-viewed'), t.classList.add('azt-math-pending');
		}
		static changeStatusElementToProcessing(t) {
			t.classList.remove('azt-math-processing', 'azt-math-viewed'), t.classList.add('azt-math-processing');
		}
		static changeStatusElementToViewed(t) {
			t.classList.remove('azt-math-processing', 'azt-math-pending'), t.classList.add('azt-math-viewed');
		}
		static changeStatusElementToSelected(t) {
			t.classList.remove('azt-math-document-selected'), t.classList.add('azt-math-selected');
		}
		static changeStatusElementToDocumentSelect(t) {
			t.classList.remove('azt-math-selected'), t.classList.add('azt-math-document-selected');
		}
		static setupMceElement() {
			var t = new window.MathfieldElement();
			return (
				t.classList.add('mfe-editor'),
				t.setOptions({ fontsDirectory: 'https://azota889.github.io/storage_public/azota_assets/mathlive/fonts', soundsDirectory: 'https://azota889.github.io/storage_public/azota_assets/mathlive/sounds', defaultMode: 'math' }),
				t
			);
		}
	}
	class g {
		constructor(t, e) {
			(this.editor = t),
				(this.pluginApi = e),
				this.pluginApi
					.loadMultipleScript([
						{ name: 'tex-mml-chtml', url: 'https://239114911.e.cdneverest.net/cdnazota/storage_public/azota_assets/js/tex-mml-chtml/tex-mml-chtml.js', mode: i.FRAME },
						{ name: 'mathlive', url: 'https://unpkg.com/mathlive', mode: i.DOCUMENT }
					])
					.then(() => {
						this.detachAllElement(),
							this.editor.addCommand('azt-math-editor-start-create', () => {
								this.onHandleExecuteSuggestion();
							}),
							this.editor.on('Redo', () => {
								this.detachAllElement();
							}),
							this.editor.on('Undo', () => {
								this.detachAllElement();
							}),
							this.editor.on('Change', () => {
								this.removeAllSelected(), this.detachAllElement();
							}),
							this.editor.on('click', (t) => {
								this.removeAllSelected();
								t = t.target.closest('.plugin_mathjax_process');
								t && p.changeStatusElementToSelected(t);
							}),
							this.editor.on('dblclick', (t) => {
								t = t.target.closest('.plugin_mathjax_process');
								t && this.onDoubleClick(t);
							}),
							this.editor.getDoc().addEventListener('selectionchange', () => {
								var t = this.editor.getDoc().getSelection();
								if ((this.removeAllDocumentSelected(), 'Range' === t.type)) {
									if ('#text' !== t.focusNode.nodeName) {
										var e = t.focusNode;
										if (e.classList.contains('plugin_mathjax_process')) return void p.changeStatusElementToDocumentSelect(e);
									}
									if (t.anchorOffset !== t.focusOffset) {
										var a = this.getSelected(t);
										if (a && 0 < a.length) for (let t = 0; t < a.length; t++) p.changeStatusElementToDocumentSelect(a[t]);
									}
								}
							}),
							this.pluginApi.addOneSuggestionMenu(this.pluginApi.translate('lang_editor_common_add_new_formula', 'Thêm công thức mới'), 'azt-math-editor-start-create', a.AztSigma, !1, !0);
					});
		}
		createHook(t) {
			var e = this.editor.getDoc().createElement('span');
			return e.classList.add('plugin_mathjax_process'), p.pushContentLatexToElement(t, e), e;
		}
		removeAllDocumentSelected() {
			var e = this.editor.getDoc().querySelectorAll('.azt-math-document-selected');
			for (let t = 0; t < e.length; t++) e[t].classList.remove('azt-math-document-selected');
		}
		getSelected(t) {
			var e = [],
				a = t.getRangeAt(0),
				n = document.createTreeWalker(a.commonAncestorContainer, NodeFilter.SHOW_ELEMENT);
			let o = n.nextNode();
			for (; o; ) a.intersectsNode(o) && o.classList.contains('plugin_mathjax_process') && e.push(o), (o = n.nextNode());
			return e;
		}
		onDoubleClick(t) {
			this.onHandleExecuteSuggestion(t);
		}
		removeAllSelected() {
			var e = this.editor.getDoc().querySelectorAll('.azt-math-selected');
			for (let t = 0; t < e.length; t++) e[t].classList.remove('azt-math-selected');
		}
		detachAllElement() {
			var e = this.editor.getDoc().querySelectorAll('azt-math');
			for (let t = 0; t < e.length; t++) {
				var a = e[t];
				a.classList.contains('plugin_mathjax_process') || (a.classList.add('plugin_mathjax_process'), a.classList.add('azt-math-pending'));
			}
			var n = this.editor.getDoc().querySelectorAll('.plugin_mathjax_process');
			for (let t = 0; t < n.length; t++) {
				var o = n[t];
				o.classList.contains('azt-math-pending') ? this.processElement(o) : o.classList.contains('azt-math-viewed') && null === o.firstElementChild && (p.changeStatusElementToPending(o), this.processElement(o));
			}
		}
		onHandleExecuteSuggestion(e) {
			const a = p.setupMceElement();
			this.editor.windowManager.open({
				title: this.pluginApi.translate('lang_cms_common_formula_editor', 'Trình chỉnh sửa công thức'),
				body: { type: 'panel', items: [{ type: 'htmlpanel', html: '<div id="formula-mathtype-editor"></div>' }] },
				buttons: [
					{ type: 'cancel', text: this.pluginApi.translate('lang_editor_common_close', 'Đóng') },
					{ type: 'submit', text: e ? this.pluginApi.translate('lang_editor_common_edit', 'Chỉnh sửa') : this.pluginApi.translate('lang_editor_common_add_formula', 'Thêm công thức'), primary: !0 }
				],
				onSubmit: (t) => (
					a.executeCommand(['toggleVirtualKeyboard']),
					e ? (p.pushContentLatexToElement(a.value, e), p.changeStatusElementToPending(e), this.processElement(e), this.editor.focus()) : (this.editor.insertContent(this.createHook(a.value).outerHTML), this.editor.insertContent(' ')),
					t.close()
				),
				onCancel: () => {
					a.executeCommand(['toggleVirtualKeyboard']);
				}
			}),
				(a.value = e ? e.getAttribute('data-latex') : ''),
				document.getElementById('formula-mathtype-editor').appendChild(a),
				a.focus(),
				a.executeCommand(['toggleVirtualKeyboard']);
		}
		processElement(t) {
			p.changeStatusElementToProcessing(t), t.setAttribute('contenteditable', 'false'), (t.textContent = `$$${t.getAttribute('data-latex')}$$`), this.editor.getDoc().defaultView.MathJax.typeset([t]), p.changeStatusElementToViewed(t);
		}
	}
	const S = `.mfe-editor {
    font-size: 25px !important;
    padding: 10px !important;
    width: 100% !important;
    border: 1px solid #CFD8DC !important;
    border-radius: 5px;
}

.tox-dialog__body-content {
    overflow: hidden !important;
}

/* Hide the virtual keyboard toggle */
math-field::part(virtual-keyboard-toggle) {
display: none;
}

.ML__keyboard {
    z-index: 999999 !important;
}

.tox .tox-dialog-wrap {
    align-items: flex-start !important;
    padding-top: 20px;
}

mjx-container {
    display: inline-block !important;
    margin: 0 !important;
    padding: 0 !important;
}
.plugin_mathjax_process
.plugin_mathjax_process:focus,
.plugin_mathjax_process:focus-visible,
.plugin_mathjax_process::selection {
    outline: none !important;
}

.plugin_mathjax_process {
    position: relative;
    display: inline-block !important;
    cursor: pointer !important;
    outline: none !important;
    padding: 5px 0;
    margin: 0 5px;
}

.plugin_mathjax_process:hover {
    outline: 1px solid #2361ae !important;
    box-shadow: 2px 2px 3px rgba(0,0,0,.1) inset,0 0 !important;
}

.plugin_mathjax_process:hover::before,
.azt-math-selected::before,
.azt-math-document-selected::before {
    content: 'Σ';
    position: absolute;
    top: 0;
    left: -11px;
    font-size: 10px;
    background: #2361ae;
    color: #FFF;
    padding: 0 2px;
    border-radius: 5px 0 0 5px;
}

.azt-math-selected {
    background: rgba(158,201,250,.3) !important;
    outline: 1px solid #2361ae !important;
    box-shadow: 2px 2px 3px rgba(0,0,0,.1) inset,0 0 !important;
}
.azt-math-document-selected {
    background: rgb(158 201 250) !important;
    outline: 1px solid #2361ae !important;
    box-shadow: 2px 2px 3px rgba(0,0,0,.1) inset,0 0 !important;
}`,
		z = (e) => {
			var a;
			(a = e),
				new Promise((t) => {
					a.on(o, () => {
						t(new h(a));
					});
				}).then((t) => {
					t.loadStyle(n + '__default', S, i.ALL), new g(e, t);
				});
		};
	tinymce.PluginManager.add(n, z);
})();
